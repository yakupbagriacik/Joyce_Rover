
Joyce_Rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e2c  08003e2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e2c  08003e2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e2c  08003e2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000010  08003e40  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003e40  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000889a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015bd  00000000  00000000  000288cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00029e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165d8  00000000  00000000  0002b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009787  00000000  00000000  00041690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841fc  00000000  00000000  0004ae17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000285c  00000000  00000000  000cf064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003df0 	.word	0x08003df0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003df0 	.word	0x08003df0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_f2iz>:
 8000ba4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ba8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bac:	d30f      	bcc.n	8000bce <__aeabi_f2iz+0x2a>
 8000bae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bb6:	d90d      	bls.n	8000bd4 <__aeabi_f2iz+0x30>
 8000bb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc8:	bf18      	it	ne
 8000bca:	4240      	negne	r0, r0
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr
 8000bd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bd8:	d101      	bne.n	8000bde <__aeabi_f2iz+0x3a>
 8000bda:	0242      	lsls	r2, r0, #9
 8000bdc:	d105      	bne.n	8000bea <__aeabi_f2iz+0x46>
 8000bde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000be2:	bf08      	it	eq
 8000be4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	69b9      	ldr	r1, [r7, #24]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	1a8a      	subs	r2, r1, r2
 8000c0a:	fb03 f202 	mul.w	r2, r3, r2
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	fb92 f2f3 	sdiv	r2, r2, r3
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	4413      	add	r3, r2
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
	...

08000c28 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000c28:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000c2c:	b095      	sub	sp, #84	; 0x54
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (htim->Instance == TIM2) {
 8000c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c3a:	f040 8192 	bne.w	8000f62 <HAL_TIM_IC_CaptureCallback+0x33a>
		switch (htim->Channel) {
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	7f1b      	ldrb	r3, [r3, #28]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	f200 818e 	bhi.w	8000f66 <HAL_TIM_IC_CaptureCallback+0x33e>
 8000c4a:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c71 	.word	0x08000c71
 8000c54:	08000d25 	.word	0x08000d25
 8000c58:	08000f67 	.word	0x08000f67
 8000c5c:	08000dd3 	.word	0x08000dd3
 8000c60:	08000f67 	.word	0x08000f67
 8000c64:	08000f67 	.word	0x08000f67
 8000c68:	08000f67 	.word	0x08000f67
 8000c6c:	08000e81 	.word	0x08000e81
		case HAL_TIM_ACTIVE_CHANNEL_1:
			// Kanal 1 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC1P) == 0) {
 8000c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d113      	bne.n	8000ca6 <HAL_TIM_IC_CaptureCallback+0x7e>
				ch1_rising = TIM2->CCR1; // yukselen kenar degerini kaydet
 8000c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c84:	2200      	movs	r2, #0
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
 8000c88:	647a      	str	r2, [r7, #68]	; 0x44
 8000c8a:	4b8b      	ldr	r3, [pc, #556]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000c8c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8000c90:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC1P; // polariteyi düsen kenar olarak degistir
 8000c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c98:	6a1b      	ldr	r3, [r3, #32]
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	6213      	str	r3, [r2, #32]
				if (pre_ch1 < 2010 && pre_ch1 > 990) {
					ch1 = pre_ch1;
				}
				TIM2->CCER &= ~TIM_CCER_CC1P; // polariteyi yukselen kenar olarak ayarla
			}
			break;
 8000ca4:	e160      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
				ch1_falling = TIM2->CCR1;
 8000ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	2200      	movs	r2, #0
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000cb2:	4b82      	ldr	r3, [pc, #520]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x294>)
 8000cb4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000cb8:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch1 = ch1_falling - ch1_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8000cbc:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x294>)
 8000cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc2:	4b7d      	ldr	r3, [pc, #500]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	633c      	str	r4, [r7, #48]	; 0x30
 8000ccc:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8000cd2:	4b7b      	ldr	r3, [pc, #492]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000cd4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000cd8:	e9c3 1200 	strd	r1, r2, [r3]
				if (pre_ch1 < 0) {
 8000cdc:	4b78      	ldr	r3, [pc, #480]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch1 < 2010 && pre_ch1 > 990) {
 8000ce2:	4b77      	ldr	r3, [pc, #476]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f240 71da 	movw	r1, #2010	; 0x7da
 8000cec:	428a      	cmp	r2, r1
 8000cee:	f173 0300 	sbcs.w	r3, r3, #0
 8000cf2:	d20e      	bcs.n	8000d12 <HAL_TIM_IC_CaptureCallback+0xea>
 8000cf4:	4b72      	ldr	r3, [pc, #456]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f240 31df 	movw	r1, #991	; 0x3df
 8000cfe:	428a      	cmp	r2, r1
 8000d00:	f173 0300 	sbcs.w	r3, r3, #0
 8000d04:	d305      	bcc.n	8000d12 <HAL_TIM_IC_CaptureCallback+0xea>
					ch1 = pre_ch1;
 8000d06:	4b6e      	ldr	r3, [pc, #440]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	496d      	ldr	r1, [pc, #436]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8000d0e:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC1P; // polariteyi yukselen kenar olarak ayarla
 8000d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1c:	f023 0302 	bic.w	r3, r3, #2
 8000d20:	6213      	str	r3, [r2, #32]
			break;
 8000d22:	e121      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
		case HAL_TIM_ACTIVE_CHANNEL_2:
			// Kanal 2 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC2P) == 0) {
 8000d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	f003 0320 	and.w	r3, r3, #32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d113      	bne.n	8000d5a <HAL_TIM_IC_CaptureCallback+0x132>
				ch2_rising = TIM2->CCR2; // yukselen kenar degerini kaydet
 8000d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d38:	2200      	movs	r2, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d3e:	4b62      	ldr	r3, [pc, #392]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8000d40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000d44:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC2P; // polariteyi düsen kenar olarak degistir
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6213      	str	r3, [r2, #32]
					ch2 = pre_ch2;
				}
				TIM2->CCER &= ~TIM_CCER_CC2P; // polariteyi yukselen kenar olarak ayarla
			}

			break;
 8000d58:	e106      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
				ch2_falling = TIM2->CCR2;
 8000d5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d60:	2200      	movs	r2, #0
 8000d62:	623b      	str	r3, [r7, #32]
 8000d64:	627a      	str	r2, [r7, #36]	; 0x24
 8000d66:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000d68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000d6c:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch2 = ch2_falling - ch2_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8000d70:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d76:	4b54      	ldr	r3, [pc, #336]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	ebb0 0a02 	subs.w	sl, r0, r2
 8000d80:	eb61 0b03 	sbc.w	fp, r1, r3
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000d86:	e9c3 ab00 	strd	sl, fp, [r3]
				if (pre_ch2 < 0) {
 8000d8a:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch2 < 2010 && pre_ch2 > 990) {
 8000d90:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	f240 71da 	movw	r1, #2010	; 0x7da
 8000d9a:	428a      	cmp	r2, r1
 8000d9c:	f173 0300 	sbcs.w	r3, r3, #0
 8000da0:	d20e      	bcs.n	8000dc0 <HAL_TIM_IC_CaptureCallback+0x198>
 8000da2:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da8:	f240 31df 	movw	r1, #991	; 0x3df
 8000dac:	428a      	cmp	r2, r1
 8000dae:	f173 0300 	sbcs.w	r3, r3, #0
 8000db2:	d305      	bcc.n	8000dc0 <HAL_TIM_IC_CaptureCallback+0x198>
					ch2 = pre_ch2;
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dba:	4946      	ldr	r1, [pc, #280]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8000dbc:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC2P; // polariteyi yukselen kenar olarak ayarla
 8000dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dca:	f023 0320 	bic.w	r3, r3, #32
 8000dce:	6213      	str	r3, [r2, #32]
			break;
 8000dd0:	e0ca      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
		case HAL_TIM_ACTIVE_CHANNEL_3:
			// Kanal 3 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC3P) == 0) {
 8000dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d113      	bne.n	8000e08 <HAL_TIM_IC_CaptureCallback+0x1e0>
				ch3_rising = TIM2->CCR3; // yukselen kenar degerini kaydet
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de6:	2200      	movs	r2, #0
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	61fa      	str	r2, [r7, #28]
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8000dee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000df2:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC3P; // polariteyi düsen kenar olarak degistir
 8000df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e04:	6213      	str	r3, [r2, #32]
					ch3 = pre_ch3;
				}
				TIM2->CCER &= ~TIM_CCER_CC3P; // polariteyi yukselen kenar olarak ayarla
			}

			break;
 8000e06:	e0af      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
				ch3_falling = TIM2->CCR3;
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0e:	2200      	movs	r2, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	617a      	str	r2, [r7, #20]
 8000e14:	4b31      	ldr	r3, [pc, #196]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8000e16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e1a:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch3 = ch3_falling - ch3_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8000e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	ebb0 0802 	subs.w	r8, r0, r2
 8000e2e:	eb61 0903 	sbc.w	r9, r1, r3
 8000e32:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e34:	e9c3 8900 	strd	r8, r9, [r3]
				if (pre_ch3 < 0) {
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch3 < 2010 && pre_ch3 > 990) {
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e44:	f240 71da 	movw	r1, #2010	; 0x7da
 8000e48:	428a      	cmp	r2, r1
 8000e4a:	f173 0300 	sbcs.w	r3, r3, #0
 8000e4e:	d20e      	bcs.n	8000e6e <HAL_TIM_IC_CaptureCallback+0x246>
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f240 31df 	movw	r1, #991	; 0x3df
 8000e5a:	428a      	cmp	r2, r1
 8000e5c:	f173 0300 	sbcs.w	r3, r3, #0
 8000e60:	d305      	bcc.n	8000e6e <HAL_TIM_IC_CaptureCallback+0x246>
					ch3 = pre_ch3;
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	491e      	ldr	r1, [pc, #120]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8000e6a:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC3P; // polariteyi yukselen kenar olarak ayarla
 8000e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e7c:	6213      	str	r3, [r2, #32]
			break;
 8000e7e:	e073      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
		case HAL_TIM_ACTIVE_CHANNEL_4:
			// Kanal 4 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC4P) == 0) {
 8000e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d12e      	bne.n	8000eec <HAL_TIM_IC_CaptureCallback+0x2c4>
				ch4_rising = TIM2->CCR4; // yukselen kenar degerini kaydet
 8000e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	2200      	movs	r2, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	60fa      	str	r2, [r7, #12]
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8000e9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000ea0:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC4P; // polariteyi düsen kenar olarak degistir
 8000ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eb2:	6213      	str	r3, [r2, #32]
					ch4 = pre_ch4;
				}
				TIM2->CCER &= ~TIM_CCER_CC4P; // polariteyi yukselen kenar olarak ayarla
			}

			break;
 8000eb4:	e058      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
 8000eb6:	bf00      	nop
 8000eb8:	200000c0 	.word	0x200000c0
 8000ebc:	200000c8 	.word	0x200000c8
 8000ec0:	200000d8 	.word	0x200000d8
 8000ec4:	200000d0 	.word	0x200000d0
 8000ec8:	200000e0 	.word	0x200000e0
 8000ecc:	200000e8 	.word	0x200000e8
 8000ed0:	200000f8 	.word	0x200000f8
 8000ed4:	200000f0 	.word	0x200000f0
 8000ed8:	20000100 	.word	0x20000100
 8000edc:	20000108 	.word	0x20000108
 8000ee0:	20000118 	.word	0x20000118
 8000ee4:	20000110 	.word	0x20000110
 8000ee8:	20000120 	.word	0x20000120
				ch4_falling = TIM2->CCR4;
 8000eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8000efa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000efe:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch4 = ch4_falling - ch4_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8000f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0x350>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	1a84      	subs	r4, r0, r2
 8000f10:	eb61 0503 	sbc.w	r5, r1, r3
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f16:	e9c3 4500 	strd	r4, r5, [r3]
				if (pre_ch4 < 0) {
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch4 < 2010 && pre_ch4 > 990) {
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f240 71da 	movw	r1, #2010	; 0x7da
 8000f2a:	428a      	cmp	r2, r1
 8000f2c:	f173 0300 	sbcs.w	r3, r3, #0
 8000f30:	d20e      	bcs.n	8000f50 <HAL_TIM_IC_CaptureCallback+0x328>
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f240 31df 	movw	r1, #991	; 0x3df
 8000f3c:	428a      	cmp	r2, r1
 8000f3e:	f173 0300 	sbcs.w	r3, r3, #0
 8000f42:	d305      	bcc.n	8000f50 <HAL_TIM_IC_CaptureCallback+0x328>
					ch4 = pre_ch4;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x358>)
 8000f4c:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC4P; // polariteyi yukselen kenar olarak ayarla
 8000f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f5e:	6213      	str	r3, [r2, #32]
			break;
 8000f60:	e002      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
		default:
			break;
		}
	}
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
			break;
 8000f66:	bf00      	nop
}
 8000f68:	bf00      	nop
 8000f6a:	3754      	adds	r7, #84	; 0x54
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000f72:	4770      	bx	lr
 8000f74:	20000128 	.word	0x20000128
 8000f78:	20000120 	.word	0x20000120
 8000f7c:	20000138 	.word	0x20000138
 8000f80:	20000130 	.word	0x20000130

08000f84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f8a:	f000 fd83 	bl	8001a94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f8e:	f000 fa55 	bl	800143c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f92:	f000 fbd7 	bl	8001744 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000f96:	f000 fa97 	bl	80014c8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000f9a:	f000 fb43 	bl	8001624 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	48a9      	ldr	r0, [pc, #676]	; (8001248 <main+0x2c4>)
 8000fa2:	f001 fe27 	bl	8002bf4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	48a7      	ldr	r0, [pc, #668]	; (8001248 <main+0x2c4>)
 8000faa:	f001 fe23 	bl	8002bf4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000fae:	2108      	movs	r1, #8
 8000fb0:	48a5      	ldr	r0, [pc, #660]	; (8001248 <main+0x2c4>)
 8000fb2:	f001 fe1f 	bl	8002bf4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000fb6:	210c      	movs	r1, #12
 8000fb8:	48a3      	ldr	r0, [pc, #652]	; (8001248 <main+0x2c4>)
 8000fba:	f001 fe1b 	bl	8002bf4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	48a2      	ldr	r0, [pc, #648]	; (800124c <main+0x2c8>)
 8000fc2:	f001 fd1d 	bl	8002a00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	48a0      	ldr	r0, [pc, #640]	; (800124c <main+0x2c8>)
 8000fca:	f001 fd19 	bl	8002a00 <HAL_TIM_PWM_Start>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */ //

		if (ch3<=1500) {
 8000fce:	4ba0      	ldr	r3, [pc, #640]	; (8001250 <main+0x2cc>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f240 51dd 	movw	r1, #1501	; 0x5dd
 8000fd8:	428a      	cmp	r2, r1
 8000fda:	f173 0300 	sbcs.w	r3, r3, #0
 8000fde:	d213      	bcs.n	8001008 <main+0x84>
			maxpoint = 1900;
 8000fe0:	4b9c      	ldr	r3, [pc, #624]	; (8001254 <main+0x2d0>)
 8000fe2:	f240 726c 	movw	r2, #1900	; 0x76c
 8000fe6:	601a      	str	r2, [r3, #0]
			midpoint = 1500;
 8000fe8:	4b9b      	ldr	r3, [pc, #620]	; (8001258 <main+0x2d4>)
 8000fea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fee:	601a      	str	r2, [r3, #0]
			minpoint = 1100;
 8000ff0:	4b9a      	ldr	r3, [pc, #616]	; (800125c <main+0x2d8>)
 8000ff2:	f240 424c 	movw	r2, #1100	; 0x44c
 8000ff6:	601a      	str	r2, [r3, #0]
			deadband_scale=16;
 8000ff8:	4b99      	ldr	r3, [pc, #612]	; (8001260 <main+0x2dc>)
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	601a      	str	r2, [r3, #0]
			motor_startup_deadband = 500;
 8000ffe:	4b99      	ldr	r3, [pc, #612]	; (8001264 <main+0x2e0>)
 8001000:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e012      	b.n	800102e <main+0xaa>
		} else {
			maxpoint = 1900;
 8001008:	4b92      	ldr	r3, [pc, #584]	; (8001254 <main+0x2d0>)
 800100a:	f240 726c 	movw	r2, #1900	; 0x76c
 800100e:	601a      	str	r2, [r3, #0]
			midpoint = 1700;
 8001010:	4b91      	ldr	r3, [pc, #580]	; (8001258 <main+0x2d4>)
 8001012:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001016:	601a      	str	r2, [r3, #0]
			minpoint = 1500;
 8001018:	4b90      	ldr	r3, [pc, #576]	; (800125c <main+0x2d8>)
 800101a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800101e:	601a      	str	r2, [r3, #0]
			deadband_scale=32;
 8001020:	4b8f      	ldr	r3, [pc, #572]	; (8001260 <main+0x2dc>)
 8001022:	2220      	movs	r2, #32
 8001024:	601a      	str	r2, [r3, #0]
			motor_startup_deadband = 300;
 8001026:	4b8f      	ldr	r3, [pc, #572]	; (8001264 <main+0x2e0>)
 8001028:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800102c:	601a      	str	r2, [r3, #0]
		}

		ch1_smooth -= ch1_smooth / 20.0;
 800102e:	4b8e      	ldr	r3, [pc, #568]	; (8001268 <main+0x2e4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f9ee 	bl	8000414 <__aeabi_f2d>
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b8b      	ldr	r3, [pc, #556]	; (800126c <main+0x2e8>)
 800103e:	f7ff fb6b 	bl	8000718 <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4614      	mov	r4, r2
 8001048:	461d      	mov	r5, r3
 800104a:	4b87      	ldr	r3, [pc, #540]	; (8001268 <main+0x2e4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f9e0 	bl	8000414 <__aeabi_f2d>
 8001054:	4622      	mov	r2, r4
 8001056:	462b      	mov	r3, r5
 8001058:	f7ff f87c 	bl	8000154 <__aeabi_dsub>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fc40 	bl	80008e8 <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	4a7f      	ldr	r2, [pc, #508]	; (8001268 <main+0x2e4>)
 800106c:	6013      	str	r3, [r2, #0]
		ch1_smooth += ch1 / 20.0;
 800106e:	4b80      	ldr	r3, [pc, #512]	; (8001270 <main+0x2ec>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff f9ee 	bl	8000458 <__aeabi_ul2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b7a      	ldr	r3, [pc, #488]	; (800126c <main+0x2e8>)
 8001082:	f7ff fb49 	bl	8000718 <__aeabi_ddiv>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4614      	mov	r4, r2
 800108c:	461d      	mov	r5, r3
 800108e:	4b76      	ldr	r3, [pc, #472]	; (8001268 <main+0x2e4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f9be 	bl	8000414 <__aeabi_f2d>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4620      	mov	r0, r4
 800109e:	4629      	mov	r1, r5
 80010a0:	f7ff f85a 	bl	8000158 <__adddf3>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fc1c 	bl	80008e8 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a6d      	ldr	r2, [pc, #436]	; (8001268 <main+0x2e4>)
 80010b4:	6013      	str	r3, [r2, #0]

		ch2_smooth -= ch2_smooth / 20.0;
 80010b6:	4b6f      	ldr	r3, [pc, #444]	; (8001274 <main+0x2f0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f9aa 	bl	8000414 <__aeabi_f2d>
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b69      	ldr	r3, [pc, #420]	; (800126c <main+0x2e8>)
 80010c6:	f7ff fb27 	bl	8000718 <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4614      	mov	r4, r2
 80010d0:	461d      	mov	r5, r3
 80010d2:	4b68      	ldr	r3, [pc, #416]	; (8001274 <main+0x2f0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f99c 	bl	8000414 <__aeabi_f2d>
 80010dc:	4622      	mov	r2, r4
 80010de:	462b      	mov	r3, r5
 80010e0:	f7ff f838 	bl	8000154 <__aeabi_dsub>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fbfc 	bl	80008e8 <__aeabi_d2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a60      	ldr	r2, [pc, #384]	; (8001274 <main+0x2f0>)
 80010f4:	6013      	str	r3, [r2, #0]
		ch2_smooth += ch2 / 20.0;
 80010f6:	4b60      	ldr	r3, [pc, #384]	; (8001278 <main+0x2f4>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff f9aa 	bl	8000458 <__aeabi_ul2d>
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b58      	ldr	r3, [pc, #352]	; (800126c <main+0x2e8>)
 800110a:	f7ff fb05 	bl	8000718 <__aeabi_ddiv>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4614      	mov	r4, r2
 8001114:	461d      	mov	r5, r3
 8001116:	4b57      	ldr	r3, [pc, #348]	; (8001274 <main+0x2f0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f97a 	bl	8000414 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4620      	mov	r0, r4
 8001126:	4629      	mov	r1, r5
 8001128:	f7ff f816 	bl	8000158 <__adddf3>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fbd8 	bl	80008e8 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <main+0x2f0>)
 800113c:	6013      	str	r3, [r2, #0]

		left_output = (ch2_smooth + (ch1_smooth - 1500));
 800113e:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <main+0x2e4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	494e      	ldr	r1, [pc, #312]	; (800127c <main+0x2f8>)
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fc23 	bl	8000990 <__aeabi_fsub>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <main+0x2f0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	4610      	mov	r0, r2
 8001156:	f7ff fc1d 	bl	8000994 <__addsf3>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fd21 	bl	8000ba4 <__aeabi_f2iz>
 8001162:	4603      	mov	r3, r0
 8001164:	4a46      	ldr	r2, [pc, #280]	; (8001280 <main+0x2fc>)
 8001166:	6013      	str	r3, [r2, #0]
		if (left_output < midpoint - (deadband_scale / 4))
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <main+0x2dc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	da00      	bge.n	8001172 <main+0x1ee>
 8001170:	3303      	adds	r3, #3
 8001172:	109b      	asrs	r3, r3, #2
 8001174:	425b      	negs	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	4b37      	ldr	r3, [pc, #220]	; (8001258 <main+0x2d4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	441a      	add	r2, r3
 800117e:	4b40      	ldr	r3, [pc, #256]	; (8001280 <main+0x2fc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	dd05      	ble.n	8001192 <main+0x20e>
			HAL_GPIO_WritePin(GPIOA, left_motor_direction_Pin, SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2120      	movs	r1, #32
 800118a:	483e      	ldr	r0, [pc, #248]	; (8001284 <main+0x300>)
 800118c:	f000 ff9a 	bl	80020c4 <HAL_GPIO_WritePin>
 8001190:	e004      	b.n	800119c <main+0x218>
		else
			HAL_GPIO_WritePin(GPIOA, left_motor_direction_Pin, RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2120      	movs	r1, #32
 8001196:	483b      	ldr	r0, [pc, #236]	; (8001284 <main+0x300>)
 8001198:	f000 ff94 	bl	80020c4 <HAL_GPIO_WritePin>

		if (abs(left_output - midpoint) < deadband_scale)
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <main+0x2fc>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <main+0x2d4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011aa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <main+0x2dc>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	da03      	bge.n	80011be <main+0x23a>
			left_output = midpoint;  //orta ölübant  (abs() -> mutlak değer)
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <main+0x2d4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a31      	ldr	r2, [pc, #196]	; (8001280 <main+0x2fc>)
 80011bc:	6013      	str	r3, [r2, #0]
		if (left_output > maxpoint - deadband_scale)
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <main+0x2d0>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <main+0x2dc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <main+0x2fc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	da04      	bge.n	80011da <main+0x256>
			left_output = maxpoint;       //max 500
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <main+0x2d0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <main+0x2fc>)
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e00c      	b.n	80011f4 <main+0x270>
		else if (left_output < minpoint + deadband_scale)
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <main+0x2d8>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <main+0x2dc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	441a      	add	r2, r3
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <main+0x2fc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dd03      	ble.n	80011f4 <main+0x270>
			left_output = minpoint;  //min -500
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <main+0x2d8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a23      	ldr	r2, [pc, #140]	; (8001280 <main+0x2fc>)
 80011f2:	6013      	str	r3, [r2, #0]

		right_output = (ch2_smooth - (ch1_smooth - 1500));
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <main+0x2f0>)
 80011f6:	681c      	ldr	r4, [r3, #0]
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <main+0x2e4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	491f      	ldr	r1, [pc, #124]	; (800127c <main+0x2f8>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fbc6 	bl	8000990 <__aeabi_fsub>
 8001204:	4603      	mov	r3, r0
 8001206:	4619      	mov	r1, r3
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff fbc1 	bl	8000990 <__aeabi_fsub>
 800120e:	4603      	mov	r3, r0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fcc7 	bl	8000ba4 <__aeabi_f2iz>
 8001216:	4603      	mov	r3, r0
 8001218:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <main+0x304>)
 800121a:	6013      	str	r3, [r2, #0]
		if (right_output < midpoint - (deadband_scale / 4))
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <main+0x2dc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da00      	bge.n	8001226 <main+0x2a2>
 8001224:	3303      	adds	r3, #3
 8001226:	109b      	asrs	r3, r3, #2
 8001228:	425b      	negs	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <main+0x2d4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	441a      	add	r2, r3
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <main+0x304>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	dd28      	ble.n	800128c <main+0x308>
			HAL_GPIO_WritePin(GPIOA, right_motor_direction_Pin, SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2110      	movs	r1, #16
 800123e:	4811      	ldr	r0, [pc, #68]	; (8001284 <main+0x300>)
 8001240:	f000 ff40 	bl	80020c4 <HAL_GPIO_WritePin>
 8001244:	e027      	b.n	8001296 <main+0x312>
 8001246:	bf00      	nop
 8001248:	20000074 	.word	0x20000074
 800124c:	2000002c 	.word	0x2000002c
 8001250:	20000110 	.word	0x20000110
 8001254:	20000144 	.word	0x20000144
 8001258:	20000148 	.word	0x20000148
 800125c:	2000014c 	.word	0x2000014c
 8001260:	20000140 	.word	0x20000140
 8001264:	20000150 	.word	0x20000150
 8001268:	2000015c 	.word	0x2000015c
 800126c:	40340000 	.word	0x40340000
 8001270:	200000d0 	.word	0x200000d0
 8001274:	20000160 	.word	0x20000160
 8001278:	200000f0 	.word	0x200000f0
 800127c:	44bb8000 	.word	0x44bb8000
 8001280:	20000154 	.word	0x20000154
 8001284:	40010800 	.word	0x40010800
 8001288:	20000158 	.word	0x20000158
		else
			HAL_GPIO_WritePin(GPIOA, right_motor_direction_Pin, RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2110      	movs	r1, #16
 8001290:	485f      	ldr	r0, [pc, #380]	; (8001410 <main+0x48c>)
 8001292:	f000 ff17 	bl	80020c4 <HAL_GPIO_WritePin>

		if (abs(right_output - midpoint) < deadband_scale)
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <main+0x490>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <main+0x494>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012a4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012a8:	4b5c      	ldr	r3, [pc, #368]	; (800141c <main+0x498>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	da03      	bge.n	80012b8 <main+0x334>
			right_output = midpoint;  //orta ölübant  (abs() -> mutlak değer)
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <main+0x494>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <main+0x490>)
 80012b6:	6013      	str	r3, [r2, #0]
		if (right_output > maxpoint - deadband_scale)
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <main+0x49c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b57      	ldr	r3, [pc, #348]	; (800141c <main+0x498>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1ad2      	subs	r2, r2, r3
 80012c2:	4b54      	ldr	r3, [pc, #336]	; (8001414 <main+0x490>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	da04      	bge.n	80012d4 <main+0x350>
			right_output = maxpoint;       //max 500
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <main+0x49c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a51      	ldr	r2, [pc, #324]	; (8001414 <main+0x490>)
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00c      	b.n	80012ee <main+0x36a>
		else if (right_output < minpoint + deadband_scale)
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <main+0x4a0>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <main+0x498>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	441a      	add	r2, r3
 80012de:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <main+0x490>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dd03      	ble.n	80012ee <main+0x36a>
			right_output = minpoint;  //min -500
 80012e6:	4b4f      	ldr	r3, [pc, #316]	; (8001424 <main+0x4a0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <main+0x490>)
 80012ec:	6013      	str	r3, [r2, #0]

		if (left_output == midpoint && right_output == midpoint)
 80012ee:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <main+0x4a4>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <main+0x494>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d10b      	bne.n	8001312 <main+0x38e>
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <main+0x490>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b46      	ldr	r3, [pc, #280]	; (8001418 <main+0x494>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d105      	bne.n	8001312 <main+0x38e>
			HAL_GPIO_WritePin(GPIOA, handbrake_Pin, SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2140      	movs	r1, #64	; 0x40
 800130a:	4841      	ldr	r0, [pc, #260]	; (8001410 <main+0x48c>)
 800130c:	f000 feda 	bl	80020c4 <HAL_GPIO_WritePin>
 8001310:	e004      	b.n	800131c <main+0x398>
		else
			HAL_GPIO_WritePin(GPIOA, handbrake_Pin, RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	483e      	ldr	r0, [pc, #248]	; (8001410 <main+0x48c>)
 8001318:	f000 fed4 	bl	80020c4 <HAL_GPIO_WritePin>


		if (left_output >= midpoint)
 800131c:	4b42      	ldr	r3, [pc, #264]	; (8001428 <main+0x4a4>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <main+0x494>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	db10      	blt.n	800134a <main+0x3c6>
			left_motor_pwm = map(left_output, midpoint, maxpoint, motor_startup_deadband, 1000);
 8001328:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <main+0x4a4>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <main+0x494>)
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <main+0x49c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <main+0x4a8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800133c:	9400      	str	r4, [sp, #0]
 800133e:	f7ff fc57 	bl	8000bf0 <map>
 8001342:	4603      	mov	r3, r0
 8001344:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <main+0x4ac>)
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e015      	b.n	8001376 <main+0x3f2>
		else
			left_motor_pwm = abs(
					map(left_output, minpoint, midpoint, 0, 1000 - motor_startup_deadband) - 1000);
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <main+0x4a4>)
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <main+0x4a0>)
 8001350:	6819      	ldr	r1, [r3, #0]
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <main+0x494>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b35      	ldr	r3, [pc, #212]	; (800142c <main+0x4a8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2300      	movs	r3, #0
 8001362:	f7ff fc45 	bl	8000bf0 <map>
 8001366:	4603      	mov	r3, r0
 8001368:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
			left_motor_pwm = abs(
 800136c:	2b00      	cmp	r3, #0
 800136e:	bfb8      	it	lt
 8001370:	425b      	neglt	r3, r3
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <main+0x4ac>)
 8001374:	6013      	str	r3, [r2, #0]

		if (right_output >= midpoint)
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <main+0x490>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <main+0x494>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	db10      	blt.n	80013a4 <main+0x420>
			right_motor_pwm = map(right_output, midpoint, maxpoint, motor_startup_deadband, 1000);
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <main+0x490>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <main+0x494>)
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <main+0x49c>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <main+0x4a8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001396:	9400      	str	r4, [sp, #0]
 8001398:	f7ff fc2a 	bl	8000bf0 <map>
 800139c:	4603      	mov	r3, r0
 800139e:	4a25      	ldr	r2, [pc, #148]	; (8001434 <main+0x4b0>)
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e015      	b.n	80013d0 <main+0x44c>
		else
			right_motor_pwm = abs(
					map(right_output, minpoint, midpoint, 0, 1000 - motor_startup_deadband) - 1000);
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <main+0x490>)
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <main+0x4a0>)
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <main+0x494>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <main+0x4a8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2300      	movs	r3, #0
 80013bc:	f7ff fc18 	bl	8000bf0 <map>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
			right_motor_pwm = abs(
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bfb8      	it	lt
 80013ca:	425b      	neglt	r3, r3
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <main+0x4b0>)
 80013ce:	6013      	str	r3, [r2, #0]

		if(left_motor_pwm == motor_startup_deadband) left_motor_pwm = 0;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <main+0x4ac>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <main+0x4a8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d102      	bne.n	80013e2 <main+0x45e>
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <main+0x4ac>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
		if(right_motor_pwm == motor_startup_deadband) right_motor_pwm = 0;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <main+0x4b0>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <main+0x4a8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d102      	bne.n	80013f4 <main+0x470>
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <main+0x4b0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_motor_pwm);
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <main+0x4ac>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <main+0x4b4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, right_motor_pwm);
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <main+0x4b0>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <main+0x4b4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	639a      	str	r2, [r3, #56]	; 0x38

		HAL_Delay(20);
 8001408:	2014      	movs	r0, #20
 800140a:	f000 fba5 	bl	8001b58 <HAL_Delay>
		if (ch3<=1500) {
 800140e:	e5de      	b.n	8000fce <main+0x4a>
 8001410:	40010800 	.word	0x40010800
 8001414:	20000158 	.word	0x20000158
 8001418:	20000148 	.word	0x20000148
 800141c:	20000140 	.word	0x20000140
 8001420:	20000144 	.word	0x20000144
 8001424:	2000014c 	.word	0x2000014c
 8001428:	20000154 	.word	0x20000154
 800142c:	20000150 	.word	0x20000150
 8001430:	20000164 	.word	0x20000164
 8001434:	20000168 	.word	0x20000168
 8001438:	2000002c 	.word	0x2000002c

0800143c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b090      	sub	sp, #64	; 0x40
 8001440:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	2228      	movs	r2, #40	; 0x28
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f002 fcc8 	bl	8003de0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800145e:	2301      	movs	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001466:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001470:	2302      	movs	r3, #2
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800147a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fe35 	bl	80020f4 <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x58>
		Error_Handler();
 8001490:	f000 f996 	bl	80017c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001494:	230f      	movs	r3, #15
 8001496:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001498:	2302      	movs	r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2102      	movs	r1, #2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 f8a2 	bl	80025f8 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x82>
		Error_Handler();
 80014ba:	f000 f981 	bl	80017c0 <Error_Handler>
	}
}
 80014be:	bf00      	nop
 80014c0:	3740      	adds	r7, #64	; 0x40
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	; 0x58
 80014cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
 80014f6:	615a      	str	r2, [r3, #20]
 80014f8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2220      	movs	r2, #32
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fc6d 	bl	8003de0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001506:	4b45      	ldr	r3, [pc, #276]	; (800161c <MX_TIM1_Init+0x154>)
 8001508:	4a45      	ldr	r2, [pc, #276]	; (8001620 <MX_TIM1_Init+0x158>)
 800150a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 576 - 1;
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <MX_TIM1_Init+0x154>)
 800150e:	f240 223f 	movw	r2, #575	; 0x23f
 8001512:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b41      	ldr	r3, [pc, #260]	; (800161c <MX_TIM1_Init+0x154>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <MX_TIM1_Init+0x154>)
 800151c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001520:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <MX_TIM1_Init+0x154>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001528:	4b3c      	ldr	r3, [pc, #240]	; (800161c <MX_TIM1_Init+0x154>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <MX_TIM1_Init+0x154>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001534:	4839      	ldr	r0, [pc, #228]	; (800161c <MX_TIM1_Init+0x154>)
 8001536:	f001 f9bb 	bl	80028b0 <HAL_TIM_Base_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001540:	f000 f93e 	bl	80017c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001548:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800154a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800154e:	4619      	mov	r1, r3
 8001550:	4832      	ldr	r0, [pc, #200]	; (800161c <MX_TIM1_Init+0x154>)
 8001552:	f001 fec1 	bl	80032d8 <HAL_TIM_ConfigClockSource>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x98>
		Error_Handler();
 800155c:	f000 f930 	bl	80017c0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001560:	482e      	ldr	r0, [pc, #184]	; (800161c <MX_TIM1_Init+0x154>)
 8001562:	f001 f9f4 	bl	800294e <HAL_TIM_PWM_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0xa8>
		Error_Handler();
 800156c:	f000 f928 	bl	80017c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001578:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800157c:	4619      	mov	r1, r3
 800157e:	4827      	ldr	r0, [pc, #156]	; (800161c <MX_TIM1_Init+0x154>)
 8001580:	f002 fb48 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 800158a:	f000 f919 	bl	80017c0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158e:	2360      	movs	r3, #96	; 0x60
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	481a      	ldr	r0, [pc, #104]	; (800161c <MX_TIM1_Init+0x154>)
 80015b4:	f001 fdce 	bl	8003154 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80015be:	f000 f8ff 	bl	80017c0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	2204      	movs	r2, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	4814      	ldr	r0, [pc, #80]	; (800161c <MX_TIM1_Init+0x154>)
 80015cc:	f001 fdc2 	bl	8003154 <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 80015d6:	f000 f8f3 	bl	80017c0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM1_Init+0x154>)
 80015fe:	f002 fb67 	bl	8003cd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM1_Init+0x144>
			!= HAL_OK) {
		Error_Handler();
 8001608:	f000 f8da 	bl	80017c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM1_Init+0x154>)
 800160e:	f000 f987 	bl	8001920 <HAL_TIM_MspPostInit>

}
 8001612:	bf00      	nop
 8001614:	3758      	adds	r7, #88	; 0x58
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000002c 	.word	0x2000002c
 8001620:	40012c00 	.word	0x40012c00

08001624 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001642:	463b      	mov	r3, r7
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <MX_TIM2_Init+0x11c>)
 8001650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001654:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <MX_TIM2_Init+0x11c>)
 8001658:	2247      	movs	r2, #71	; 0x47
 800165a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <MX_TIM2_Init+0x11c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF;
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <MX_TIM2_Init+0x11c>)
 8001664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001668:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166a:	4b35      	ldr	r3, [pc, #212]	; (8001740 <MX_TIM2_Init+0x11c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <MX_TIM2_Init+0x11c>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001676:	4832      	ldr	r0, [pc, #200]	; (8001740 <MX_TIM2_Init+0x11c>)
 8001678:	f001 f91a 	bl	80028b0 <HAL_TIM_Base_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM2_Init+0x62>
		Error_Handler();
 8001682:	f000 f89d 	bl	80017c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	4619      	mov	r1, r3
 8001692:	482b      	ldr	r0, [pc, #172]	; (8001740 <MX_TIM2_Init+0x11c>)
 8001694:	f001 fe20 	bl	80032d8 <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x7e>
		Error_Handler();
 800169e:	f000 f88f 	bl	80017c0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80016a2:	4827      	ldr	r0, [pc, #156]	; (8001740 <MX_TIM2_Init+0x11c>)
 80016a4:	f001 fa4e 	bl	8002b44 <HAL_TIM_IC_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x8e>
		Error_Handler();
 80016ae:	f000 f887 	bl	80017c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4619      	mov	r1, r3
 80016c0:	481f      	ldr	r0, [pc, #124]	; (8001740 <MX_TIM2_Init+0x11c>)
 80016c2:	f002 faa7 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 80016cc:	f000 f878 	bl	80017c0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016d0:	2300      	movs	r3, #0
 80016d2:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016d4:	2301      	movs	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4816      	ldr	r0, [pc, #88]	; (8001740 <MX_TIM2_Init+0x11c>)
 80016e8:	f001 fc98 	bl	800301c <HAL_TIM_IC_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM2_Init+0xd2>
		Error_Handler();
 80016f2:	f000 f865 	bl	80017c0 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80016f6:	463b      	mov	r3, r7
 80016f8:	2204      	movs	r2, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <MX_TIM2_Init+0x11c>)
 80016fe:	f001 fc8d 	bl	800301c <HAL_TIM_IC_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0xe8>
		Error_Handler();
 8001708:	f000 f85a 	bl	80017c0 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 800170c:	463b      	mov	r3, r7
 800170e:	2208      	movs	r2, #8
 8001710:	4619      	mov	r1, r3
 8001712:	480b      	ldr	r0, [pc, #44]	; (8001740 <MX_TIM2_Init+0x11c>)
 8001714:	f001 fc82 	bl	800301c <HAL_TIM_IC_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0xfe>
		Error_Handler();
 800171e:	f000 f84f 	bl	80017c0 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8001722:	463b      	mov	r3, r7
 8001724:	220c      	movs	r2, #12
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_TIM2_Init+0x11c>)
 800172a:	f001 fc77 	bl	800301c <HAL_TIM_IC_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM2_Init+0x114>
		Error_Handler();
 8001734:	f000 f844 	bl	80017c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000074 	.word	0x20000074

08001744 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <MX_GPIO_Init+0x74>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <MX_GPIO_Init+0x74>)
 800175e:	f043 0320 	orr.w	r3, r3, #32
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_GPIO_Init+0x74>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_GPIO_Init+0x74>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <MX_GPIO_Init+0x74>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_GPIO_Init+0x74>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001788:	2200      	movs	r2, #0
 800178a:	21f0      	movs	r1, #240	; 0xf0
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <MX_GPIO_Init+0x78>)
 800178e:	f000 fc99 	bl	80020c4 <HAL_GPIO_WritePin>
			right_motor_direction_Pin | left_motor_direction_Pin | handbrake_Pin
					| shifter_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : right_motor_direction_Pin left_motor_direction_Pin handbrake_Pin shifter_Pin */
	GPIO_InitStruct.Pin = right_motor_direction_Pin | left_motor_direction_Pin
 8001792:	23f0      	movs	r3, #240	; 0xf0
 8001794:	60bb      	str	r3, [r7, #8]
			| handbrake_Pin | shifter_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2302      	movs	r3, #2
 80017a0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	4619      	mov	r1, r3
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_GPIO_Init+0x78>)
 80017aa:	f000 fb07 	bl	8001dbc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010800 	.word	0x40010800

080017c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017c8:	e7fe      	b.n	80017c8 <Error_Handler+0x8>
	...

080017cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_MspInit+0x5c>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_MspInit+0x5c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_MspInit+0x5c>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_MspInit+0x5c>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <HAL_MspInit+0x5c>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	61d3      	str	r3, [r2, #28]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_MspInit+0x5c>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_MspInit+0x60>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_MspInit+0x60>)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000
 800182c:	40010000 	.word	0x40010000

08001830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0318 	add.w	r3, r7, #24
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a32      	ldr	r2, [pc, #200]	; (8001914 <HAL_TIM_Base_MspInit+0xe4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d12c      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001850:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_TIM_Base_MspInit+0xe8>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a30      	ldr	r2, [pc, #192]	; (8001918 <HAL_TIM_Base_MspInit+0xe8>)
 8001856:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_TIM_Base_MspInit+0xe8>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	2018      	movs	r0, #24
 800186e:	f000 fa6e 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001872:	2018      	movs	r0, #24
 8001874:	f000 fa87 	bl	8001d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2019      	movs	r0, #25
 800187e:	f000 fa66 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001882:	2019      	movs	r0, #25
 8001884:	f000 fa7f 	bl	8001d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	201a      	movs	r0, #26
 800188e:	f000 fa5e 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001892:	201a      	movs	r0, #26
 8001894:	f000 fa77 	bl	8001d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	201b      	movs	r0, #27
 800189e:	f000 fa56 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018a2:	201b      	movs	r0, #27
 80018a4:	f000 fa6f 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018a8:	e030      	b.n	800190c <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b2:	d12b      	bne.n	800190c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_TIM_Base_MspInit+0xe8>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_TIM_Base_MspInit+0xe8>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	61d3      	str	r3, [r2, #28]
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_TIM_Base_MspInit+0xe8>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_TIM_Base_MspInit+0xe8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_TIM_Base_MspInit+0xe8>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_TIM_Base_MspInit+0xe8>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80018e4:	230f      	movs	r3, #15
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	4619      	mov	r1, r3
 80018f6:	4809      	ldr	r0, [pc, #36]	; (800191c <HAL_TIM_Base_MspInit+0xec>)
 80018f8:	f000 fa60 	bl	8001dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	201c      	movs	r0, #28
 8001902:	f000 fa24 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001906:	201c      	movs	r0, #28
 8001908:	f000 fa3d 	bl	8001d86 <HAL_NVIC_EnableIRQ>
}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40012c00 	.word	0x40012c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40010800 	.word	0x40010800

08001920 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_TIM_MspPostInit+0x5c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d118      	bne.n	8001972 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_TIM_MspPostInit+0x60>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_TIM_MspPostInit+0x60>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_TIM_MspPostInit+0x60>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001958:	f44f 7340 	mov.w	r3, #768	; 0x300
 800195c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2302      	movs	r3, #2
 8001964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0310 	add.w	r3, r7, #16
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_TIM_MspPostInit+0x64>)
 800196e:	f000 fa25 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40012c00 	.word	0x40012c00
 8001980:	40021000 	.word	0x40021000
 8001984:	40010800 	.word	0x40010800

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ce:	f000 f8a7 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM1_BRK_IRQHandler+0x10>)
 80019de:	f001 fa15 	bl	8002e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000002c 	.word	0x2000002c

080019ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <TIM1_UP_IRQHandler+0x10>)
 80019f2:	f001 fa0b 	bl	8002e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000002c 	.word	0x2000002c

08001a00 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001a06:	f001 fa01 	bl	8002e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000002c 	.word	0x2000002c

08001a14 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM1_CC_IRQHandler+0x10>)
 8001a1a:	f001 f9f7 	bl	8002e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000002c 	.word	0x2000002c

08001a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <TIM2_IRQHandler+0x10>)
 8001a2e:	f001 f9ed 	bl	8002e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000074 	.word	0x20000074

08001a3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a48:	f7ff fff8 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a4e:	490c      	ldr	r1, [pc, #48]	; (8001a80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a50:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a64:	4c09      	ldr	r4, [pc, #36]	; (8001a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a72:	f002 f991 	bl	8003d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a76:	f7ff fa85 	bl	8000f84 <main>
  bx lr
 8001a7a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a84:	08003e34 	.word	0x08003e34
  ldr r2, =_sbss
 8001a88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a8c:	20000170 	.word	0x20000170

08001a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC1_2_IRQHandler>
	...

08001a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_Init+0x28>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_Init+0x28>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 f947 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	200f      	movs	r0, #15
 8001aac:	f000 f808 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fe8c 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_InitTick+0x54>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x58>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f95f 	bl	8001da2 <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00e      	b.n	8001b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d80a      	bhi.n	8001b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f000 f927 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_InitTick+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_IncTick+0x1c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_IncTick+0x20>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a03      	ldr	r2, [pc, #12]	; (8001b40 <HAL_IncTick+0x20>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	2000016c 	.word	0x2000016c

08001b44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <HAL_GetTick+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	2000016c 	.word	0x2000016c

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffe0 	bl	8001b44 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <__NVIC_EnableIRQ+0x34>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff90 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff2d 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff42 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff35 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b08b      	sub	sp, #44	; 0x2c
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dce:	e169      	b.n	80020a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8158 	bne.w	800209e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a9a      	ldr	r2, [pc, #616]	; (800205c <HAL_GPIO_Init+0x2a0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d05e      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001df8:	4a98      	ldr	r2, [pc, #608]	; (800205c <HAL_GPIO_Init+0x2a0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d875      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001dfe:	4a98      	ldr	r2, [pc, #608]	; (8002060 <HAL_GPIO_Init+0x2a4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d058      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e04:	4a96      	ldr	r2, [pc, #600]	; (8002060 <HAL_GPIO_Init+0x2a4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d86f      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e0a:	4a96      	ldr	r2, [pc, #600]	; (8002064 <HAL_GPIO_Init+0x2a8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d052      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e10:	4a94      	ldr	r2, [pc, #592]	; (8002064 <HAL_GPIO_Init+0x2a8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d869      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e16:	4a94      	ldr	r2, [pc, #592]	; (8002068 <HAL_GPIO_Init+0x2ac>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04c      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e1c:	4a92      	ldr	r2, [pc, #584]	; (8002068 <HAL_GPIO_Init+0x2ac>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d863      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e22:	4a92      	ldr	r2, [pc, #584]	; (800206c <HAL_GPIO_Init+0x2b0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d046      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e28:	4a90      	ldr	r2, [pc, #576]	; (800206c <HAL_GPIO_Init+0x2b0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d85d      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e2e:	2b12      	cmp	r3, #18
 8001e30:	d82a      	bhi.n	8001e88 <HAL_GPIO_Init+0xcc>
 8001e32:	2b12      	cmp	r3, #18
 8001e34:	d859      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HAL_GPIO_Init+0x80>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001eb7 	.word	0x08001eb7
 8001e40:	08001e91 	.word	0x08001e91
 8001e44:	08001ea3 	.word	0x08001ea3
 8001e48:	08001ee5 	.word	0x08001ee5
 8001e4c:	08001eeb 	.word	0x08001eeb
 8001e50:	08001eeb 	.word	0x08001eeb
 8001e54:	08001eeb 	.word	0x08001eeb
 8001e58:	08001eeb 	.word	0x08001eeb
 8001e5c:	08001eeb 	.word	0x08001eeb
 8001e60:	08001eeb 	.word	0x08001eeb
 8001e64:	08001eeb 	.word	0x08001eeb
 8001e68:	08001eeb 	.word	0x08001eeb
 8001e6c:	08001eeb 	.word	0x08001eeb
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001eeb 	.word	0x08001eeb
 8001e78:	08001eeb 	.word	0x08001eeb
 8001e7c:	08001eeb 	.word	0x08001eeb
 8001e80:	08001e99 	.word	0x08001e99
 8001e84:	08001ead 	.word	0x08001ead
 8001e88:	4a79      	ldr	r2, [pc, #484]	; (8002070 <HAL_GPIO_Init+0x2b4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e8e:	e02c      	b.n	8001eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e029      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e024      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e01f      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e01a      	b.n	8001eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e013      	b.n	8001eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	611a      	str	r2, [r3, #16]
          break;
 8001ed6:	e009      	b.n	8001eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	615a      	str	r2, [r3, #20]
          break;
 8001ee2:	e003      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x130>
          break;
 8001eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d801      	bhi.n	8001ef6 <HAL_GPIO_Init+0x13a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	e001      	b.n	8001efa <HAL_GPIO_Init+0x13e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d802      	bhi.n	8001f08 <HAL_GPIO_Init+0x14c>
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x152>
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	3b08      	subs	r3, #8
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	210f      	movs	r1, #15
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80b1 	beq.w	800209e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f3c:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a4c      	ldr	r2, [pc, #304]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f54:	4a48      	ldr	r2, [pc, #288]	; (8002078 <HAL_GPIO_Init+0x2bc>)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_GPIO_Init+0x2c0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_GPIO_Init+0x1ec>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3f      	ldr	r2, [pc, #252]	; (8002080 <HAL_GPIO_Init+0x2c4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <HAL_GPIO_Init+0x2c8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <HAL_GPIO_Init+0x2cc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_GPIO_Init+0x1e0>
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e006      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e004      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	f002 0203 	and.w	r2, r2, #3
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fba:	492f      	ldr	r1, [pc, #188]	; (8002078 <HAL_GPIO_Init+0x2bc>)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	492c      	ldr	r1, [pc, #176]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4928      	ldr	r1, [pc, #160]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	4922      	ldr	r1, [pc, #136]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	491e      	ldr	r1, [pc, #120]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4918      	ldr	r1, [pc, #96]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	4914      	ldr	r1, [pc, #80]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d021      	beq.n	8002090 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e021      	b.n	800209e <HAL_GPIO_Init+0x2e2>
 800205a:	bf00      	nop
 800205c:	10320000 	.word	0x10320000
 8002060:	10310000 	.word	0x10310000
 8002064:	10220000 	.word	0x10220000
 8002068:	10210000 	.word	0x10210000
 800206c:	10120000 	.word	0x10120000
 8002070:	10110000 	.word	0x10110000
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	40010800 	.word	0x40010800
 8002080:	40010c00 	.word	0x40010c00
 8002084:	40011000 	.word	0x40011000
 8002088:	40011400 	.word	0x40011400
 800208c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_GPIO_Init+0x304>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	43db      	mvns	r3, r3
 8002098:	4909      	ldr	r1, [pc, #36]	; (80020c0 <HAL_GPIO_Init+0x304>)
 800209a:	4013      	ands	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	3301      	adds	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f47f ae8e 	bne.w	8001dd0 <HAL_GPIO_Init+0x14>
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	372c      	adds	r7, #44	; 0x2c
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e0:	e003      	b.n	80020ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e2:	887b      	ldrh	r3, [r7, #2]
 80020e4:	041a      	lsls	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	611a      	str	r2, [r3, #16]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e272      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8087 	beq.w	8002222 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002114:	4b92      	ldr	r3, [pc, #584]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b04      	cmp	r3, #4
 800211e:	d00c      	beq.n	800213a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002120:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d112      	bne.n	8002152 <HAL_RCC_OscConfig+0x5e>
 800212c:	4b8c      	ldr	r3, [pc, #560]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d10b      	bne.n	8002152 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213a:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d06c      	beq.n	8002220 <HAL_RCC_OscConfig+0x12c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d168      	bne.n	8002220 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e24c      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x76>
 800215c:	4b80      	ldr	r3, [pc, #512]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a7f      	ldr	r2, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e02e      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x98>
 8002172:	4b7b      	ldr	r3, [pc, #492]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a7a      	ldr	r2, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b78      	ldr	r3, [pc, #480]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a77      	ldr	r2, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0xbc>
 8002196:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a71      	ldr	r2, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 80021b0:	4b6b      	ldr	r3, [pc, #428]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a6a      	ldr	r2, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a67      	ldr	r2, [pc, #412]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fcb8 	bl	8001b44 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fcb4 	bl	8001b44 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e200      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xe4>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fca4 	bl	8001b44 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff fca0 	bl	8001b44 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1ec      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x10c>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800222e:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800223a:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d11c      	bne.n	8002280 <HAL_RCC_OscConfig+0x18c>
 8002246:	4b46      	ldr	r3, [pc, #280]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	4b43      	ldr	r3, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_RCC_OscConfig+0x176>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e1c0      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4939      	ldr	r1, [pc, #228]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	e03a      	b.n	80022f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002288:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fc59 	bl	8001b44 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7ff fc55 	bl	8001b44 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1a1      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4927      	ldr	r1, [pc, #156]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	e015      	b.n	80022f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fc38 	bl	8001b44 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7ff fc34 	bl	8001b44 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e180      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03a      	beq.n	8002378 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d019      	beq.n	800233e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7ff fc18 	bl	8001b44 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff fc14 	bl	8001b44 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e160      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_RCC_OscConfig+0x26c>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002336:	2001      	movs	r0, #1
 8002338:	f000 fa9c 	bl	8002874 <RCC_Delay>
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7ff fbfe 	bl	8001b44 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234a:	e00f      	b.n	800236c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7ff fbfa 	bl	8001b44 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d908      	bls.n	800236c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e146      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	42420000 	.word	0x42420000
 8002368:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e9      	bne.n	800234c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a6 	beq.w	80024d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a87      	ldr	r2, [pc, #540]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ae:	2301      	movs	r3, #1
 80023b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	4b82      	ldr	r3, [pc, #520]	; (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d118      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023be:	4b7f      	ldr	r3, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7e      	ldr	r2, [pc, #504]	; (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ca:	f7ff fbbb 	bl	8001b44 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d2:	f7ff fbb7 	bl	8001b44 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e103      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x312>
 80023f8:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a6e      	ldr	r2, [pc, #440]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e02d      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x334>
 800240e:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a69      	ldr	r2, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a66      	ldr	r2, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	e01c      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b05      	cmp	r3, #5
 800242e:	d10c      	bne.n	800244a <HAL_RCC_OscConfig+0x356>
 8002430:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a60      	ldr	r2, [pc, #384]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	4b5e      	ldr	r3, [pc, #376]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a5d      	ldr	r2, [pc, #372]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	e00b      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 800244a:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a5a      	ldr	r2, [pc, #360]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	4b58      	ldr	r3, [pc, #352]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d015      	beq.n	8002496 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7ff fb6b 	bl	8001b44 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7ff fb67 	bl	8001b44 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0b1      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ee      	beq.n	8002472 <HAL_RCC_OscConfig+0x37e>
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7ff fb55 	bl	8001b44 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7ff fb51 	bl	8001b44 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e09b      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8087 	beq.w	80025ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d061      	beq.n	80025ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d146      	bne.n	800257e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff fb25 	bl	8001b44 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7ff fb21 	bl	8001b44 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e06d      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002524:	d108      	bne.n	8002538 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4921      	ldr	r1, [pc, #132]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a19      	ldr	r1, [r3, #32]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	430b      	orrs	r3, r1
 800254a:	491b      	ldr	r1, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x4cc>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff faf5 	bl	8001b44 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7ff faf1 	bl	8001b44 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e03d      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x46a>
 800257c:	e035      	b.n	80025ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_RCC_OscConfig+0x4cc>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff fade 	bl	8001b44 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7ff fada 	bl	8001b44 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e026      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x498>
 80025aa:	e01e      	b.n	80025ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e019      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
 80025c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_OscConfig+0x500>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0d0      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d910      	bls.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b67      	ldr	r3, [pc, #412]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	4965      	ldr	r1, [pc, #404]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0b8      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002654:	4b59      	ldr	r3, [pc, #356]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800265e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800266c:	4b53      	ldr	r3, [pc, #332]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002676:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b50      	ldr	r3, [pc, #320]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	494d      	ldr	r1, [pc, #308]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d040      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e07f      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e073      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06b      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4936      	ldr	r1, [pc, #216]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7ff fa2c 	bl	8001b44 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7ff fa28 	bl	8001b44 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e053      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d210      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4922      	ldr	r1, [pc, #136]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e032      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4916      	ldr	r1, [pc, #88]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	490e      	ldr	r1, [pc, #56]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002786:	f000 f821 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800278a:	4602      	mov	r2, r0
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	490a      	ldr	r1, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	5ccb      	ldrb	r3, [r1, r3]
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1cc>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1d0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f98a 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	08003e08 	.word	0x08003e08
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x30>
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x36>
 80027fa:	e027      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fe:	613b      	str	r3, [r7, #16]
      break;
 8002800:	e027      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	0c9b      	lsrs	r3, r3, #18
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <HAL_RCC_GetSysClockFreq+0x9c>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d010      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCC_GetSysClockFreq+0x94>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0c5b      	lsrs	r3, r3, #17
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	4a11      	ldr	r2, [pc, #68]	; (800286c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <HAL_RCC_GetSysClockFreq+0x98>)
 800282e:	fb03 f202 	mul.w	r2, r3, r2
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e004      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	613b      	str	r3, [r7, #16]
      break;
 800284a:	e002      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetSysClockFreq+0x98>)
 800284e:	613b      	str	r3, [r7, #16]
      break;
 8002850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002852:	693b      	ldr	r3, [r7, #16]
}
 8002854:	4618      	mov	r0, r3
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	007a1200 	.word	0x007a1200
 8002868:	08003e18 	.word	0x08003e18
 800286c:	08003e28 	.word	0x08003e28
 8002870:	003d0900 	.word	0x003d0900

08002874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <RCC_Delay+0x34>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <RCC_Delay+0x38>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0a5b      	lsrs	r3, r3, #9
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002890:	bf00      	nop
  }
  while (Delay --);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	60fa      	str	r2, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f9      	bne.n	8002890 <RCC_Delay+0x1c>
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000000 	.word	0x20000000
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e041      	b.n	8002946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe ffaa 	bl	8001830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f000 fdde 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e041      	b.n	80029e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f839 	bl	80029ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f000 fd8f 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_TIM_PWM_Start+0x24>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e022      	b.n	8002a6a <HAL_TIM_PWM_Start+0x6a>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d109      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x3e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e015      	b.n	8002a6a <HAL_TIM_PWM_Start+0x6a>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d109      	bne.n	8002a58 <HAL_TIM_PWM_Start+0x58>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e008      	b.n	8002a6a <HAL_TIM_PWM_Start+0x6a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	bf14      	ite	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	2300      	moveq	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e05e      	b.n	8002b30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <HAL_TIM_PWM_Start+0x82>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a80:	e013      	b.n	8002aaa <HAL_TIM_PWM_Start+0xaa>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d104      	bne.n	8002a92 <HAL_TIM_PWM_Start+0x92>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a90:	e00b      	b.n	8002aaa <HAL_TIM_PWM_Start+0xaa>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0xa2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa0:	e003      	b.n	8002aaa <HAL_TIM_PWM_Start+0xaa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 f889 	bl	8003bca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1e      	ldr	r2, [pc, #120]	; (8002b38 <HAL_TIM_PWM_Start+0x138>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d107      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_PWM_Start+0x138>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00e      	beq.n	8002afa <HAL_TIM_PWM_Start+0xfa>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d009      	beq.n	8002afa <HAL_TIM_PWM_Start+0xfa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_TIM_PWM_Start+0x13c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d004      	beq.n	8002afa <HAL_TIM_PWM_Start+0xfa>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <HAL_TIM_PWM_Start+0x140>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d111      	bne.n	8002b1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d010      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	e007      	b.n	8002b2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40000800 	.word	0x40000800

08002b44 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e041      	b.n	8002bda <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f839 	bl	8002be2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f000 fc94 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_IC_Start_IT+0x1e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e013      	b.n	8002c3a <HAL_TIM_IC_Start_IT+0x46>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_IC_Start_IT+0x2e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	e00b      	b.n	8002c3a <HAL_TIM_IC_Start_IT+0x46>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_IC_Start_IT+0x3e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	e003      	b.n	8002c3a <HAL_TIM_IC_Start_IT+0x46>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d104      	bne.n	8002c4c <HAL_TIM_IC_Start_IT+0x58>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e013      	b.n	8002c74 <HAL_TIM_IC_Start_IT+0x80>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d104      	bne.n	8002c5c <HAL_TIM_IC_Start_IT+0x68>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e00b      	b.n	8002c74 <HAL_TIM_IC_Start_IT+0x80>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d104      	bne.n	8002c6c <HAL_TIM_IC_Start_IT+0x78>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e003      	b.n	8002c74 <HAL_TIM_IC_Start_IT+0x80>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c76:	7bbb      	ldrb	r3, [r7, #14]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d102      	bne.n	8002c82 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c7c:	7b7b      	ldrb	r3, [r7, #13]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d001      	beq.n	8002c86 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0b8      	b.n	8002df8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_IC_Start_IT+0xa2>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c94:	e013      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0xca>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d104      	bne.n	8002ca6 <HAL_TIM_IC_Start_IT+0xb2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca4:	e00b      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0xca>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d104      	bne.n	8002cb6 <HAL_TIM_IC_Start_IT+0xc2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb4:	e003      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0xca>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d104      	bne.n	8002cce <HAL_TIM_IC_Start_IT+0xda>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ccc:	e013      	b.n	8002cf6 <HAL_TIM_IC_Start_IT+0x102>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d104      	bne.n	8002cde <HAL_TIM_IC_Start_IT+0xea>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cdc:	e00b      	b.n	8002cf6 <HAL_TIM_IC_Start_IT+0x102>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d104      	bne.n	8002cee <HAL_TIM_IC_Start_IT+0xfa>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cec:	e003      	b.n	8002cf6 <HAL_TIM_IC_Start_IT+0x102>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d841      	bhi.n	8002d80 <HAL_TIM_IC_Start_IT+0x18c>
 8002cfc:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <HAL_TIM_IC_Start_IT+0x110>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d39 	.word	0x08002d39
 8002d08:	08002d81 	.word	0x08002d81
 8002d0c:	08002d81 	.word	0x08002d81
 8002d10:	08002d81 	.word	0x08002d81
 8002d14:	08002d4b 	.word	0x08002d4b
 8002d18:	08002d81 	.word	0x08002d81
 8002d1c:	08002d81 	.word	0x08002d81
 8002d20:	08002d81 	.word	0x08002d81
 8002d24:	08002d5d 	.word	0x08002d5d
 8002d28:	08002d81 	.word	0x08002d81
 8002d2c:	08002d81 	.word	0x08002d81
 8002d30:	08002d81 	.word	0x08002d81
 8002d34:	08002d6f 	.word	0x08002d6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0202 	orr.w	r2, r2, #2
 8002d46:	60da      	str	r2, [r3, #12]
      break;
 8002d48:	e01d      	b.n	8002d86 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0204 	orr.w	r2, r2, #4
 8002d58:	60da      	str	r2, [r3, #12]
      break;
 8002d5a:	e014      	b.n	8002d86 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0208 	orr.w	r2, r2, #8
 8002d6a:	60da      	str	r2, [r3, #12]
      break;
 8002d6c:	e00b      	b.n	8002d86 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0210 	orr.w	r2, r2, #16
 8002d7c:	60da      	str	r2, [r3, #12]
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d134      	bne.n	8002df6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2201      	movs	r2, #1
 8002d92:	6839      	ldr	r1, [r7, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 ff18 	bl	8003bca <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_TIM_IC_Start_IT+0x20c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00e      	beq.n	8002dc2 <HAL_TIM_IC_Start_IT+0x1ce>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d009      	beq.n	8002dc2 <HAL_TIM_IC_Start_IT+0x1ce>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_TIM_IC_Start_IT+0x210>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <HAL_TIM_IC_Start_IT+0x1ce>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <HAL_TIM_IC_Start_IT+0x214>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d111      	bne.n	8002de6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d010      	beq.n	8002df6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de4:	e007      	b.n	8002df6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800

08002e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d122      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d11b      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0202 	mvn.w	r2, #2
 8002e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fd feea 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fb0e 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fb14 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0204 	mvn.w	r2, #4
 8002e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fd fec0 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fae4 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 faea 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0208 	mvn.w	r2, #8
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fe96 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 faba 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fac0 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0210 	mvn.w	r2, #16
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd fe6c 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa90 	bl	8003478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fa96 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0201 	mvn.w	r2, #1
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa6b 	bl	8003466 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d107      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fee4 	bl	8003d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fa5a 	bl	800349c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b20      	cmp	r3, #32
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0220 	mvn.w	r2, #32
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 feaf 	bl	8003d72 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003036:	2302      	movs	r3, #2
 8003038:	e088      	b.n	800314c <HAL_TIM_IC_ConfigChannel+0x130>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f000 fc14 	bl	8003884 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 020c 	bic.w	r2, r2, #12
 800306a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6999      	ldr	r1, [r3, #24]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	619a      	str	r2, [r3, #24]
 800307e:	e060      	b.n	8003142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d11c      	bne.n	80030c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6819      	ldr	r1, [r3, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f000 fc7d 	bl	8003994 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6999      	ldr	r1, [r3, #24]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	021a      	lsls	r2, r3, #8
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	619a      	str	r2, [r3, #24]
 80030be:	e040      	b.n	8003142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d11b      	bne.n	80030fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	6819      	ldr	r1, [r3, #0]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f000 fcc8 	bl	8003a6a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 020c 	bic.w	r2, r2, #12
 80030e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69d9      	ldr	r1, [r3, #28]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	61da      	str	r2, [r3, #28]
 80030fc:	e021      	b.n	8003142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d11c      	bne.n	800313e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f000 fce4 	bl	8003ae0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003126:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69d9      	ldr	r1, [r3, #28]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	021a      	lsls	r2, r3, #8
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	61da      	str	r2, [r3, #28]
 800313c:	e001      	b.n	8003142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800316e:	2302      	movs	r3, #2
 8003170:	e0ae      	b.n	80032d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	f200 809f 	bhi.w	80032c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031bd 	.word	0x080031bd
 800318c:	080032c1 	.word	0x080032c1
 8003190:	080032c1 	.word	0x080032c1
 8003194:	080032c1 	.word	0x080032c1
 8003198:	080031fd 	.word	0x080031fd
 800319c:	080032c1 	.word	0x080032c1
 80031a0:	080032c1 	.word	0x080032c1
 80031a4:	080032c1 	.word	0x080032c1
 80031a8:	0800323f 	.word	0x0800323f
 80031ac:	080032c1 	.word	0x080032c1
 80031b0:	080032c1 	.word	0x080032c1
 80031b4:	080032c1 	.word	0x080032c1
 80031b8:	0800327f 	.word	0x0800327f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f9d6 	bl	8003574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0208 	orr.w	r2, r2, #8
 80031d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0204 	bic.w	r2, r2, #4
 80031e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6999      	ldr	r1, [r3, #24]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	619a      	str	r2, [r3, #24]
      break;
 80031fa:	e064      	b.n	80032c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fa1c 	bl	8003640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6999      	ldr	r1, [r3, #24]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	021a      	lsls	r2, r3, #8
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	619a      	str	r2, [r3, #24]
      break;
 800323c:	e043      	b.n	80032c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fa65 	bl	8003714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0208 	orr.w	r2, r2, #8
 8003258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0204 	bic.w	r2, r2, #4
 8003268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69d9      	ldr	r1, [r3, #28]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	61da      	str	r2, [r3, #28]
      break;
 800327c:	e023      	b.n	80032c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 faaf 	bl	80037e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69d9      	ldr	r1, [r3, #28]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	021a      	lsls	r2, r3, #8
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	61da      	str	r2, [r3, #28]
      break;
 80032be:	e002      	b.n	80032c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	75fb      	strb	r3, [r7, #23]
      break;
 80032c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_TIM_ConfigClockSource+0x1c>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0b4      	b.n	800345e <HAL_TIM_ConfigClockSource+0x186>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800331a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332c:	d03e      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0xd4>
 800332e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003332:	f200 8087 	bhi.w	8003444 <HAL_TIM_ConfigClockSource+0x16c>
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333a:	f000 8086 	beq.w	800344a <HAL_TIM_ConfigClockSource+0x172>
 800333e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003342:	d87f      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b70      	cmp	r3, #112	; 0x70
 8003346:	d01a      	beq.n	800337e <HAL_TIM_ConfigClockSource+0xa6>
 8003348:	2b70      	cmp	r3, #112	; 0x70
 800334a:	d87b      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x16c>
 800334c:	2b60      	cmp	r3, #96	; 0x60
 800334e:	d050      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003350:	2b60      	cmp	r3, #96	; 0x60
 8003352:	d877      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x16c>
 8003354:	2b50      	cmp	r3, #80	; 0x50
 8003356:	d03c      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003358:	2b50      	cmp	r3, #80	; 0x50
 800335a:	d873      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x16c>
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d058      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x13a>
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d86f      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x16c>
 8003364:	2b30      	cmp	r3, #48	; 0x30
 8003366:	d064      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x15a>
 8003368:	2b30      	cmp	r3, #48	; 0x30
 800336a:	d86b      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x16c>
 800336c:	2b20      	cmp	r3, #32
 800336e:	d060      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x15a>
 8003370:	2b20      	cmp	r3, #32
 8003372:	d867      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x16c>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05c      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x15a>
 8003378:	2b10      	cmp	r3, #16
 800337a:	d05a      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x15a>
 800337c:	e062      	b.n	8003444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6899      	ldr	r1, [r3, #8]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f000 fbfd 	bl	8003b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	609a      	str	r2, [r3, #8]
      break;
 80033aa:	e04f      	b.n	800344c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f000 fbe6 	bl	8003b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ce:	609a      	str	r2, [r3, #8]
      break;
 80033d0:	e03c      	b.n	800344c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	461a      	mov	r2, r3
 80033e0:	f000 faaa 	bl	8003938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2150      	movs	r1, #80	; 0x50
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fbb4 	bl	8003b58 <TIM_ITRx_SetConfig>
      break;
 80033f0:	e02c      	b.n	800344c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	461a      	mov	r2, r3
 8003400:	f000 fb04 	bl	8003a0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2160      	movs	r1, #96	; 0x60
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fba4 	bl	8003b58 <TIM_ITRx_SetConfig>
      break;
 8003410:	e01c      	b.n	800344c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	461a      	mov	r2, r3
 8003420:	f000 fa8a 	bl	8003938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2140      	movs	r1, #64	; 0x40
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fb94 	bl	8003b58 <TIM_ITRx_SetConfig>
      break;
 8003430:	e00c      	b.n	800344c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f000 fb8b 	bl	8003b58 <TIM_ITRx_SetConfig>
      break;
 8003442:	e003      	b.n	800344c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      break;
 8003448:	e000      	b.n	800344c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800344a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
	...

080034b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a29      	ldr	r2, [pc, #164]	; (8003568 <TIM_Base_SetConfig+0xb8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <TIM_Base_SetConfig+0x30>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0x30>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a26      	ldr	r2, [pc, #152]	; (800356c <TIM_Base_SetConfig+0xbc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0x30>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a25      	ldr	r2, [pc, #148]	; (8003570 <TIM_Base_SetConfig+0xc0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d108      	bne.n	80034f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <TIM_Base_SetConfig+0xb8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00b      	beq.n	8003512 <TIM_Base_SetConfig+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003500:	d007      	beq.n	8003512 <TIM_Base_SetConfig+0x62>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a19      	ldr	r2, [pc, #100]	; (800356c <TIM_Base_SetConfig+0xbc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_Base_SetConfig+0x62>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a18      	ldr	r2, [pc, #96]	; (8003570 <TIM_Base_SetConfig+0xc0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d108      	bne.n	8003524 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a07      	ldr	r2, [pc, #28]	; (8003568 <TIM_Base_SetConfig+0xb8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	615a      	str	r2, [r3, #20]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800

08003574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f023 0201 	bic.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f023 0302 	bic.w	r3, r3, #2
 80035bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a1c      	ldr	r2, [pc, #112]	; (800363c <TIM_OC1_SetConfig+0xc8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10c      	bne.n	80035ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0308 	bic.w	r3, r3, #8
 80035d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a13      	ldr	r2, [pc, #76]	; (800363c <TIM_OC1_SetConfig+0xc8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d111      	bne.n	8003616 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	621a      	str	r2, [r3, #32]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40012c00 	.word	0x40012c00

08003640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f023 0210 	bic.w	r2, r3, #16
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0320 	bic.w	r3, r3, #32
 800368a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <TIM_OC2_SetConfig+0xd0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10d      	bne.n	80036bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a14      	ldr	r2, [pc, #80]	; (8003710 <TIM_OC2_SetConfig+0xd0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d113      	bne.n	80036ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00

08003714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0303 	bic.w	r3, r3, #3
 800374a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800375c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <TIM_OC3_SetConfig+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d10d      	bne.n	800378e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800378c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <TIM_OC3_SetConfig+0xd0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800379c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	621a      	str	r2, [r3, #32]
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00

080037e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	031b      	lsls	r3, r3, #12
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <TIM_OC4_SetConfig+0x98>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d109      	bne.n	800385c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800384e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	019b      	lsls	r3, r3, #6
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00

08003884 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 0201 	bic.w	r2, r3, #1
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a1f      	ldr	r2, [pc, #124]	; (800392c <TIM_TI1_SetConfig+0xa8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_TI1_SetConfig+0x46>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b8:	d007      	beq.n	80038ca <TIM_TI1_SetConfig+0x46>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <TIM_TI1_SetConfig+0xac>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_TI1_SetConfig+0x46>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <TIM_TI1_SetConfig+0xb0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <TIM_TI1_SetConfig+0x4a>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <TIM_TI1_SetConfig+0x4c>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e003      	b.n	80038ee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f023 030a 	bic.w	r3, r3, #10
 8003908:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f003 030a 	and.w	r3, r3, #10
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800

08003938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0201 	bic.w	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f023 030a 	bic.w	r3, r3, #10
 8003974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f023 0210 	bic.w	r2, r3, #16
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	031b      	lsls	r3, r3, #12
 80039d8:	b29b      	uxth	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0210 	bic.w	r2, r3, #16
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	031b      	lsls	r3, r3, #12
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b087      	sub	sp, #28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f023 0303 	bic.w	r3, r3, #3
 8003a96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b1e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	031b      	lsls	r3, r3, #12
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b32:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	031b      	lsls	r3, r3, #12
 8003b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f043 0307 	orr.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	609a      	str	r2, [r3, #8]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b087      	sub	sp, #28
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2201      	movs	r2, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	401a      	ands	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1a      	ldr	r2, [r3, #32]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e046      	b.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d009      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800

08003cd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e03d      	b.n	8003d68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
	...

08003d98 <__libc_init_array>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	2600      	movs	r6, #0
 8003d9c:	4d0c      	ldr	r5, [pc, #48]	; (8003dd0 <__libc_init_array+0x38>)
 8003d9e:	4c0d      	ldr	r4, [pc, #52]	; (8003dd4 <__libc_init_array+0x3c>)
 8003da0:	1b64      	subs	r4, r4, r5
 8003da2:	10a4      	asrs	r4, r4, #2
 8003da4:	42a6      	cmp	r6, r4
 8003da6:	d109      	bne.n	8003dbc <__libc_init_array+0x24>
 8003da8:	f000 f822 	bl	8003df0 <_init>
 8003dac:	2600      	movs	r6, #0
 8003dae:	4d0a      	ldr	r5, [pc, #40]	; (8003dd8 <__libc_init_array+0x40>)
 8003db0:	4c0a      	ldr	r4, [pc, #40]	; (8003ddc <__libc_init_array+0x44>)
 8003db2:	1b64      	subs	r4, r4, r5
 8003db4:	10a4      	asrs	r4, r4, #2
 8003db6:	42a6      	cmp	r6, r4
 8003db8:	d105      	bne.n	8003dc6 <__libc_init_array+0x2e>
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc0:	4798      	blx	r3
 8003dc2:	3601      	adds	r6, #1
 8003dc4:	e7ee      	b.n	8003da4 <__libc_init_array+0xc>
 8003dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dca:	4798      	blx	r3
 8003dcc:	3601      	adds	r6, #1
 8003dce:	e7f2      	b.n	8003db6 <__libc_init_array+0x1e>
 8003dd0:	08003e2c 	.word	0x08003e2c
 8003dd4:	08003e2c 	.word	0x08003e2c
 8003dd8:	08003e2c 	.word	0x08003e2c
 8003ddc:	08003e30 	.word	0x08003e30

08003de0 <memset>:
 8003de0:	4603      	mov	r3, r0
 8003de2:	4402      	add	r2, r0
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d100      	bne.n	8003dea <memset+0xa>
 8003de8:	4770      	bx	lr
 8003dea:	f803 1b01 	strb.w	r1, [r3], #1
 8003dee:	e7f9      	b.n	8003de4 <memset+0x4>

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
