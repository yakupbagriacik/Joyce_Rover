
Joyce_Rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b80  08005b80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b80  08005b80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000010  08005b94  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08005b94  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c50c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae6  00000000  00000000  0002c541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0002e028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  0002ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176a6  00000000  00000000  0002f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfff  00000000  00000000  00046fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a43b  00000000  00000000  00054fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df3f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003910  00000000  00000000  000df448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b3c 	.word	0x08005b3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08005b3c 	.word	0x08005b3c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_d2f>:
 8000938:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800093c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000940:	bf24      	itt	cs
 8000942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094a:	d90d      	bls.n	8000968 <__aeabi_d2f+0x30>
 800094c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800095c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800096c:	d121      	bne.n	80009b2 <__aeabi_d2f+0x7a>
 800096e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000972:	bfbc      	itt	lt
 8000974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000978:	4770      	bxlt	lr
 800097a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000982:	f1c2 0218 	rsb	r2, r2, #24
 8000986:	f1c2 0c20 	rsb	ip, r2, #32
 800098a:	fa10 f30c 	lsls.w	r3, r0, ip
 800098e:	fa20 f002 	lsr.w	r0, r0, r2
 8000992:	bf18      	it	ne
 8000994:	f040 0001 	orrne.w	r0, r0, #1
 8000998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a4:	ea40 000c 	orr.w	r0, r0, ip
 80009a8:	fa23 f302 	lsr.w	r3, r3, r2
 80009ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b0:	e7cc      	b.n	800094c <__aeabi_d2f+0x14>
 80009b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b6:	d107      	bne.n	80009c8 <__aeabi_d2f+0x90>
 80009b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009bc:	bf1e      	ittt	ne
 80009be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009c6:	4770      	bxne	lr
 80009c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_frsub>:
 80009d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009dc:	e002      	b.n	80009e4 <__addsf3>
 80009de:	bf00      	nop

080009e0 <__aeabi_fsub>:
 80009e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e4 <__addsf3>:
 80009e4:	0042      	lsls	r2, r0, #1
 80009e6:	bf1f      	itttt	ne
 80009e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ec:	ea92 0f03 	teqne	r2, r3
 80009f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f8:	d06a      	beq.n	8000ad0 <__addsf3+0xec>
 80009fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a02:	bfc1      	itttt	gt
 8000a04:	18d2      	addgt	r2, r2, r3
 8000a06:	4041      	eorgt	r1, r0
 8000a08:	4048      	eorgt	r0, r1
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	bfb8      	it	lt
 8000a0e:	425b      	neglt	r3, r3
 8000a10:	2b19      	cmp	r3, #25
 8000a12:	bf88      	it	hi
 8000a14:	4770      	bxhi	lr
 8000a16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a22:	bf18      	it	ne
 8000a24:	4240      	negne	r0, r0
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a32:	bf18      	it	ne
 8000a34:	4249      	negne	r1, r1
 8000a36:	ea92 0f03 	teq	r2, r3
 8000a3a:	d03f      	beq.n	8000abc <__addsf3+0xd8>
 8000a3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a40:	fa41 fc03 	asr.w	ip, r1, r3
 8000a44:	eb10 000c 	adds.w	r0, r0, ip
 8000a48:	f1c3 0320 	rsb	r3, r3, #32
 8000a4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a54:	d502      	bpl.n	8000a5c <__addsf3+0x78>
 8000a56:	4249      	negs	r1, r1
 8000a58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a60:	d313      	bcc.n	8000a8a <__addsf3+0xa6>
 8000a62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a66:	d306      	bcc.n	8000a76 <__addsf3+0x92>
 8000a68:	0840      	lsrs	r0, r0, #1
 8000a6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a6e:	f102 0201 	add.w	r2, r2, #1
 8000a72:	2afe      	cmp	r2, #254	; 0xfe
 8000a74:	d251      	bcs.n	8000b1a <__addsf3+0x136>
 8000a76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7e:	bf08      	it	eq
 8000a80:	f020 0001 	biceq.w	r0, r0, #1
 8000a84:	ea40 0003 	orr.w	r0, r0, r3
 8000a88:	4770      	bx	lr
 8000a8a:	0049      	lsls	r1, r1, #1
 8000a8c:	eb40 0000 	adc.w	r0, r0, r0
 8000a90:	3a01      	subs	r2, #1
 8000a92:	bf28      	it	cs
 8000a94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a98:	d2ed      	bcs.n	8000a76 <__addsf3+0x92>
 8000a9a:	fab0 fc80 	clz	ip, r0
 8000a9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa2:	ebb2 020c 	subs.w	r2, r2, ip
 8000aa6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aaa:	bfaa      	itet	ge
 8000aac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab0:	4252      	neglt	r2, r2
 8000ab2:	4318      	orrge	r0, r3
 8000ab4:	bfbc      	itt	lt
 8000ab6:	40d0      	lsrlt	r0, r2
 8000ab8:	4318      	orrlt	r0, r3
 8000aba:	4770      	bx	lr
 8000abc:	f092 0f00 	teq	r2, #0
 8000ac0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac4:	bf06      	itte	eq
 8000ac6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aca:	3201      	addeq	r2, #1
 8000acc:	3b01      	subne	r3, #1
 8000ace:	e7b5      	b.n	8000a3c <__addsf3+0x58>
 8000ad0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad8:	bf18      	it	ne
 8000ada:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ade:	d021      	beq.n	8000b24 <__addsf3+0x140>
 8000ae0:	ea92 0f03 	teq	r2, r3
 8000ae4:	d004      	beq.n	8000af0 <__addsf3+0x10c>
 8000ae6:	f092 0f00 	teq	r2, #0
 8000aea:	bf08      	it	eq
 8000aec:	4608      	moveq	r0, r1
 8000aee:	4770      	bx	lr
 8000af0:	ea90 0f01 	teq	r0, r1
 8000af4:	bf1c      	itt	ne
 8000af6:	2000      	movne	r0, #0
 8000af8:	4770      	bxne	lr
 8000afa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000afe:	d104      	bne.n	8000b0a <__addsf3+0x126>
 8000b00:	0040      	lsls	r0, r0, #1
 8000b02:	bf28      	it	cs
 8000b04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b08:	4770      	bx	lr
 8000b0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b0e:	bf3c      	itt	cc
 8000b10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bxcc	lr
 8000b16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	4770      	bx	lr
 8000b24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b28:	bf16      	itet	ne
 8000b2a:	4608      	movne	r0, r1
 8000b2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b30:	4601      	movne	r1, r0
 8000b32:	0242      	lsls	r2, r0, #9
 8000b34:	bf06      	itte	eq
 8000b36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3a:	ea90 0f01 	teqeq	r0, r1
 8000b3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_ui2f>:
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e004      	b.n	8000b54 <__aeabi_i2f+0x8>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_i2f>:
 8000b4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b50:	bf48      	it	mi
 8000b52:	4240      	negmi	r0, r0
 8000b54:	ea5f 0c00 	movs.w	ip, r0
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b60:	4601      	mov	r1, r0
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	e01c      	b.n	8000ba2 <__aeabi_l2f+0x2a>

08000b68 <__aeabi_ul2f>:
 8000b68:	ea50 0201 	orrs.w	r2, r0, r1
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e00a      	b.n	8000b8c <__aeabi_l2f+0x14>
 8000b76:	bf00      	nop

08000b78 <__aeabi_l2f>:
 8000b78:	ea50 0201 	orrs.w	r2, r0, r1
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__aeabi_l2f+0x14>
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	ea5f 0c01 	movs.w	ip, r1
 8000b90:	bf02      	ittt	eq
 8000b92:	4684      	moveq	ip, r0
 8000b94:	4601      	moveq	r1, r0
 8000b96:	2000      	moveq	r0, #0
 8000b98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ba6:	fabc f28c 	clz	r2, ip
 8000baa:	3a08      	subs	r2, #8
 8000bac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb0:	db10      	blt.n	8000bd4 <__aeabi_l2f+0x5c>
 8000bb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bbc:	f1c2 0220 	rsb	r2, r2, #32
 8000bc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc8:	eb43 0002 	adc.w	r0, r3, r2
 8000bcc:	bf08      	it	eq
 8000bce:	f020 0001 	biceq.w	r0, r0, #1
 8000bd2:	4770      	bx	lr
 8000bd4:	f102 0220 	add.w	r2, r2, #32
 8000bd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bdc:	f1c2 0220 	rsb	r2, r2, #32
 8000be0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be4:	fa21 f202 	lsr.w	r2, r1, r2
 8000be8:	eb43 0002 	adc.w	r0, r3, r2
 8000bec:	bf08      	it	eq
 8000bee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_fmul>:
 8000bf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c02:	ea92 0f0c 	teqne	r2, ip
 8000c06:	ea93 0f0c 	teqne	r3, ip
 8000c0a:	d06f      	beq.n	8000cec <__aeabi_fmul+0xf8>
 8000c0c:	441a      	add	r2, r3
 8000c0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c12:	0240      	lsls	r0, r0, #9
 8000c14:	bf18      	it	ne
 8000c16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1a:	d01e      	beq.n	8000c5a <__aeabi_fmul+0x66>
 8000c1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c28:	fba0 3101 	umull	r3, r1, r0, r1
 8000c2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c34:	bf3e      	ittt	cc
 8000c36:	0049      	lslcc	r1, r1, #1
 8000c38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c3c:	005b      	lslcc	r3, r3, #1
 8000c3e:	ea40 0001 	orr.w	r0, r0, r1
 8000c42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c46:	2afd      	cmp	r2, #253	; 0xfd
 8000c48:	d81d      	bhi.n	8000c86 <__aeabi_fmul+0x92>
 8000c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	4770      	bx	lr
 8000c5a:	f090 0f00 	teq	r0, #0
 8000c5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c62:	bf08      	it	eq
 8000c64:	0249      	lsleq	r1, r1, #9
 8000c66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c6e:	3a7f      	subs	r2, #127	; 0x7f
 8000c70:	bfc2      	ittt	gt
 8000c72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7a:	4770      	bxgt	lr
 8000c7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	dc5d      	bgt.n	8000d44 <__aeabi_fmul+0x150>
 8000c88:	f112 0f19 	cmn.w	r2, #25
 8000c8c:	bfdc      	itt	le
 8000c8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c92:	4770      	bxle	lr
 8000c94:	f1c2 0200 	rsb	r2, r2, #0
 8000c98:	0041      	lsls	r1, r0, #1
 8000c9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c9e:	f1c2 0220 	rsb	r2, r2, #32
 8000ca2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000caa:	f140 0000 	adc.w	r0, r0, #0
 8000cae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb2:	bf08      	it	eq
 8000cb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb8:	4770      	bx	lr
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0040      	lsleq	r0, r0, #1
 8000cc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cca:	3a01      	subeq	r2, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fmul+0xce>
 8000cce:	ea40 000c 	orr.w	r0, r0, ip
 8000cd2:	f093 0f00 	teq	r3, #0
 8000cd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	bf02      	ittt	eq
 8000cdc:	0049      	lsleq	r1, r1, #1
 8000cde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce2:	3b01      	subeq	r3, #1
 8000ce4:	d0f9      	beq.n	8000cda <__aeabi_fmul+0xe6>
 8000ce6:	ea41 010c 	orr.w	r1, r1, ip
 8000cea:	e78f      	b.n	8000c0c <__aeabi_fmul+0x18>
 8000cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	bf18      	it	ne
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d00a      	beq.n	8000d12 <__aeabi_fmul+0x11e>
 8000cfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d00:	bf18      	it	ne
 8000d02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d06:	d1d8      	bne.n	8000cba <__aeabi_fmul+0xc6>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f090 0f00 	teq	r0, #0
 8000d16:	bf17      	itett	ne
 8000d18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	f091 0f00 	teqne	r1, #0
 8000d22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d26:	d014      	beq.n	8000d52 <__aeabi_fmul+0x15e>
 8000d28:	ea92 0f0c 	teq	r2, ip
 8000d2c:	d101      	bne.n	8000d32 <__aeabi_fmul+0x13e>
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	d10f      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d32:	ea93 0f0c 	teq	r3, ip
 8000d36:	d103      	bne.n	8000d40 <__aeabi_fmul+0x14c>
 8000d38:	024b      	lsls	r3, r1, #9
 8000d3a:	bf18      	it	ne
 8000d3c:	4608      	movne	r0, r1
 8000d3e:	d108      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d40:	ea80 0001 	eor.w	r0, r0, r1
 8000d44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d50:	4770      	bx	lr
 8000d52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_fdiv>:
 8000d5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d64:	bf1e      	ittt	ne
 8000d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6a:	ea92 0f0c 	teqne	r2, ip
 8000d6e:	ea93 0f0c 	teqne	r3, ip
 8000d72:	d069      	beq.n	8000e48 <__aeabi_fdiv+0xec>
 8000d74:	eba2 0203 	sub.w	r2, r2, r3
 8000d78:	ea80 0c01 	eor.w	ip, r0, r1
 8000d7c:	0249      	lsls	r1, r1, #9
 8000d7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d82:	d037      	beq.n	8000df4 <__aeabi_fdiv+0x98>
 8000d84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	428b      	cmp	r3, r1
 8000d96:	bf38      	it	cc
 8000d98:	005b      	lslcc	r3, r3, #1
 8000d9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da2:	428b      	cmp	r3, r1
 8000da4:	bf24      	itt	cs
 8000da6:	1a5b      	subcs	r3, r3, r1
 8000da8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db0:	bf24      	itt	cs
 8000db2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000db6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dbe:	bf24      	itt	cs
 8000dc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dcc:	bf24      	itt	cs
 8000dce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dde:	d1e0      	bne.n	8000da2 <__aeabi_fdiv+0x46>
 8000de0:	2afd      	cmp	r2, #253	; 0xfd
 8000de2:	f63f af50 	bhi.w	8000c86 <__aeabi_fmul+0x92>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfc:	327f      	adds	r2, #127	; 0x7f
 8000dfe:	bfc2      	ittt	gt
 8000e00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e08:	4770      	bxgt	lr
 8000e0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	3a01      	subs	r2, #1
 8000e14:	e737      	b.n	8000c86 <__aeabi_fmul+0x92>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0040      	lsleq	r0, r0, #1
 8000e22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e26:	3a01      	subeq	r2, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fdiv+0xc2>
 8000e2a:	ea40 000c 	orr.w	r0, r0, ip
 8000e2e:	f093 0f00 	teq	r3, #0
 8000e32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0049      	lsleq	r1, r1, #1
 8000e3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3e:	3b01      	subeq	r3, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fdiv+0xda>
 8000e42:	ea41 010c 	orr.w	r1, r1, ip
 8000e46:	e795      	b.n	8000d74 <__aeabi_fdiv+0x18>
 8000e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d108      	bne.n	8000e64 <__aeabi_fdiv+0x108>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	f47f af7d 	bne.w	8000d52 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	f47f af70 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e776      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e64:	ea93 0f0c 	teq	r3, ip
 8000e68:	d104      	bne.n	8000e74 <__aeabi_fdiv+0x118>
 8000e6a:	024b      	lsls	r3, r1, #9
 8000e6c:	f43f af4c 	beq.w	8000d08 <__aeabi_fmul+0x114>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e76e      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1ca      	bne.n	8000e16 <__aeabi_fdiv+0xba>
 8000e80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e84:	f47f af5c 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e8c:	f47f af3c 	bne.w	8000d08 <__aeabi_fmul+0x114>
 8000e90:	e75f      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e92:	bf00      	nop

08000e94 <__gesf2>:
 8000e94:	f04f 3cff 	mov.w	ip, #4294967295
 8000e98:	e006      	b.n	8000ea8 <__cmpsf2+0x4>
 8000e9a:	bf00      	nop

08000e9c <__lesf2>:
 8000e9c:	f04f 0c01 	mov.w	ip, #1
 8000ea0:	e002      	b.n	8000ea8 <__cmpsf2+0x4>
 8000ea2:	bf00      	nop

08000ea4 <__cmpsf2>:
 8000ea4:	f04f 0c01 	mov.w	ip, #1
 8000ea8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb8:	bf18      	it	ne
 8000eba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ebe:	d011      	beq.n	8000ee4 <__cmpsf2+0x40>
 8000ec0:	b001      	add	sp, #4
 8000ec2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ec6:	bf18      	it	ne
 8000ec8:	ea90 0f01 	teqne	r0, r1
 8000ecc:	bf58      	it	pl
 8000ece:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed2:	bf88      	it	hi
 8000ed4:	17c8      	asrhi	r0, r1, #31
 8000ed6:	bf38      	it	cc
 8000ed8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000edc:	bf18      	it	ne
 8000ede:	f040 0001 	orrne.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee8:	d102      	bne.n	8000ef0 <__cmpsf2+0x4c>
 8000eea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eee:	d105      	bne.n	8000efc <__cmpsf2+0x58>
 8000ef0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef4:	d1e4      	bne.n	8000ec0 <__cmpsf2+0x1c>
 8000ef6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efa:	d0e1      	beq.n	8000ec0 <__cmpsf2+0x1c>
 8000efc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__aeabi_cfrcmple>:
 8000f04:	4684      	mov	ip, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4661      	mov	r1, ip
 8000f0a:	e7ff      	b.n	8000f0c <__aeabi_cfcmpeq>

08000f0c <__aeabi_cfcmpeq>:
 8000f0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f0e:	f7ff ffc9 	bl	8000ea4 <__cmpsf2>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	bf48      	it	mi
 8000f16:	f110 0f00 	cmnmi.w	r0, #0
 8000f1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f1c <__aeabi_fcmpeq>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff fff4 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f24:	bf0c      	ite	eq
 8000f26:	2001      	moveq	r0, #1
 8000f28:	2000      	movne	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmplt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffea 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmple>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffe0 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f4c:	bf94      	ite	ls
 8000f4e:	2001      	movls	r0, #1
 8000f50:	2000      	movhi	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmpge>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffd2 	bl	8000f04 <__aeabi_cfrcmple>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpgt>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffc8 	bl	8000f04 <__aeabi_cfrcmple>
 8000f74:	bf34      	ite	cc
 8000f76:	2001      	movcc	r0, #1
 8000f78:	2000      	movcs	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_f2uiz>:
 8000f80:	0042      	lsls	r2, r0, #1
 8000f82:	d20e      	bcs.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f88:	d30b      	bcc.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f92:	d409      	bmi.n	8000fa8 <__aeabi_f2uiz+0x28>
 8000f94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2uiz+0x32>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d102      	bne.n	8000fb8 <__aeabi_f2uiz+0x38>
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	6839      	ldr	r1, [r7, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f822 	bl	800102c <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	461c      	mov	r4, r3
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}

08000ffe <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	b299      	uxth	r1, r3
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2202      	movs	r2, #2
 8001014:	f002 fa42 	bl	800349c <HAL_I2C_IsDeviceReady>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf0c      	ite	eq
 800101e:	2301      	moveq	r3, #1
 8001020:	2300      	movne	r3, #0
 8001022:	b2db      	uxtb	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001036:	f04f 0100 	mov.w	r1, #0
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f7ff ff6e 	bl	8000f1c <__aeabi_fcmpeq>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <MCP4725_setReferenceVoltage+0x22>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <MCP4725_setReferenceVoltage+0x50>)
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	e002      	b.n	8001054 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 408b 	mov.w	r0, #1166016512	; 0x45800000
 800105e:	f7ff fe7d 	bl	8000d5c <__aeabi_fdiv>
 8001062:	4603      	mov	r3, r0
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff8b 	bl	8000f80 <__aeabi_f2uiz>
 800106a:	4603      	mov	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	819a      	strh	r2, [r3, #12]
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40533333 	.word	0x40533333

08001080 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	807b      	strh	r3, [r7, #2]
 8001092:	460b      	mov	r3, r1
 8001094:	707b      	strb	r3, [r7, #1]
 8001096:	4613      	mov	r3, r2
 8001098:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 800109a:	783b      	ldrb	r3, [r7, #0]
 800109c:	787a      	ldrb	r2, [r7, #1]
 800109e:	8879      	ldrh	r1, [r7, #2]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f822 	bl	80010ea <MCP4725_writeComand>
 80010a6:	4603      	mov	r3, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 80010b8:	2101      	movs	r1, #1
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f895 	bl	80011ea <MCP4725_readRegister>
 80010c0:	4603      	mov	r3, r0
 80010c2:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d008      	beq.n	80010e0 <MCP4725_getEepromBusyFlag+0x30>
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	e000      	b.n	80010e2 <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af02      	add	r7, sp, #8
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	4608      	mov	r0, r1
 80010f4:	4611      	mov	r1, r2
 80010f6:	461a      	mov	r2, r3
 80010f8:	4603      	mov	r3, r0
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	460b      	mov	r3, r1
 80010fe:	707b      	strb	r3, [r7, #1]
 8001100:	4613      	mov	r3, r2
 8001102:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b60      	cmp	r3, #96	; 0x60
 8001108:	d028      	beq.n	800115c <MCP4725_writeComand+0x72>
 800110a:	2b60      	cmp	r3, #96	; 0x60
 800110c:	dc4a      	bgt.n	80011a4 <MCP4725_writeComand+0xba>
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <MCP4725_writeComand+0x2e>
 8001112:	2b40      	cmp	r3, #64	; 0x40
 8001114:	d022      	beq.n	800115c <MCP4725_writeComand+0x72>
 8001116:	e045      	b.n	80011a4 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8001118:	783b      	ldrb	r3, [r7, #0]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	b25a      	sxtb	r2, r3
 800111e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001122:	4313      	orrs	r3, r2
 8001124:	b25a      	sxtb	r2, r3
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	b25b      	sxtb	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b25b      	sxtb	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	b299      	uxth	r1, r3
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2302      	movs	r3, #2
 8001152:	f001 fe39 	bl	8002dc8 <HAL_I2C_Master_Transmit>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]
		
      break;
 800115a:	e023      	b.n	80011a4 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 8001162:	783b      	ldrb	r3, [r7, #0]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b25a      	sxtb	r2, r3
 8001168:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800116c:	4313      	orrs	r3, r2
 800116e:	b25b      	sxtb	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b29b      	uxth	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	b299      	uxth	r1, r3
 800118e:	f107 020c 	add.w	r2, r7, #12
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2303      	movs	r3, #3
 800119a:	f001 fe15 	bl	8002dc8 <HAL_I2C_Master_Transmit>
 800119e:	4603      	mov	r3, r0
 80011a0:	73fb      	strb	r3, [r7, #15]
		
			break;
 80011a2:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MCP4725_writeComand+0xc4>
 80011aa:	2300      	movs	r3, #0
 80011ac:	e019      	b.n	80011e2 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 80011ae:	787b      	ldrb	r3, [r7, #1]
 80011b0:	2b60      	cmp	r3, #96	; 0x60
 80011b2:	d115      	bne.n	80011e0 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff7b 	bl	80010b0 <MCP4725_getEepromBusyFlag>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <MCP4725_writeComand+0xda>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00e      	b.n	80011e2 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80011c4:	2019      	movs	r0, #25
 80011c6:	f001 f9d3 	bl	8002570 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff70 	bl	80010b0 <MCP4725_getEepromBusyFlag>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <MCP4725_writeComand+0xf0>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e003      	b.n	80011e2 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 80011da:	2019      	movs	r0, #25
 80011dc:	f001 f9c8 	bl	8002570 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 80011ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
 80011f8:	466b      	mov	r3, sp
 80011fa:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001200:	2300      	movs	r3, #0
 8001202:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001204:	78f9      	ldrb	r1, [r7, #3]
 8001206:	460b      	mov	r3, r1
 8001208:	3b01      	subs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	b2cb      	uxtb	r3, r1
 800120e:	2200      	movs	r2, #0
 8001210:	4698      	mov	r8, r3
 8001212:	4691      	mov	r9, r2
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001228:	b2cb      	uxtb	r3, r1
 800122a:	2200      	movs	r2, #0
 800122c:	461c      	mov	r4, r3
 800122e:	4615      	mov	r5, r2
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	00eb      	lsls	r3, r5, #3
 800123a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800123e:	00e2      	lsls	r2, r4, #3
 8001240:	460b      	mov	r3, r1
 8001242:	3307      	adds	r3, #7
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	ebad 0d03 	sub.w	sp, sp, r3
 800124c:	ab02      	add	r3, sp, #8
 800124e:	3300      	adds	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	b299      	uxth	r1, r3
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001264:	9200      	str	r2, [sp, #0]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	f001 feac 	bl	8002fc4 <HAL_I2C_Master_Receive>
 800126c:	4603      	mov	r3, r0
 800126e:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <MCP4725_readRegister+0x92>
 8001276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127a:	e01f      	b.n	80012bc <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2b05      	cmp	r3, #5
 8001280:	d00a      	beq.n	8001298 <MCP4725_readRegister+0xae>
 8001282:	2b05      	cmp	r3, #5
 8001284:	dc19      	bgt.n	80012ba <MCP4725_readRegister+0xd0>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d002      	beq.n	8001290 <MCP4725_readRegister+0xa6>
 800128a:	2b03      	cmp	r3, #3
 800128c:	d004      	beq.n	8001298 <MCP4725_readRegister+0xae>
 800128e:	e014      	b.n	80012ba <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	82fb      	strh	r3, [r7, #22]

      break;
 8001296:	e010      	b.n	80012ba <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8001298:	8abb      	ldrh	r3, [r7, #20]
 800129a:	3b02      	subs	r3, #2
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80012a2:	8afb      	ldrh	r3, [r7, #22]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	8abb      	ldrh	r3, [r7, #20]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	68f9      	ldr	r1, [r7, #12]
 80012ae:	5ccb      	ldrb	r3, [r1, r3]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	82fb      	strh	r3, [r7, #22]
      break;
 80012b8:	bf00      	nop
  }

  return ret_val;
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	46b5      	mov	sp, r6
}
 80012be:	4618      	mov	r0, r3
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012c8 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	69b9      	ldr	r1, [r7, #24]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	1a8a      	subs	r2, r1, r2
 80012e2:	fb03 f202 	mul.w	r2, r3, r2
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1acb      	subs	r3, r1, r3
 80012ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4413      	add	r3, r2
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001300:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001304:	b095      	sub	sp, #84	; 0x54
 8001306:	af00      	add	r7, sp, #0
 8001308:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (htim->Instance == TIM2) {
 800130a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001312:	f040 8192 	bne.w	800163a <HAL_TIM_IC_CaptureCallback+0x33a>
		switch (htim->Channel) {
 8001316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001318:	7f1b      	ldrb	r3, [r3, #28]
 800131a:	3b01      	subs	r3, #1
 800131c:	2b07      	cmp	r3, #7
 800131e:	f200 818e 	bhi.w	800163e <HAL_TIM_IC_CaptureCallback+0x33e>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001349 	.word	0x08001349
 800132c:	080013fd 	.word	0x080013fd
 8001330:	0800163f 	.word	0x0800163f
 8001334:	080014ab 	.word	0x080014ab
 8001338:	0800163f 	.word	0x0800163f
 800133c:	0800163f 	.word	0x0800163f
 8001340:	0800163f 	.word	0x0800163f
 8001344:	08001559 	.word	0x08001559
		case HAL_TIM_ACTIVE_CHANNEL_1:
			// Kanal 1 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC1P) == 0) {
 8001348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d113      	bne.n	800137e <HAL_TIM_IC_CaptureCallback+0x7e>
				ch1_rising = TIM2->CCR1; // yukselen kenar degerini kaydet
 8001356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800135a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135c:	2200      	movs	r2, #0
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
 8001360:	647a      	str	r2, [r7, #68]	; 0x44
 8001362:	4b8b      	ldr	r3, [pc, #556]	; (8001590 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001364:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001368:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC1P; // polariteyi düsen kenar olarak degistir
 800136c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	6213      	str	r3, [r2, #32]
				if (pre_ch1 < 2010 && pre_ch1 > 990) {
					ch1 = pre_ch1;
				}
				TIM2->CCER &= ~TIM_CCER_CC1P; // polariteyi yukselen kenar olarak ayarla
			}
			break;
 800137c:	e160      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x340>
				ch1_falling = TIM2->CCR1;
 800137e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	2200      	movs	r2, #0
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
 8001388:	63fa      	str	r2, [r7, #60]	; 0x3c
 800138a:	4b82      	ldr	r3, [pc, #520]	; (8001594 <HAL_TIM_IC_CaptureCallback+0x294>)
 800138c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001390:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch1 = ch1_falling - ch1_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8001394:	4b7f      	ldr	r3, [pc, #508]	; (8001594 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139a:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <HAL_TIM_IC_CaptureCallback+0x290>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	1a84      	subs	r4, r0, r2
 80013a2:	633c      	str	r4, [r7, #48]	; 0x30
 80013a4:	eb61 0303 	sbc.w	r3, r1, r3
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
 80013aa:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80013b0:	e9c3 1200 	strd	r1, r2, [r3]
				if (pre_ch1 < 0) {
 80013b4:	4b78      	ldr	r3, [pc, #480]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch1 < 2010 && pre_ch1 > 990) {
 80013ba:	4b77      	ldr	r3, [pc, #476]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f240 71da 	movw	r1, #2010	; 0x7da
 80013c4:	428a      	cmp	r2, r1
 80013c6:	f173 0300 	sbcs.w	r3, r3, #0
 80013ca:	d20e      	bcs.n	80013ea <HAL_TIM_IC_CaptureCallback+0xea>
 80013cc:	4b72      	ldr	r3, [pc, #456]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f240 31df 	movw	r1, #991	; 0x3df
 80013d6:	428a      	cmp	r2, r1
 80013d8:	f173 0300 	sbcs.w	r3, r3, #0
 80013dc:	d305      	bcc.n	80013ea <HAL_TIM_IC_CaptureCallback+0xea>
					ch1 = pre_ch1;
 80013de:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x298>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	496d      	ldr	r1, [pc, #436]	; (800159c <HAL_TIM_IC_CaptureCallback+0x29c>)
 80013e6:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC1P; // polariteyi yukselen kenar olarak ayarla
 80013ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f4:	f023 0302 	bic.w	r3, r3, #2
 80013f8:	6213      	str	r3, [r2, #32]
			break;
 80013fa:	e121      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x340>
		case HAL_TIM_ACTIVE_CHANNEL_2:
			// Kanal 2 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC2P) == 0) {
 80013fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	2b00      	cmp	r3, #0
 8001408:	d113      	bne.n	8001432 <HAL_TIM_IC_CaptureCallback+0x132>
				ch2_rising = TIM2->CCR2; // yukselen kenar degerini kaydet
 800140a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001410:	2200      	movs	r2, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
 8001414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001416:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001418:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800141c:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC2P; // polariteyi düsen kenar olarak degistir
 8001420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142a:	f043 0320 	orr.w	r3, r3, #32
 800142e:	6213      	str	r3, [r2, #32]
					ch2 = pre_ch2;
				}
				TIM2->CCER &= ~TIM_CCER_CC2P; // polariteyi yukselen kenar olarak ayarla
			}

			break;
 8001430:	e106      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x340>
				ch2_falling = TIM2->CCR2;
 8001432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	2200      	movs	r2, #0
 800143a:	623b      	str	r3, [r7, #32]
 800143c:	627a      	str	r2, [r7, #36]	; 0x24
 800143e:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001440:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001444:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch2 = ch2_falling - ch2_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8001448:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800144a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144e:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	ebb0 0a02 	subs.w	sl, r0, r2
 8001458:	eb61 0b03 	sbc.w	fp, r1, r3
 800145c:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800145e:	e9c3 ab00 	strd	sl, fp, [r3]
				if (pre_ch2 < 0) {
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch2 < 2010 && pre_ch2 > 990) {
 8001468:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f240 71da 	movw	r1, #2010	; 0x7da
 8001472:	428a      	cmp	r2, r1
 8001474:	f173 0300 	sbcs.w	r3, r3, #0
 8001478:	d20e      	bcs.n	8001498 <HAL_TIM_IC_CaptureCallback+0x198>
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f240 31df 	movw	r1, #991	; 0x3df
 8001484:	428a      	cmp	r2, r1
 8001486:	f173 0300 	sbcs.w	r3, r3, #0
 800148a:	d305      	bcc.n	8001498 <HAL_TIM_IC_CaptureCallback+0x198>
					ch2 = pre_ch2;
 800148c:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	4946      	ldr	r1, [pc, #280]	; (80015ac <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001494:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC2P; // polariteyi yukselen kenar olarak ayarla
 8001498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a2:	f023 0320 	bic.w	r3, r3, #32
 80014a6:	6213      	str	r3, [r2, #32]
			break;
 80014a8:	e0ca      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x340>
		case HAL_TIM_ACTIVE_CHANNEL_3:
			// Kanal 3 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC3P) == 0) {
 80014aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d113      	bne.n	80014e0 <HAL_TIM_IC_CaptureCallback+0x1e0>
				ch3_rising = TIM2->CCR3; // yukselen kenar degerini kaydet
 80014b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014be:	2200      	movs	r2, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	61fa      	str	r2, [r7, #28]
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80014c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80014ca:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC3P; // polariteyi düsen kenar olarak degistir
 80014ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014dc:	6213      	str	r3, [r2, #32]
					ch3 = pre_ch3;
				}
				TIM2->CCER &= ~TIM_CCER_CC3P; // polariteyi yukselen kenar olarak ayarla
			}

			break;
 80014de:	e0af      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x340>
				ch3_falling = TIM2->CCR3;
 80014e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e6:	2200      	movs	r2, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	617a      	str	r2, [r7, #20]
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80014ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80014f2:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch3 = ch3_falling - ch3_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80014f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	ebb0 0802 	subs.w	r8, r0, r2
 8001506:	eb61 0903 	sbc.w	r9, r1, r3
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800150c:	e9c3 8900 	strd	r8, r9, [r3]
				if (pre_ch3 < 0) {
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch3 < 2010 && pre_ch3 > 990) {
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f240 71da 	movw	r1, #2010	; 0x7da
 8001520:	428a      	cmp	r2, r1
 8001522:	f173 0300 	sbcs.w	r3, r3, #0
 8001526:	d20e      	bcs.n	8001546 <HAL_TIM_IC_CaptureCallback+0x246>
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f240 31df 	movw	r1, #991	; 0x3df
 8001532:	428a      	cmp	r2, r1
 8001534:	f173 0300 	sbcs.w	r3, r3, #0
 8001538:	d305      	bcc.n	8001546 <HAL_TIM_IC_CaptureCallback+0x246>
					ch3 = pre_ch3;
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	491e      	ldr	r1, [pc, #120]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8001542:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC3P; // polariteyi yukselen kenar olarak ayarla
 8001546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001554:	6213      	str	r3, [r2, #32]
			break;
 8001556:	e073      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x340>
		case HAL_TIM_ACTIVE_CHANNEL_4:
			// Kanal 4 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC4P) == 0) {
 8001558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d12e      	bne.n	80015c4 <HAL_TIM_IC_CaptureCallback+0x2c4>
				ch4_rising = TIM2->CCR4; // yukselen kenar degerini kaydet
 8001566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	2200      	movs	r2, #0
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	60fa      	str	r2, [r7, #12]
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8001574:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001578:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC4P; // polariteyi düsen kenar olarak degistir
 800157c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800158a:	6213      	str	r3, [r2, #32]
					ch4 = pre_ch4;
				}
				TIM2->CCER &= ~TIM_CCER_CC4P; // polariteyi yukselen kenar olarak ayarla
			}

			break;
 800158c:	e058      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x340>
 800158e:	bf00      	nop
 8001590:	20000168 	.word	0x20000168
 8001594:	20000170 	.word	0x20000170
 8001598:	20000180 	.word	0x20000180
 800159c:	20000178 	.word	0x20000178
 80015a0:	20000188 	.word	0x20000188
 80015a4:	20000190 	.word	0x20000190
 80015a8:	200001a0 	.word	0x200001a0
 80015ac:	20000198 	.word	0x20000198
 80015b0:	200001a8 	.word	0x200001a8
 80015b4:	200001b0 	.word	0x200001b0
 80015b8:	200001c0 	.word	0x200001c0
 80015bc:	200001b8 	.word	0x200001b8
 80015c0:	200001c8 	.word	0x200001c8
				ch4_falling = TIM2->CCR4;
 80015c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	2200      	movs	r2, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_TIM_IC_CaptureCallback+0x34c>)
 80015d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80015d6:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch4 = ch4_falling - ch4_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_TIM_IC_CaptureCallback+0x34c>)
 80015dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_TIM_IC_CaptureCallback+0x350>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	1a84      	subs	r4, r0, r2
 80015e8:	eb61 0503 	sbc.w	r5, r1, r3
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_TIM_IC_CaptureCallback+0x354>)
 80015ee:	e9c3 4500 	strd	r4, r5, [r3]
				if (pre_ch4 < 0) {
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_TIM_IC_CaptureCallback+0x354>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch4 < 2010 && pre_ch4 > 990) {
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_TIM_IC_CaptureCallback+0x354>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f240 71da 	movw	r1, #2010	; 0x7da
 8001602:	428a      	cmp	r2, r1
 8001604:	f173 0300 	sbcs.w	r3, r3, #0
 8001608:	d20e      	bcs.n	8001628 <HAL_TIM_IC_CaptureCallback+0x328>
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_TIM_IC_CaptureCallback+0x354>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f240 31df 	movw	r1, #991	; 0x3df
 8001614:	428a      	cmp	r2, r1
 8001616:	f173 0300 	sbcs.w	r3, r3, #0
 800161a:	d305      	bcc.n	8001628 <HAL_TIM_IC_CaptureCallback+0x328>
					ch4 = pre_ch4;
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_TIM_IC_CaptureCallback+0x354>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	490d      	ldr	r1, [pc, #52]	; (8001658 <HAL_TIM_IC_CaptureCallback+0x358>)
 8001624:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC4P; // polariteyi yukselen kenar olarak ayarla
 8001628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001636:	6213      	str	r3, [r2, #32]
			break;
 8001638:	e002      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x340>
		default:
			break;
		}
	}
 800163a:	bf00      	nop
 800163c:	e000      	b.n	8001640 <HAL_TIM_IC_CaptureCallback+0x340>
			break;
 800163e:	bf00      	nop
}
 8001640:	bf00      	nop
 8001642:	3754      	adds	r7, #84	; 0x54
 8001644:	46bd      	mov	sp, r7
 8001646:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800164a:	4770      	bx	lr
 800164c:	200001d0 	.word	0x200001d0
 8001650:	200001c8 	.word	0x200001c8
 8001654:	200001e0 	.word	0x200001e0
 8001658:	200001d8 	.word	0x200001d8

0800165c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001662:	f000 ff23 	bl	80024ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001666:	f000 fae9 	bl	8001c3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800166a:	f000 fcc7 	bl	8001ffc <MX_GPIO_Init>
	MX_TIM1_Init();
 800166e:	f000 fb87 	bl	8001d80 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001672:	f000 fc33 	bl	8001edc <MX_TIM2_Init>
	MX_I2C1_Init();
 8001676:	f000 fb27 	bl	8001cc8 <MX_I2C1_Init>
	MX_I2C2_Init();
 800167a:	f000 fb53 	bl	8001d24 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	LeftMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 4.57);
 800167e:	4cad      	ldr	r4, [pc, #692]	; (8001934 <main+0x2d8>)
 8001680:	4638      	mov	r0, r7
 8001682:	4bad      	ldr	r3, [pc, #692]	; (8001938 <main+0x2dc>)
 8001684:	2260      	movs	r2, #96	; 0x60
 8001686:	49ad      	ldr	r1, [pc, #692]	; (800193c <main+0x2e0>)
 8001688:	f7ff fc9a 	bl	8000fc0 <MCP4725_init>
 800168c:	463b      	mov	r3, r7
 800168e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RightMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A01, 4.23);
 8001694:	4caa      	ldr	r4, [pc, #680]	; (8001940 <main+0x2e4>)
 8001696:	4638      	mov	r0, r7
 8001698:	4baa      	ldr	r3, [pc, #680]	; (8001944 <main+0x2e8>)
 800169a:	2261      	movs	r2, #97	; 0x61
 800169c:	49a7      	ldr	r1, [pc, #668]	; (800193c <main+0x2e0>)
 800169e:	f7ff fc8f 	bl	8000fc0 <MCP4725_init>
 80016a2:	463b      	mov	r3, r7
 80016a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80016aa:	2100      	movs	r1, #0
 80016ac:	48a6      	ldr	r0, [pc, #664]	; (8001948 <main+0x2ec>)
 80016ae:	f003 f947 	bl	8004940 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80016b2:	2104      	movs	r1, #4
 80016b4:	48a4      	ldr	r0, [pc, #656]	; (8001948 <main+0x2ec>)
 80016b6:	f003 f943 	bl	8004940 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80016ba:	2108      	movs	r1, #8
 80016bc:	48a2      	ldr	r0, [pc, #648]	; (8001948 <main+0x2ec>)
 80016be:	f003 f93f 	bl	8004940 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80016c2:	210c      	movs	r1, #12
 80016c4:	48a0      	ldr	r0, [pc, #640]	; (8001948 <main+0x2ec>)
 80016c6:	f003 f93b 	bl	8004940 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016ca:	2100      	movs	r1, #0
 80016cc:	489f      	ldr	r0, [pc, #636]	; (800194c <main+0x2f0>)
 80016ce:	f003 f83d 	bl	800474c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016d2:	2104      	movs	r1, #4
 80016d4:	489d      	ldr	r0, [pc, #628]	; (800194c <main+0x2f0>)
 80016d6:	f003 f839 	bl	800474c <HAL_TIM_PWM_Start>

	if (!MCP4725_isConnected(&LeftMCP4725)
 80016da:	4896      	ldr	r0, [pc, #600]	; (8001934 <main+0x2d8>)
 80016dc:	f7ff fc8f 	bl	8000ffe <MCP4725_isConnected>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <main+0x96>
			|| !MCP4725_isConnected(&RightMCP4725)) {
 80016e6:	4896      	ldr	r0, [pc, #600]	; (8001940 <main+0x2e4>)
 80016e8:	f7ff fc89 	bl	8000ffe <MCP4725_isConnected>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d108      	bne.n	8001704 <main+0xa8>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f6:	4896      	ldr	r0, [pc, #600]	; (8001950 <main+0x2f4>)
 80016f8:	f001 fa08 	bl	8002b0c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80016fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001700:	f000 ff36 	bl	8002570 <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (ch3 <= 1500) {
 8001704:	4b93      	ldr	r3, [pc, #588]	; (8001954 <main+0x2f8>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f240 51dd 	movw	r1, #1501	; 0x5dd
 800170e:	428a      	cmp	r2, r1
 8001710:	f173 0300 	sbcs.w	r3, r3, #0
 8001714:	d212      	bcs.n	800173c <main+0xe0>
			maxpoint = 1900;
 8001716:	4b90      	ldr	r3, [pc, #576]	; (8001958 <main+0x2fc>)
 8001718:	f240 726c 	movw	r2, #1900	; 0x76c
 800171c:	601a      	str	r2, [r3, #0]
			midpoint = 1500;
 800171e:	4b8f      	ldr	r3, [pc, #572]	; (800195c <main+0x300>)
 8001720:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001724:	601a      	str	r2, [r3, #0]
			minpoint = 1100;
 8001726:	4b8e      	ldr	r3, [pc, #568]	; (8001960 <main+0x304>)
 8001728:	f240 424c 	movw	r2, #1100	; 0x44c
 800172c:	601a      	str	r2, [r3, #0]
			deadband_scale = 32;
 800172e:	4b8d      	ldr	r3, [pc, #564]	; (8001964 <main+0x308>)
 8001730:	2220      	movs	r2, #32
 8001732:	601a      	str	r2, [r3, #0]
			motor_startup_deadband = 100;
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <main+0x30c>)
 8001736:	2264      	movs	r2, #100	; 0x64
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e011      	b.n	8001760 <main+0x104>
		} else {
			maxpoint = 1900;
 800173c:	4b86      	ldr	r3, [pc, #536]	; (8001958 <main+0x2fc>)
 800173e:	f240 726c 	movw	r2, #1900	; 0x76c
 8001742:	601a      	str	r2, [r3, #0]
			midpoint = 1500;
 8001744:	4b85      	ldr	r3, [pc, #532]	; (800195c <main+0x300>)
 8001746:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800174a:	601a      	str	r2, [r3, #0]
			minpoint = 1100;
 800174c:	4b84      	ldr	r3, [pc, #528]	; (8001960 <main+0x304>)
 800174e:	f240 424c 	movw	r2, #1100	; 0x44c
 8001752:	601a      	str	r2, [r3, #0]
			deadband_scale = 32;
 8001754:	4b83      	ldr	r3, [pc, #524]	; (8001964 <main+0x308>)
 8001756:	2220      	movs	r2, #32
 8001758:	601a      	str	r2, [r3, #0]
			motor_startup_deadband = 100;
 800175a:	4b83      	ldr	r3, [pc, #524]	; (8001968 <main+0x30c>)
 800175c:	2264      	movs	r2, #100	; 0x64
 800175e:	601a      	str	r2, [r3, #0]
		}

		ch1_smooth -= ch1_smooth / 10.0;
 8001760:	4b82      	ldr	r3, [pc, #520]	; (800196c <main+0x310>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe55 	bl	8000414 <__aeabi_f2d>
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b80      	ldr	r3, [pc, #512]	; (8001970 <main+0x314>)
 8001770:	f7fe ffd2 	bl	8000718 <__aeabi_ddiv>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4614      	mov	r4, r2
 800177a:	461d      	mov	r5, r3
 800177c:	4b7b      	ldr	r3, [pc, #492]	; (800196c <main+0x310>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe47 	bl	8000414 <__aeabi_f2d>
 8001786:	4622      	mov	r2, r4
 8001788:	462b      	mov	r3, r5
 800178a:	f7fe fce3 	bl	8000154 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff f8cf 	bl	8000938 <__aeabi_d2f>
 800179a:	4603      	mov	r3, r0
 800179c:	4a73      	ldr	r2, [pc, #460]	; (800196c <main+0x310>)
 800179e:	6013      	str	r3, [r2, #0]
		ch1_smooth += ch1 / 10.0;
 80017a0:	4b74      	ldr	r3, [pc, #464]	; (8001974 <main+0x318>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7fe fe55 	bl	8000458 <__aeabi_ul2d>
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <main+0x314>)
 80017b4:	f7fe ffb0 	bl	8000718 <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	4b6a      	ldr	r3, [pc, #424]	; (800196c <main+0x310>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe25 	bl	8000414 <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4620      	mov	r0, r4
 80017d0:	4629      	mov	r1, r5
 80017d2:	f7fe fcc1 	bl	8000158 <__adddf3>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f8ab 	bl	8000938 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a61      	ldr	r2, [pc, #388]	; (800196c <main+0x310>)
 80017e6:	6013      	str	r3, [r2, #0]

		ch2_smooth -= ch2_smooth / 10.0;
 80017e8:	4b63      	ldr	r3, [pc, #396]	; (8001978 <main+0x31c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe11 	bl	8000414 <__aeabi_f2d>
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <main+0x314>)
 80017f8:	f7fe ff8e 	bl	8000718 <__aeabi_ddiv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	461d      	mov	r5, r3
 8001804:	4b5c      	ldr	r3, [pc, #368]	; (8001978 <main+0x31c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe03 	bl	8000414 <__aeabi_f2d>
 800180e:	4622      	mov	r2, r4
 8001810:	462b      	mov	r3, r5
 8001812:	f7fe fc9f 	bl	8000154 <__aeabi_dsub>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f88b 	bl	8000938 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4a54      	ldr	r2, [pc, #336]	; (8001978 <main+0x31c>)
 8001826:	6013      	str	r3, [r2, #0]
		ch2_smooth += ch2 / 10.0;
 8001828:	4b54      	ldr	r3, [pc, #336]	; (800197c <main+0x320>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7fe fe11 	bl	8000458 <__aeabi_ul2d>
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <main+0x314>)
 800183c:	f7fe ff6c 	bl	8000718 <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4614      	mov	r4, r2
 8001846:	461d      	mov	r5, r3
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <main+0x31c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fde1 	bl	8000414 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fc7d 	bl	8000158 <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f867 	bl	8000938 <__aeabi_d2f>
 800186a:	4603      	mov	r3, r0
 800186c:	4a42      	ldr	r2, [pc, #264]	; (8001978 <main+0x31c>)
 800186e:	6013      	str	r3, [r2, #0]

		left_output = (ch2_smooth + ((ch1_smooth - 1500) * 0.5));
 8001870:	4b41      	ldr	r3, [pc, #260]	; (8001978 <main+0x31c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fdcd 	bl	8000414 <__aeabi_f2d>
 800187a:	4604      	mov	r4, r0
 800187c:	460d      	mov	r5, r1
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <main+0x310>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	493f      	ldr	r1, [pc, #252]	; (8001980 <main+0x324>)
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff f8ab 	bl	80009e0 <__aeabi_fsub>
 800188a:	4603      	mov	r3, r0
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdc1 	bl	8000414 <__aeabi_f2d>
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <main+0x328>)
 8001898:	f7fe fe14 	bl	80004c4 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4620      	mov	r0, r4
 80018a2:	4629      	mov	r1, r5
 80018a4:	f7fe fc58 	bl	8000158 <__adddf3>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f81a 	bl	80008e8 <__aeabi_d2iz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a34      	ldr	r2, [pc, #208]	; (8001988 <main+0x32c>)
 80018b8:	6013      	str	r3, [r2, #0]
		if (left_output < midpoint - (deadband_scale / 4))
 80018ba:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <main+0x308>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	da00      	bge.n	80018c4 <main+0x268>
 80018c2:	3303      	adds	r3, #3
 80018c4:	109b      	asrs	r3, r3, #2
 80018c6:	425b      	negs	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <main+0x300>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	441a      	add	r2, r3
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <main+0x32c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dd05      	ble.n	80018e4 <main+0x288>
			HAL_GPIO_WritePin(GPIOA, left_motor_direction_Pin, SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	2120      	movs	r1, #32
 80018dc:	482b      	ldr	r0, [pc, #172]	; (800198c <main+0x330>)
 80018de:	f001 f8fd 	bl	8002adc <HAL_GPIO_WritePin>
 80018e2:	e004      	b.n	80018ee <main+0x292>
		else
			HAL_GPIO_WritePin(GPIOA, left_motor_direction_Pin, RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2120      	movs	r1, #32
 80018e8:	4828      	ldr	r0, [pc, #160]	; (800198c <main+0x330>)
 80018ea:	f001 f8f7 	bl	8002adc <HAL_GPIO_WritePin>

		if (abs(left_output - midpoint) < (deadband_scale / 2))
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <main+0x32c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <main+0x300>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018fc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <main+0x308>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0fd9      	lsrs	r1, r3, #31
 8001906:	440b      	add	r3, r1
 8001908:	105b      	asrs	r3, r3, #1
 800190a:	429a      	cmp	r2, r3
 800190c:	da03      	bge.n	8001916 <main+0x2ba>
			left_output = midpoint;  //orta ölübant  (abs() -> mutlak değer)
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <main+0x300>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <main+0x32c>)
 8001914:	6013      	str	r3, [r2, #0]
		if (left_output > maxpoint - deadband_scale)
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <main+0x2fc>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <main+0x308>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1ad2      	subs	r2, r2, r3
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <main+0x32c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	da33      	bge.n	8001990 <main+0x334>
			left_output = maxpoint;       //max 500
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <main+0x2fc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a16      	ldr	r2, [pc, #88]	; (8001988 <main+0x32c>)
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e03b      	b.n	80019aa <main+0x34e>
 8001932:	bf00      	nop
 8001934:	20000214 	.word	0x20000214
 8001938:	40923d71 	.word	0x40923d71
 800193c:	2000002c 	.word	0x2000002c
 8001940:	20000224 	.word	0x20000224
 8001944:	40875c29 	.word	0x40875c29
 8001948:	2000011c 	.word	0x2000011c
 800194c:	200000d4 	.word	0x200000d4
 8001950:	40011000 	.word	0x40011000
 8001954:	200001b8 	.word	0x200001b8
 8001958:	200001ec 	.word	0x200001ec
 800195c:	200001f0 	.word	0x200001f0
 8001960:	200001f4 	.word	0x200001f4
 8001964:	200001e8 	.word	0x200001e8
 8001968:	200001f8 	.word	0x200001f8
 800196c:	20000204 	.word	0x20000204
 8001970:	40240000 	.word	0x40240000
 8001974:	20000178 	.word	0x20000178
 8001978:	20000208 	.word	0x20000208
 800197c:	20000198 	.word	0x20000198
 8001980:	44bb8000 	.word	0x44bb8000
 8001984:	3fe00000 	.word	0x3fe00000
 8001988:	200001fc 	.word	0x200001fc
 800198c:	40010800 	.word	0x40010800
		else if (left_output < minpoint + deadband_scale)
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <main+0x59c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b99      	ldr	r3, [pc, #612]	; (8001bfc <main+0x5a0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	441a      	add	r2, r3
 800199a:	4b99      	ldr	r3, [pc, #612]	; (8001c00 <main+0x5a4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dd03      	ble.n	80019aa <main+0x34e>
			left_output = minpoint;  //min -500
 80019a2:	4b95      	ldr	r3, [pc, #596]	; (8001bf8 <main+0x59c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a96      	ldr	r2, [pc, #600]	; (8001c00 <main+0x5a4>)
 80019a8:	6013      	str	r3, [r2, #0]

		right_output = (ch2_smooth - ((ch1_smooth - 1500)*0.5));
 80019aa:	4b96      	ldr	r3, [pc, #600]	; (8001c04 <main+0x5a8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fd30 	bl	8000414 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	4b93      	ldr	r3, [pc, #588]	; (8001c08 <main+0x5ac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4993      	ldr	r1, [pc, #588]	; (8001c0c <main+0x5b0>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f80e 	bl	80009e0 <__aeabi_fsub>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd24 	bl	8000414 <__aeabi_f2d>
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <main+0x5b4>)
 80019d2:	f7fe fd77 	bl	80004c4 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fbb9 	bl	8000154 <__aeabi_dsub>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7fe ff7d 	bl	80008e8 <__aeabi_d2iz>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a88      	ldr	r2, [pc, #544]	; (8001c14 <main+0x5b8>)
 80019f2:	6013      	str	r3, [r2, #0]
		if (right_output < midpoint - (deadband_scale / 4))
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <main+0x5a0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da00      	bge.n	80019fe <main+0x3a2>
 80019fc:	3303      	adds	r3, #3
 80019fe:	109b      	asrs	r3, r3, #2
 8001a00:	425b      	negs	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <main+0x5bc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	441a      	add	r2, r3
 8001a0a:	4b82      	ldr	r3, [pc, #520]	; (8001c14 <main+0x5b8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dd05      	ble.n	8001a1e <main+0x3c2>
			HAL_GPIO_WritePin(GPIOA, right_motor_direction_Pin, SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2110      	movs	r1, #16
 8001a16:	4881      	ldr	r0, [pc, #516]	; (8001c1c <main+0x5c0>)
 8001a18:	f001 f860 	bl	8002adc <HAL_GPIO_WritePin>
 8001a1c:	e004      	b.n	8001a28 <main+0x3cc>
		else
			HAL_GPIO_WritePin(GPIOA, right_motor_direction_Pin, RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2110      	movs	r1, #16
 8001a22:	487e      	ldr	r0, [pc, #504]	; (8001c1c <main+0x5c0>)
 8001a24:	f001 f85a 	bl	8002adc <HAL_GPIO_WritePin>

		if (abs(right_output - midpoint) < (deadband_scale / 2))
 8001a28:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <main+0x5b8>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b7a      	ldr	r3, [pc, #488]	; (8001c18 <main+0x5bc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a36:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a3a:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <main+0x5a0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0fd9      	lsrs	r1, r3, #31
 8001a40:	440b      	add	r3, r1
 8001a42:	105b      	asrs	r3, r3, #1
 8001a44:	429a      	cmp	r2, r3
 8001a46:	da03      	bge.n	8001a50 <main+0x3f4>
			right_output = midpoint;  //orta ölübant  (abs() -> mutlak değer)
 8001a48:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <main+0x5bc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a71      	ldr	r2, [pc, #452]	; (8001c14 <main+0x5b8>)
 8001a4e:	6013      	str	r3, [r2, #0]
		if (right_output > maxpoint - deadband_scale)
 8001a50:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <main+0x5c4>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b69      	ldr	r3, [pc, #420]	; (8001bfc <main+0x5a0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	1ad2      	subs	r2, r2, r3
 8001a5a:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <main+0x5b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da04      	bge.n	8001a6c <main+0x410>
			right_output = maxpoint;       //max 500
 8001a62:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <main+0x5c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6b      	ldr	r2, [pc, #428]	; (8001c14 <main+0x5b8>)
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e00c      	b.n	8001a86 <main+0x42a>
		else if (right_output < minpoint + deadband_scale)
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <main+0x59c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b62      	ldr	r3, [pc, #392]	; (8001bfc <main+0x5a0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	441a      	add	r2, r3
 8001a76:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <main+0x5b8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dd03      	ble.n	8001a86 <main+0x42a>
			right_output = minpoint;  //min -500
 8001a7e:	4b5e      	ldr	r3, [pc, #376]	; (8001bf8 <main+0x59c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a64      	ldr	r2, [pc, #400]	; (8001c14 <main+0x5b8>)
 8001a84:	6013      	str	r3, [r2, #0]

		if (left_output == midpoint) {
 8001a86:	4b5e      	ldr	r3, [pc, #376]	; (8001c00 <main+0x5a4>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <main+0x5bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d105      	bne.n	8001a9e <main+0x442>
			HAL_GPIO_WritePin(GPIOB, left_break_output_Pin, SET);
 8001a92:	2201      	movs	r2, #1
 8001a94:	2101      	movs	r1, #1
 8001a96:	4863      	ldr	r0, [pc, #396]	; (8001c24 <main+0x5c8>)
 8001a98:	f001 f820 	bl	8002adc <HAL_GPIO_WritePin>
 8001a9c:	e004      	b.n	8001aa8 <main+0x44c>
		} else {
			HAL_GPIO_WritePin(GPIOB, left_break_output_Pin, RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4860      	ldr	r0, [pc, #384]	; (8001c24 <main+0x5c8>)
 8001aa4:	f001 f81a 	bl	8002adc <HAL_GPIO_WritePin>
		}
		if (right_output == midpoint) {
 8001aa8:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <main+0x5b8>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b5a      	ldr	r3, [pc, #360]	; (8001c18 <main+0x5bc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d105      	bne.n	8001ac0 <main+0x464>
			HAL_GPIO_WritePin(GPIOB, right_break_output_Pin, SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	485a      	ldr	r0, [pc, #360]	; (8001c24 <main+0x5c8>)
 8001aba:	f001 f80f 	bl	8002adc <HAL_GPIO_WritePin>
 8001abe:	e004      	b.n	8001aca <main+0x46e>
		} else {
			HAL_GPIO_WritePin(GPIOB, right_break_output_Pin, RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4857      	ldr	r0, [pc, #348]	; (8001c24 <main+0x5c8>)
 8001ac6:	f001 f809 	bl	8002adc <HAL_GPIO_WritePin>
		}

		if (ch4 >= 1500) {
 8001aca:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <main+0x5cc>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001ad4:	428a      	cmp	r2, r1
 8001ad6:	f173 0300 	sbcs.w	r3, r3, #0
 8001ada:	d30e      	bcc.n	8001afa <main+0x49e>
			HAL_GPIO_WritePin(GPIOA, handbrake_Pin, SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	484e      	ldr	r0, [pc, #312]	; (8001c1c <main+0x5c0>)
 8001ae2:	f000 fffb 	bl	8002adc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, left_break_output_Pin, SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2101      	movs	r1, #1
 8001aea:	484e      	ldr	r0, [pc, #312]	; (8001c24 <main+0x5c8>)
 8001aec:	f000 fff6 	bl	8002adc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, right_break_output_Pin, SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2102      	movs	r1, #2
 8001af4:	484b      	ldr	r0, [pc, #300]	; (8001c24 <main+0x5c8>)
 8001af6:	f000 fff1 	bl	8002adc <HAL_GPIO_WritePin>
		}

		if (left_output >= midpoint)
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <main+0x5a4>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <main+0x5bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	db0f      	blt.n	8001b26 <main+0x4ca>
			left_motor_pwm = map(left_output, midpoint, maxpoint, 0, 1000);
 8001b06:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <main+0x5a4>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <main+0x5bc>)
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <main+0x5c4>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f7ff fbd5 	bl	80012c8 <map>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a42      	ldr	r2, [pc, #264]	; (8001c2c <main+0x5d0>)
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e013      	b.n	8001b4e <main+0x4f2>
		else
			left_motor_pwm = abs(
					map(left_output, minpoint, midpoint, 0, 1000) - 1000);
 8001b26:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <main+0x5a4>)
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <main+0x59c>)
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <main+0x5bc>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f7ff fbc5 	bl	80012c8 <map>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
			left_motor_pwm = abs(
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bfb8      	it	lt
 8001b48:	425b      	neglt	r3, r3
 8001b4a:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <main+0x5d0>)
 8001b4c:	6013      	str	r3, [r2, #0]

		if (right_output >= midpoint)
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <main+0x5b8>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <main+0x5bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	db0f      	blt.n	8001b7a <main+0x51e>
			right_motor_pwm = map(right_output, midpoint, maxpoint, 0, 1000);
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <main+0x5b8>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <main+0x5bc>)
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <main+0x5c4>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f7ff fbab 	bl	80012c8 <map>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a2e      	ldr	r2, [pc, #184]	; (8001c30 <main+0x5d4>)
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e013      	b.n	8001ba2 <main+0x546>
		else
			right_motor_pwm = abs(
					map(right_output, minpoint, midpoint, 0, 1000) - 1000);
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <main+0x5b8>)
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <main+0x59c>)
 8001b80:	6819      	ldr	r1, [r3, #0]
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <main+0x5bc>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f7ff fb9b 	bl	80012c8 <map>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
			right_motor_pwm = abs(
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bfb8      	it	lt
 8001b9c:	425b      	neglt	r3, r3
 8001b9e:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <main+0x5d4>)
 8001ba0:	6013      	str	r3, [r2, #0]

		//i2c ile başlatılmış sürücünün bufferından output verilecek
		MCP4725_setValue(&LeftMCP4725,
				(uint16_t) (map(left_motor_pwm, 0, 1000, 800, 2500)),
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <main+0x5d0>)
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f7ff fb87 	bl	80012c8 <map>
 8001bba:	4603      	mov	r3, r0
		MCP4725_setValue(&LeftMCP4725,
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	481c      	ldr	r0, [pc, #112]	; (8001c34 <main+0x5d8>)
 8001bc4:	f7ff fa5c 	bl	8001080 <MCP4725_setValue>
				MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
		MCP4725_setValue(&RightMCP4725,
				(uint16_t) (map(right_motor_pwm, 0, 1000, 800, 2500)),
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <main+0x5d4>)
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bda:	2100      	movs	r1, #0
 8001bdc:	f7ff fb74 	bl	80012c8 <map>
 8001be0:	4603      	mov	r3, r0
		MCP4725_setValue(&RightMCP4725,
 8001be2:	b299      	uxth	r1, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	2200      	movs	r2, #0
 8001be8:	4813      	ldr	r0, [pc, #76]	; (8001c38 <main+0x5dc>)
 8001bea:	f7ff fa49 	bl	8001080 <MCP4725_setValue>
				MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);

		HAL_Delay(20);
 8001bee:	2014      	movs	r0, #20
 8001bf0:	f000 fcbe 	bl	8002570 <HAL_Delay>
		if (ch3 <= 1500) {
 8001bf4:	e586      	b.n	8001704 <main+0xa8>
 8001bf6:	bf00      	nop
 8001bf8:	200001f4 	.word	0x200001f4
 8001bfc:	200001e8 	.word	0x200001e8
 8001c00:	200001fc 	.word	0x200001fc
 8001c04:	20000208 	.word	0x20000208
 8001c08:	20000204 	.word	0x20000204
 8001c0c:	44bb8000 	.word	0x44bb8000
 8001c10:	3fe00000 	.word	0x3fe00000
 8001c14:	20000200 	.word	0x20000200
 8001c18:	200001f0 	.word	0x200001f0
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	200001ec 	.word	0x200001ec
 8001c24:	40010c00 	.word	0x40010c00
 8001c28:	200001d8 	.word	0x200001d8
 8001c2c:	2000020c 	.word	0x2000020c
 8001c30:	20000210 	.word	0x20000210
 8001c34:	20000214 	.word	0x20000214
 8001c38:	20000224 	.word	0x20000224

08001c3c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	; 0x40
 8001c40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	2228      	movs	r2, #40	; 0x28
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 ff6e 	bl	8005b2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c66:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c70:	2302      	movs	r3, #2
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f002 f8bd 	bl	8003e04 <HAL_RCC_OscConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x58>
		Error_Handler();
 8001c90:	f000 fa36 	bl	8002100 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c94:	230f      	movs	r3, #15
 8001c96:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fb2a 	bl	8004308 <HAL_RCC_ClockConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0x82>
		Error_Handler();
 8001cba:	f000 fa21 	bl	8002100 <Error_Handler>
	}
}
 8001cbe:	bf00      	nop
 8001cc0:	3740      	adds	r7, #64	; 0x40
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <MX_I2C1_Init+0x54>)
 8001cd0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cd4:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <MX_I2C1_Init+0x58>)
 8001cd6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cea:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001d06:	f000 ff1b 	bl	8002b40 <HAL_I2C_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001d10:	f000 f9f6 	bl	8002100 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000002c 	.word	0x2000002c
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	000186a0 	.word	0x000186a0

08001d24 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d2a:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <MX_I2C2_Init+0x54>)
 8001d2c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <MX_I2C2_Init+0x58>)
 8001d32:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d46:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001d60:	4804      	ldr	r0, [pc, #16]	; (8001d74 <MX_I2C2_Init+0x50>)
 8001d62:	f000 feed 	bl	8002b40 <HAL_I2C_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001d6c:	f000 f9c8 	bl	8002100 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000080 	.word	0x20000080
 8001d78:	40005800 	.word	0x40005800
 8001d7c:	000186a0 	.word	0x000186a0

08001d80 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b096      	sub	sp, #88	; 0x58
 8001d84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2220      	movs	r2, #32
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 feb7 	bl	8005b2c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001dbe:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001dc0:	4a45      	ldr	r2, [pc, #276]	; (8001ed8 <MX_TIM1_Init+0x158>)
 8001dc2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 576 - 1;
 8001dc4:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001dc6:	f240 223f 	movw	r2, #575	; 0x23f
 8001dca:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8001dd2:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001dd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dd8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001de0:	4b3c      	ldr	r3, [pc, #240]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001dec:	4839      	ldr	r0, [pc, #228]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001dee:	f002 fc05 	bl	80045fc <HAL_TIM_Base_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001df8:	f000 f982 	bl	8002100 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e00:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e06:	4619      	mov	r1, r3
 8001e08:	4832      	ldr	r0, [pc, #200]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001e0a:	f003 f90b 	bl	8005024 <HAL_TIM_ConfigClockSource>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM1_Init+0x98>
		Error_Handler();
 8001e14:	f000 f974 	bl	8002100 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001e18:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001e1a:	f002 fc3e 	bl	800469a <HAL_TIM_PWM_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8001e24:	f000 f96c 	bl	8002100 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001e30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e34:	4619      	mov	r1, r3
 8001e36:	4827      	ldr	r0, [pc, #156]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001e38:	f003 fd92 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8001e42:	f000 f95d 	bl	8002100 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e46:	2360      	movs	r3, #96	; 0x60
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e52:	2300      	movs	r3, #0
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e66:	2200      	movs	r2, #0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	481a      	ldr	r0, [pc, #104]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001e6c:	f003 f818 	bl	8004ea0 <HAL_TIM_PWM_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8001e76:	f000 f943 	bl	8002100 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7e:	2204      	movs	r2, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001e84:	f003 f80c 	bl	8004ea0 <HAL_TIM_PWM_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM1_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 8001e8e:	f000 f937 	bl	8002100 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eaa:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001eb6:	f003 fdb1 	bl	8005a1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM1_Init+0x144>
			!= HAL_OK) {
		Error_Handler();
 8001ec0:	f000 f91e 	bl	8002100 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <MX_TIM1_Init+0x154>)
 8001ec6:	f000 fa37 	bl	8002338 <HAL_TIM_MspPostInit>

}
 8001eca:	bf00      	nop
 8001ecc:	3758      	adds	r7, #88	; 0x58
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200000d4 	.word	0x200000d4
 8001ed8:	40012c00 	.word	0x40012c00

08001edc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ee2:	f107 0318 	add.w	r3, r7, #24
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001efa:	463b      	mov	r3, r7
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f0c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8001f0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f10:	2247      	movs	r2, #71	; 0x47
 8001f12:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF;
 8001f1a:	4b37      	ldr	r3, [pc, #220]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f20:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001f2e:	4832      	ldr	r0, [pc, #200]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f30:	f002 fb64 	bl	80045fc <HAL_TIM_Base_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM2_Init+0x62>
		Error_Handler();
 8001f3a:	f000 f8e1 	bl	8002100 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001f44:	f107 0318 	add.w	r3, r7, #24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	482b      	ldr	r0, [pc, #172]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f4c:	f003 f86a 	bl	8005024 <HAL_TIM_ConfigClockSource>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001f56:	f000 f8d3 	bl	8002100 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001f5a:	4827      	ldr	r0, [pc, #156]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f5c:	f002 fc98 	bl	8004890 <HAL_TIM_IC_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM2_Init+0x8e>
		Error_Handler();
 8001f66:	f000 f8cb 	bl	8002100 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	4619      	mov	r1, r3
 8001f78:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001f7a:	f003 fcf1 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8001f84:	f000 f8bc 	bl	8002100 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001f98:	463b      	mov	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001fa0:	f002 fee2 	bl	8004d68 <HAL_TIM_IC_ConfigChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM2_Init+0xd2>
		Error_Handler();
 8001faa:	f000 f8a9 	bl	8002100 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4810      	ldr	r0, [pc, #64]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001fb6:	f002 fed7 	bl	8004d68 <HAL_TIM_IC_ConfigChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM2_Init+0xe8>
		Error_Handler();
 8001fc0:	f000 f89e 	bl	8002100 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001fcc:	f002 fecc 	bl	8004d68 <HAL_TIM_IC_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0xfe>
		Error_Handler();
 8001fd6:	f000 f893 	bl	8002100 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8001fda:	463b      	mov	r3, r7
 8001fdc:	220c      	movs	r2, #12
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_TIM2_Init+0x11c>)
 8001fe2:	f002 fec1 	bl	8004d68 <HAL_TIM_IC_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM2_Init+0x114>
		Error_Handler();
 8001fec:	f000 f888 	bl	8002100 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000011c 	.word	0x2000011c

08001ffc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002010:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <MX_GPIO_Init+0xf4>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a36      	ldr	r2, [pc, #216]	; (80020f0 <MX_GPIO_Init+0xf4>)
 8002016:	f043 0310 	orr.w	r3, r3, #16
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <MX_GPIO_Init+0xf4>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002028:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <MX_GPIO_Init+0xf4>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a30      	ldr	r2, [pc, #192]	; (80020f0 <MX_GPIO_Init+0xf4>)
 800202e:	f043 0320 	orr.w	r3, r3, #32
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <MX_GPIO_Init+0xf4>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <MX_GPIO_Init+0xf4>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a2a      	ldr	r2, [pc, #168]	; (80020f0 <MX_GPIO_Init+0xf4>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <MX_GPIO_Init+0xf4>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <MX_GPIO_Init+0xf4>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <MX_GPIO_Init+0xf4>)
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <MX_GPIO_Init+0xf4>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002076:	481f      	ldr	r0, [pc, #124]	; (80020f4 <MX_GPIO_Init+0xf8>)
 8002078:	f000 fd30 	bl	8002adc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800207c:	2200      	movs	r2, #0
 800207e:	21f0      	movs	r1, #240	; 0xf0
 8002080:	481d      	ldr	r0, [pc, #116]	; (80020f8 <MX_GPIO_Init+0xfc>)
 8002082:	f000 fd2b 	bl	8002adc <HAL_GPIO_WritePin>
			right_motor_direction_Pin | left_motor_direction_Pin | handbrake_Pin
					| shifter_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, left_break_output_Pin | right_break_output_Pin,
 8002086:	2200      	movs	r2, #0
 8002088:	2103      	movs	r1, #3
 800208a:	481c      	ldr	r0, [pc, #112]	; (80020fc <MX_GPIO_Init+0x100>)
 800208c:	f000 fd26 	bl	8002adc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002094:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002096:	2301      	movs	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2302      	movs	r3, #2
 80020a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4619      	mov	r1, r3
 80020a8:	4812      	ldr	r0, [pc, #72]	; (80020f4 <MX_GPIO_Init+0xf8>)
 80020aa:	f000 fb93 	bl	80027d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : right_motor_direction_Pin left_motor_direction_Pin handbrake_Pin shifter_Pin */
	GPIO_InitStruct.Pin = right_motor_direction_Pin | left_motor_direction_Pin
 80020ae:	23f0      	movs	r3, #240	; 0xf0
 80020b0:	613b      	str	r3, [r7, #16]
			| handbrake_Pin | shifter_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b2:	2301      	movs	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 0310 	add.w	r3, r7, #16
 80020c2:	4619      	mov	r1, r3
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <MX_GPIO_Init+0xfc>)
 80020c6:	f000 fb85 	bl	80027d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : left_break_output_Pin right_break_output_Pin */
	GPIO_InitStruct.Pin = left_break_output_Pin | right_break_output_Pin;
 80020ca:	2303      	movs	r3, #3
 80020cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ce:	2301      	movs	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4619      	mov	r1, r3
 80020e0:	4806      	ldr	r0, [pc, #24]	; (80020fc <MX_GPIO_Init+0x100>)
 80020e2:	f000 fb77 	bl	80027d4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80020e6:	bf00      	nop
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40011000 	.word	0x40011000
 80020f8:	40010800 	.word	0x40010800
 80020fc:	40010c00 	.word	0x40010c00

08002100 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002104:	b672      	cpsid	i
}
 8002106:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002108:	e7fe      	b.n	8002108 <Error_Handler+0x8>
	...

0800210c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_MspInit+0x5c>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_MspInit+0x5c>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6193      	str	r3, [r2, #24]
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_MspInit+0x5c>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_MspInit+0x5c>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <HAL_MspInit+0x5c>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	61d3      	str	r3, [r2, #28]
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_MspInit+0x5c>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_MspInit+0x60>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_MspInit+0x60>)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40021000 	.word	0x40021000
 800216c:	40010000 	.word	0x40010000

08002170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0318 	add.w	r3, r7, #24
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <HAL_I2C_MspInit+0xc8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d124      	bne.n	80021da <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_I2C_MspInit+0xcc>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a29      	ldr	r2, [pc, #164]	; (800223c <HAL_I2C_MspInit+0xcc>)
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_I2C_MspInit+0xcc>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021a8:	23c0      	movs	r3, #192	; 0xc0
 80021aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ac:	2312      	movs	r3, #18
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0318 	add.w	r3, r7, #24
 80021b8:	4619      	mov	r1, r3
 80021ba:	4821      	ldr	r0, [pc, #132]	; (8002240 <HAL_I2C_MspInit+0xd0>)
 80021bc:	f000 fb0a 	bl	80027d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_I2C_MspInit+0xcc>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <HAL_I2C_MspInit+0xcc>)
 80021c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ca:	61d3      	str	r3, [r2, #28]
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_I2C_MspInit+0xcc>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021d8:	e029      	b.n	800222e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_I2C_MspInit+0xd4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d124      	bne.n	800222e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_I2C_MspInit+0xcc>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <HAL_I2C_MspInit+0xcc>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_I2C_MspInit+0xcc>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002202:	2312      	movs	r3, #18
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 0318 	add.w	r3, r7, #24
 800220e:	4619      	mov	r1, r3
 8002210:	480b      	ldr	r0, [pc, #44]	; (8002240 <HAL_I2C_MspInit+0xd0>)
 8002212:	f000 fadf 	bl	80027d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_I2C_MspInit+0xcc>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_I2C_MspInit+0xcc>)
 800221c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_I2C_MspInit+0xcc>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
}
 800222e:	bf00      	nop
 8002230:	3728      	adds	r7, #40	; 0x28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40005400 	.word	0x40005400
 800223c:	40021000 	.word	0x40021000
 8002240:	40010c00 	.word	0x40010c00
 8002244:	40005800 	.word	0x40005800

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a32      	ldr	r2, [pc, #200]	; (800232c <HAL_TIM_Base_MspInit+0xe4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d12c      	bne.n	80022c2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_TIM_Base_MspInit+0xe8>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a30      	ldr	r2, [pc, #192]	; (8002330 <HAL_TIM_Base_MspInit+0xe8>)
 800226e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <HAL_TIM_Base_MspInit+0xe8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	2018      	movs	r0, #24
 8002286:	f000 fa6e 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800228a:	2018      	movs	r0, #24
 800228c:	f000 fa87 	bl	800279e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2019      	movs	r0, #25
 8002296:	f000 fa66 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800229a:	2019      	movs	r0, #25
 800229c:	f000 fa7f 	bl	800279e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	201a      	movs	r0, #26
 80022a6:	f000 fa5e 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80022aa:	201a      	movs	r0, #26
 80022ac:	f000 fa77 	bl	800279e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	201b      	movs	r0, #27
 80022b6:	f000 fa56 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022ba:	201b      	movs	r0, #27
 80022bc:	f000 fa6f 	bl	800279e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022c0:	e030      	b.n	8002324 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ca:	d12b      	bne.n	8002324 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_TIM_Base_MspInit+0xe8>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_TIM_Base_MspInit+0xe8>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_TIM_Base_MspInit+0xe8>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_TIM_Base_MspInit+0xe8>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <HAL_TIM_Base_MspInit+0xe8>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_TIM_Base_MspInit+0xe8>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80022fc:	230f      	movs	r3, #15
 80022fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0318 	add.w	r3, r7, #24
 800230c:	4619      	mov	r1, r3
 800230e:	4809      	ldr	r0, [pc, #36]	; (8002334 <HAL_TIM_Base_MspInit+0xec>)
 8002310:	f000 fa60 	bl	80027d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	201c      	movs	r0, #28
 800231a:	f000 fa24 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800231e:	201c      	movs	r0, #28
 8002320:	f000 fa3d 	bl	800279e <HAL_NVIC_EnableIRQ>
}
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40021000 	.word	0x40021000
 8002334:	40010800 	.word	0x40010800

08002338 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <HAL_TIM_MspPostInit+0x5c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d118      	bne.n	800238a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_TIM_MspPostInit+0x60>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <HAL_TIM_MspPostInit+0x60>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_TIM_MspPostInit+0x60>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002370:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2302      	movs	r3, #2
 800237c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0310 	add.w	r3, r7, #16
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_TIM_MspPostInit+0x64>)
 8002386:	f000 fa25 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	3720      	adds	r7, #32
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40021000 	.word	0x40021000
 800239c:	40010800 	.word	0x40010800

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <NMI_Handler+0x4>

080023a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <HardFault_Handler+0x4>

080023ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <MemManage_Handler+0x4>

080023b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <BusFault_Handler+0x4>

080023b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <UsageFault_Handler+0x4>

080023be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e6:	f000 f8a7 	bl	8002538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <TIM1_BRK_IRQHandler+0x10>)
 80023f6:	f002 fbaf 	bl	8004b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200000d4 	.word	0x200000d4

08002404 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TIM1_UP_IRQHandler+0x10>)
 800240a:	f002 fba5 	bl	8004b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200000d4 	.word	0x200000d4

08002418 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <TIM1_TRG_COM_IRQHandler+0x10>)
 800241e:	f002 fb9b 	bl	8004b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200000d4 	.word	0x200000d4

0800242c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <TIM1_CC_IRQHandler+0x10>)
 8002432:	f002 fb91 	bl	8004b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200000d4 	.word	0x200000d4

08002440 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM2_IRQHandler+0x10>)
 8002446:	f002 fb87 	bl	8004b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000011c 	.word	0x2000011c

08002454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <Reset_Handler>:
 8002460:	f7ff fff8 	bl	8002454 <SystemInit>
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <LoopFillZerobss+0xe>)
 8002466:	490c      	ldr	r1, [pc, #48]	; (8002498 <LoopFillZerobss+0x12>)
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <LoopFillZerobss+0x16>)
 800246a:	2300      	movs	r3, #0
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:
 800246e:	58d4      	ldr	r4, [r2, r3]
 8002470:	50c4      	str	r4, [r0, r3]
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:
 8002474:	18c4      	adds	r4, r0, r3
 8002476:	428c      	cmp	r4, r1
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <LoopFillZerobss+0x1a>)
 800247c:	4c09      	ldr	r4, [pc, #36]	; (80024a4 <LoopFillZerobss+0x1e>)
 800247e:	2300      	movs	r3, #0
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:
 8002486:	42a2      	cmp	r2, r4
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>
 800248a:	f003 fb2b 	bl	8005ae4 <__libc_init_array>
 800248e:	f7ff f8e5 	bl	800165c <main>
 8002492:	4770      	bx	lr
 8002494:	20000000 	.word	0x20000000
 8002498:	2000000c 	.word	0x2000000c
 800249c:	08005b88 	.word	0x08005b88
 80024a0:	20000010 	.word	0x20000010
 80024a4:	20000238 	.word	0x20000238

080024a8 <ADC1_2_IRQHandler>:
 80024a8:	e7fe      	b.n	80024a8 <ADC1_2_IRQHandler>
	...

080024ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_Init+0x28>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_Init+0x28>)
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024bc:	2003      	movs	r0, #3
 80024be:	f000 f947 	bl	8002750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c2:	200f      	movs	r0, #15
 80024c4:	f000 f808 	bl	80024d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c8:	f7ff fe20 	bl	800210c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x54>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_InitTick+0x58>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f95f 	bl	80027ba <HAL_SYSTICK_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00e      	b.n	8002524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d80a      	bhi.n	8002522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f000 f927 	bl	8002766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <HAL_InitTick+0x5c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000000 	.word	0x20000000
 8002530:	20000008 	.word	0x20000008
 8002534:	20000004 	.word	0x20000004

08002538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_IncTick+0x1c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_IncTick+0x20>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a03      	ldr	r2, [pc, #12]	; (8002558 <HAL_IncTick+0x20>)
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20000008 	.word	0x20000008
 8002558:	20000234 	.word	0x20000234

0800255c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b02      	ldr	r3, [pc, #8]	; (800256c <HAL_GetTick+0x10>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	20000234 	.word	0x20000234

08002570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff fff0 	bl	800255c <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d005      	beq.n	8002596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_Delay+0x44>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002596:	bf00      	nop
 8002598:	f7ff ffe0 	bl	800255c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d8f7      	bhi.n	8002598 <HAL_Delay+0x28>
  {
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000008 	.word	0x20000008

080025b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d4:	4013      	ands	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ea:	4a04      	ldr	r2, [pc, #16]	; (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	60d3      	str	r3, [r2, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <__NVIC_GetPriorityGrouping+0x18>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	f003 0307 	and.w	r3, r3, #7
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	db0b      	blt.n	8002646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4906      	ldr	r1, [pc, #24]	; (8002650 <__NVIC_EnableIRQ+0x34>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2001      	movs	r0, #1
 800263e:	fa00 f202 	lsl.w	r2, r0, r2
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	; (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
         );
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800271c:	d301      	bcc.n	8002722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271e:	2301      	movs	r3, #1
 8002720:	e00f      	b.n	8002742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <SysTick_Config+0x40>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272a:	210f      	movs	r1, #15
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f7ff ff90 	bl	8002654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <SysTick_Config+0x40>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <SysTick_Config+0x40>)
 800273c:	2207      	movs	r2, #7
 800273e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	e000e010 	.word	0xe000e010

08002750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff2d 	bl	80025b8 <__NVIC_SetPriorityGrouping>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002778:	f7ff ff42 	bl	8002600 <__NVIC_GetPriorityGrouping>
 800277c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ff90 	bl	80026a8 <NVIC_EncodePriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff5f 	bl	8002654 <__NVIC_SetPriority>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff35 	bl	800261c <__NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ffa2 	bl	800270c <SysTick_Config>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b08b      	sub	sp, #44	; 0x2c
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e6:	e169      	b.n	8002abc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e8:	2201      	movs	r2, #1
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	429a      	cmp	r2, r3
 8002802:	f040 8158 	bne.w	8002ab6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a9a      	ldr	r2, [pc, #616]	; (8002a74 <HAL_GPIO_Init+0x2a0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d05e      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002810:	4a98      	ldr	r2, [pc, #608]	; (8002a74 <HAL_GPIO_Init+0x2a0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d875      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 8002816:	4a98      	ldr	r2, [pc, #608]	; (8002a78 <HAL_GPIO_Init+0x2a4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d058      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 800281c:	4a96      	ldr	r2, [pc, #600]	; (8002a78 <HAL_GPIO_Init+0x2a4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d86f      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 8002822:	4a96      	ldr	r2, [pc, #600]	; (8002a7c <HAL_GPIO_Init+0x2a8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d052      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002828:	4a94      	ldr	r2, [pc, #592]	; (8002a7c <HAL_GPIO_Init+0x2a8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d869      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 800282e:	4a94      	ldr	r2, [pc, #592]	; (8002a80 <HAL_GPIO_Init+0x2ac>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d04c      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002834:	4a92      	ldr	r2, [pc, #584]	; (8002a80 <HAL_GPIO_Init+0x2ac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d863      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 800283a:	4a92      	ldr	r2, [pc, #584]	; (8002a84 <HAL_GPIO_Init+0x2b0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d046      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002840:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <HAL_GPIO_Init+0x2b0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d85d      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 8002846:	2b12      	cmp	r3, #18
 8002848:	d82a      	bhi.n	80028a0 <HAL_GPIO_Init+0xcc>
 800284a:	2b12      	cmp	r3, #18
 800284c:	d859      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 800284e:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <HAL_GPIO_Init+0x80>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	080028cf 	.word	0x080028cf
 8002858:	080028a9 	.word	0x080028a9
 800285c:	080028bb 	.word	0x080028bb
 8002860:	080028fd 	.word	0x080028fd
 8002864:	08002903 	.word	0x08002903
 8002868:	08002903 	.word	0x08002903
 800286c:	08002903 	.word	0x08002903
 8002870:	08002903 	.word	0x08002903
 8002874:	08002903 	.word	0x08002903
 8002878:	08002903 	.word	0x08002903
 800287c:	08002903 	.word	0x08002903
 8002880:	08002903 	.word	0x08002903
 8002884:	08002903 	.word	0x08002903
 8002888:	08002903 	.word	0x08002903
 800288c:	08002903 	.word	0x08002903
 8002890:	08002903 	.word	0x08002903
 8002894:	08002903 	.word	0x08002903
 8002898:	080028b1 	.word	0x080028b1
 800289c:	080028c5 	.word	0x080028c5
 80028a0:	4a79      	ldr	r2, [pc, #484]	; (8002a88 <HAL_GPIO_Init+0x2b4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028a6:	e02c      	b.n	8002902 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	623b      	str	r3, [r7, #32]
          break;
 80028ae:	e029      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	3304      	adds	r3, #4
 80028b6:	623b      	str	r3, [r7, #32]
          break;
 80028b8:	e024      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	3308      	adds	r3, #8
 80028c0:	623b      	str	r3, [r7, #32]
          break;
 80028c2:	e01f      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	330c      	adds	r3, #12
 80028ca:	623b      	str	r3, [r7, #32]
          break;
 80028cc:	e01a      	b.n	8002904 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028d6:	2304      	movs	r3, #4
 80028d8:	623b      	str	r3, [r7, #32]
          break;
 80028da:	e013      	b.n	8002904 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e4:	2308      	movs	r3, #8
 80028e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	611a      	str	r2, [r3, #16]
          break;
 80028ee:	e009      	b.n	8002904 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f0:	2308      	movs	r3, #8
 80028f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	615a      	str	r2, [r3, #20]
          break;
 80028fa:	e003      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
          break;
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x130>
          break;
 8002902:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2bff      	cmp	r3, #255	; 0xff
 8002908:	d801      	bhi.n	800290e <HAL_GPIO_Init+0x13a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	e001      	b.n	8002912 <HAL_GPIO_Init+0x13e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2bff      	cmp	r3, #255	; 0xff
 8002918:	d802      	bhi.n	8002920 <HAL_GPIO_Init+0x14c>
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	e002      	b.n	8002926 <HAL_GPIO_Init+0x152>
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	3b08      	subs	r3, #8
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	210f      	movs	r1, #15
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	431a      	orrs	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80b1 	beq.w	8002ab6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002954:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <HAL_GPIO_Init+0x2b8>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4a4c      	ldr	r2, [pc, #304]	; (8002a8c <HAL_GPIO_Init+0x2b8>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6193      	str	r3, [r2, #24]
 8002960:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <HAL_GPIO_Init+0x2b8>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800296c:	4a48      	ldr	r2, [pc, #288]	; (8002a90 <HAL_GPIO_Init+0x2bc>)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a40      	ldr	r2, [pc, #256]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <HAL_GPIO_Init+0x1ec>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3f      	ldr	r2, [pc, #252]	; (8002a98 <HAL_GPIO_Init+0x2c4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00d      	beq.n	80029bc <HAL_GPIO_Init+0x1e8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a3e      	ldr	r2, [pc, #248]	; (8002a9c <HAL_GPIO_Init+0x2c8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <HAL_GPIO_Init+0x1e4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a3d      	ldr	r2, [pc, #244]	; (8002aa0 <HAL_GPIO_Init+0x2cc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_GPIO_Init+0x1e0>
 80029b0:	2303      	movs	r3, #3
 80029b2:	e006      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029b4:	2304      	movs	r3, #4
 80029b6:	e004      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e002      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029c0:	2300      	movs	r3, #0
 80029c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c4:	f002 0203 	and.w	r2, r2, #3
 80029c8:	0092      	lsls	r2, r2, #2
 80029ca:	4093      	lsls	r3, r2
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029d2:	492f      	ldr	r1, [pc, #188]	; (8002a90 <HAL_GPIO_Init+0x2bc>)
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	492c      	ldr	r1, [pc, #176]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029fa:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4928      	ldr	r1, [pc, #160]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a14:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	4922      	ldr	r1, [pc, #136]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	491e      	ldr	r1, [pc, #120]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4918      	ldr	r1, [pc, #96]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4914      	ldr	r1, [pc, #80]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d021      	beq.n	8002aa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
 8002a70:	e021      	b.n	8002ab6 <HAL_GPIO_Init+0x2e2>
 8002a72:	bf00      	nop
 8002a74:	10320000 	.word	0x10320000
 8002a78:	10310000 	.word	0x10310000
 8002a7c:	10220000 	.word	0x10220000
 8002a80:	10210000 	.word	0x10210000
 8002a84:	10120000 	.word	0x10120000
 8002a88:	10110000 	.word	0x10110000
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40010800 	.word	0x40010800
 8002a98:	40010c00 	.word	0x40010c00
 8002a9c:	40011000 	.word	0x40011000
 8002aa0:	40011400 	.word	0x40011400
 8002aa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_GPIO_Init+0x304>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	4909      	ldr	r1, [pc, #36]	; (8002ad8 <HAL_GPIO_Init+0x304>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	3301      	adds	r3, #1
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f47f ae8e 	bne.w	80027e8 <HAL_GPIO_Init+0x14>
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	372c      	adds	r7, #44	; 0x2c
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40010400 	.word	0x40010400

08002adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aec:	787b      	ldrb	r3, [r7, #1]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002af8:	e003      	b.n	8002b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	041a      	lsls	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4013      	ands	r3, r2
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43d9      	mvns	r1, r3
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	611a      	str	r2, [r3, #16]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e12b      	b.n	8002daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fb02 	bl	8002170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ba4:	f001 fcf8 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8002ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a81      	ldr	r2, [pc, #516]	; (8002db4 <HAL_I2C_Init+0x274>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d807      	bhi.n	8002bc4 <HAL_I2C_Init+0x84>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a80      	ldr	r2, [pc, #512]	; (8002db8 <HAL_I2C_Init+0x278>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	bf94      	ite	ls
 8002bbc:	2301      	movls	r3, #1
 8002bbe:	2300      	movhi	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e006      	b.n	8002bd2 <HAL_I2C_Init+0x92>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a7d      	ldr	r2, [pc, #500]	; (8002dbc <HAL_I2C_Init+0x27c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	bf94      	ite	ls
 8002bcc:	2301      	movls	r3, #1
 8002bce:	2300      	movhi	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0e7      	b.n	8002daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a78      	ldr	r2, [pc, #480]	; (8002dc0 <HAL_I2C_Init+0x280>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0c9b      	lsrs	r3, r3, #18
 8002be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a6a      	ldr	r2, [pc, #424]	; (8002db4 <HAL_I2C_Init+0x274>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d802      	bhi.n	8002c14 <HAL_I2C_Init+0xd4>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	3301      	adds	r3, #1
 8002c12:	e009      	b.n	8002c28 <HAL_I2C_Init+0xe8>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	4a69      	ldr	r2, [pc, #420]	; (8002dc4 <HAL_I2C_Init+0x284>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	3301      	adds	r3, #1
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	495c      	ldr	r1, [pc, #368]	; (8002db4 <HAL_I2C_Init+0x274>)
 8002c44:	428b      	cmp	r3, r1
 8002c46:	d819      	bhi.n	8002c7c <HAL_I2C_Init+0x13c>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e59      	subs	r1, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c56:	1c59      	adds	r1, r3, #1
 8002c58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_I2C_Init+0x138>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1e59      	subs	r1, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c76:	e051      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e04f      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <HAL_I2C_Init+0x168>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e58      	subs	r0, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	440b      	add	r3, r1
 8002c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e012      	b.n	8002cce <HAL_I2C_Init+0x18e>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	0099      	lsls	r1, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_Init+0x196>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e022      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10e      	bne.n	8002cfc <HAL_I2C_Init+0x1bc>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e58      	subs	r0, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	440b      	add	r3, r1
 8002cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfa:	e00f      	b.n	8002d1c <HAL_I2C_Init+0x1dc>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	0099      	lsls	r1, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	6809      	ldr	r1, [r1, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6911      	ldr	r1, [r2, #16]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68d2      	ldr	r2, [r2, #12]
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	000186a0 	.word	0x000186a0
 8002db8:	001e847f 	.word	0x001e847f
 8002dbc:	003d08ff 	.word	0x003d08ff
 8002dc0:	431bde83 	.word	0x431bde83
 8002dc4:	10624dd3 	.word	0x10624dd3

08002dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff fbbe 	bl	800255c <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 80e0 	bne.w	8002fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	4970      	ldr	r1, [pc, #448]	; (8002fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fdcc 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0d3      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_Master_Transmit+0x50>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0cc      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d007      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	893a      	ldrh	r2, [r7, #8]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a50      	ldr	r2, [pc, #320]	; (8002fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e80:	8979      	ldrh	r1, [r7, #10]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fc36 	bl	80036f8 <I2C_MasterRequestWrite>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e08d      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eac:	e066      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fe8a 	bl	8003bcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06b      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d11b      	bne.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	6a39      	ldr	r1, [r7, #32]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fe81 	bl	8003c5c <I2C_WaitOnBTFFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d107      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e01a      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d194      	bne.n	8002eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	00100002 	.word	0x00100002
 8002fc0:	ffff0000 	.word	0xffff0000

08002fc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08c      	sub	sp, #48	; 0x30
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	817b      	strh	r3, [r7, #10]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff fabe 	bl	800255c <HAL_GetTick>
 8002fe0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	f040 824b 	bne.w	8003486 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2319      	movs	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	497f      	ldr	r1, [pc, #508]	; (80031f8 <HAL_I2C_Master_Receive+0x234>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 fccc 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
 8003008:	e23e      	b.n	8003488 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_I2C_Master_Receive+0x54>
 8003014:	2302      	movs	r3, #2
 8003016:	e237      	b.n	8003488 <HAL_I2C_Master_Receive+0x4c4>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d007      	beq.n	800303e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2222      	movs	r2, #34	; 0x22
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2210      	movs	r2, #16
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	893a      	ldrh	r2, [r7, #8]
 800306e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <HAL_I2C_Master_Receive+0x238>)
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fbb8 	bl	80037fc <I2C_MasterRequestRead>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e1f8      	b.n	8003488 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	d113      	bne.n	80030c6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e1cc      	b.n	8003460 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d11e      	bne.n	800310c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030de:	b672      	cpsid	i
}
 80030e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003106:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003108:	b662      	cpsie	i
}
 800310a:	e035      	b.n	8003178 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	2b02      	cmp	r3, #2
 8003112:	d11e      	bne.n	8003152 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003122:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003124:	b672      	cpsid	i
}
 8003126:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800314e:	b662      	cpsie	i
}
 8003150:	e012      	b.n	8003178 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003178:	e172      	b.n	8003460 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	2b03      	cmp	r3, #3
 8003180:	f200 811f 	bhi.w	80033c2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	2b01      	cmp	r3, #1
 800318a:	d123      	bne.n	80031d4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fdab 	bl	8003cec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e173      	b.n	8003488 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031d2:	e145      	b.n	8003460 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d152      	bne.n	8003282 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	2200      	movs	r2, #0
 80031e4:	4906      	ldr	r1, [pc, #24]	; (8003200 <HAL_I2C_Master_Receive+0x23c>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fbd6 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e148      	b.n	8003488 <HAL_I2C_Master_Receive+0x4c4>
 80031f6:	bf00      	nop
 80031f8:	00100002 	.word	0x00100002
 80031fc:	ffff0000 	.word	0xffff0000
 8003200:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003204:	b672      	cpsid	i
}
 8003206:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800324a:	b662      	cpsie	i
}
 800324c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003280:	e0ee      	b.n	8003460 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	2200      	movs	r2, #0
 800328a:	4981      	ldr	r1, [pc, #516]	; (8003490 <HAL_I2C_Master_Receive+0x4cc>)
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fb83 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0f5      	b.n	8003488 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032ac:	b672      	cpsid	i
}
 80032ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032e2:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <HAL_I2C_Master_Receive+0x4d0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	08db      	lsrs	r3, r3, #3
 80032e8:	4a6b      	ldr	r2, [pc, #428]	; (8003498 <HAL_I2C_Master_Receive+0x4d4>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0a1a      	lsrs	r2, r3, #8
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00da      	lsls	r2, r3, #3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	3b01      	subs	r3, #1
 8003300:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d118      	bne.n	800333a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800332a:	b662      	cpsie	i
}
 800332c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0a6      	b.n	8003488 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b04      	cmp	r3, #4
 8003346:	d1d9      	bne.n	80032fc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800338a:	b662      	cpsie	i
}
 800338c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c0:	e04e      	b.n	8003460 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fc90 	bl	8003cec <I2C_WaitOnRXNEFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e058      	b.n	8003488 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d124      	bne.n	8003460 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f ae88 	bne.w	800317a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	00010004 	.word	0x00010004
 8003494:	20000000 	.word	0x20000000
 8003498:	14f8b589 	.word	0x14f8b589

0800349c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	460b      	mov	r3, r1
 80034aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff f856 	bl	800255c <HAL_GetTick>
 80034b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b20      	cmp	r3, #32
 80034c0:	f040 8111 	bne.w	80036e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2319      	movs	r3, #25
 80034ca:	2201      	movs	r2, #1
 80034cc:	4988      	ldr	r1, [pc, #544]	; (80036f0 <HAL_I2C_IsDeviceReady+0x254>)
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fa62 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034da:	2302      	movs	r3, #2
 80034dc:	e104      	b.n	80036e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_I2C_IsDeviceReady+0x50>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e0fd      	b.n	80036e8 <HAL_I2C_IsDeviceReady+0x24c>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d007      	beq.n	8003512 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003520:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2224      	movs	r2, #36	; 0x24
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a70      	ldr	r2, [pc, #448]	; (80036f4 <HAL_I2C_IsDeviceReady+0x258>)
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003544:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2200      	movs	r2, #0
 800354e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fa20 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356c:	d103      	bne.n	8003576 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0b6      	b.n	80036e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003588:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800358a:	f7fe ffe7 	bl	800255c <HAL_GetTick>
 800358e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b02      	cmp	r3, #2
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035be:	e025      	b.n	800360c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe ffcc 	bl	800255c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <HAL_I2C_IsDeviceReady+0x13a>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	22a0      	movs	r2, #160	; 0xa0
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2ba0      	cmp	r3, #160	; 0xa0
 8003616:	d005      	beq.n	8003624 <HAL_I2C_IsDeviceReady+0x188>
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <HAL_I2C_IsDeviceReady+0x188>
 800361e:	7dbb      	ldrb	r3, [r7, #22]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0cd      	beq.n	80035c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d129      	bne.n	800368e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2319      	movs	r3, #25
 8003666:	2201      	movs	r2, #1
 8003668:	4921      	ldr	r1, [pc, #132]	; (80036f0 <HAL_I2C_IsDeviceReady+0x254>)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f994 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e036      	b.n	80036e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e02c      	b.n	80036e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2319      	movs	r3, #25
 80036ae:	2201      	movs	r2, #1
 80036b0:	490f      	ldr	r1, [pc, #60]	; (80036f0 <HAL_I2C_IsDeviceReady+0x254>)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f970 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e012      	b.n	80036e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	3301      	adds	r3, #1
 80036c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	f4ff af32 	bcc.w	8003536 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	00100002 	.word	0x00100002
 80036f4:	ffff0000 	.word	0xffff0000

080036f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	460b      	mov	r3, r1
 8003706:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d006      	beq.n	8003722 <I2C_MasterRequestWrite+0x2a>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d003      	beq.n	8003722 <I2C_MasterRequestWrite+0x2a>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003720:	d108      	bne.n	8003734 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e00b      	b.n	800374c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	2b12      	cmp	r3, #18
 800373a:	d107      	bne.n	800374c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800374a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f91d 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003772:	d103      	bne.n	800377c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e035      	b.n	80037ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003788:	d108      	bne.n	800379c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800378a:	897b      	ldrh	r3, [r7, #10]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003798:	611a      	str	r2, [r3, #16]
 800379a:	e01b      	b.n	80037d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800379c:	897b      	ldrh	r3, [r7, #10]
 800379e:	11db      	asrs	r3, r3, #7
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 0306 	and.w	r3, r3, #6
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f063 030f 	orn	r3, r3, #15
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <I2C_MasterRequestWrite+0xfc>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f966 	bl	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e010      	b.n	80037ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ca:	897b      	ldrh	r3, [r7, #10]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4907      	ldr	r1, [pc, #28]	; (80037f8 <I2C_MasterRequestWrite+0x100>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f956 	bl	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	00010008 	.word	0x00010008
 80037f8:	00010002 	.word	0x00010002

080037fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003820:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b08      	cmp	r3, #8
 8003826:	d006      	beq.n	8003836 <I2C_MasterRequestRead+0x3a>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d003      	beq.n	8003836 <I2C_MasterRequestRead+0x3a>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003834:	d108      	bne.n	8003848 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e00b      	b.n	8003860 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	2b11      	cmp	r3, #17
 800384e:	d107      	bne.n	8003860 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f893 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003886:	d103      	bne.n	8003890 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e079      	b.n	8003988 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800389c:	d108      	bne.n	80038b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800389e:	897b      	ldrh	r3, [r7, #10]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	611a      	str	r2, [r3, #16]
 80038ae:	e05f      	b.n	8003970 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038b0:	897b      	ldrh	r3, [r7, #10]
 80038b2:	11db      	asrs	r3, r3, #7
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f003 0306 	and.w	r3, r3, #6
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f063 030f 	orn	r3, r3, #15
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4930      	ldr	r1, [pc, #192]	; (8003990 <I2C_MasterRequestRead+0x194>)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f8dc 	bl	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e054      	b.n	8003988 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038de:	897b      	ldrh	r3, [r7, #10]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4929      	ldr	r1, [pc, #164]	; (8003994 <I2C_MasterRequestRead+0x198>)
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f8cc 	bl	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e044      	b.n	8003988 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003922:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f831 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394a:	d103      	bne.n	8003954 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e017      	b.n	8003988 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003958:	897b      	ldrh	r3, [r7, #10]
 800395a:	11db      	asrs	r3, r3, #7
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f003 0306 	and.w	r3, r3, #6
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f063 030e 	orn	r3, r3, #14
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4907      	ldr	r1, [pc, #28]	; (8003994 <I2C_MasterRequestRead+0x198>)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f888 	bl	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	00010008 	.word	0x00010008
 8003994:	00010002 	.word	0x00010002

08003998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a8:	e048      	b.n	8003a3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d044      	beq.n	8003a3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fe fdd3 	bl	800255c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d139      	bne.n	8003a3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	0c1b      	lsrs	r3, r3, #16
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d10d      	bne.n	80039ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	43da      	mvns	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4013      	ands	r3, r2
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	e00c      	b.n	8003a08 <I2C_WaitOnFlagUntilTimeout+0x70>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	43da      	mvns	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4013      	ands	r3, r2
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d116      	bne.n	8003a3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e023      	b.n	8003a84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	0c1b      	lsrs	r3, r3, #16
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d10d      	bne.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	43da      	mvns	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4013      	ands	r3, r2
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	e00c      	b.n	8003a7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d093      	beq.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9a:	e071      	b.n	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d123      	bne.n	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ac4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	f043 0204 	orr.w	r2, r3, #4
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e067      	b.n	8003bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d041      	beq.n	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afc:	f7fe fd2e 	bl	800255c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d302      	bcc.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d136      	bne.n	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10c      	bne.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	43da      	mvns	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e00b      	b.n	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e021      	b.n	8003bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	0c1b      	lsrs	r3, r3, #16
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d10c      	bne.n	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	43da      	mvns	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4013      	ands	r3, r2
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e00b      	b.n	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	43da      	mvns	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f47f af6d 	bne.w	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bd8:	e034      	b.n	8003c44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f8e3 	bl	8003da6 <I2C_IsAcknowledgeFailed>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e034      	b.n	8003c54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d028      	beq.n	8003c44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe fcb3 	bl	800255c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d11d      	bne.n	8003c44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d016      	beq.n	8003c44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f043 0220 	orr.w	r2, r3, #32
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e007      	b.n	8003c54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b80      	cmp	r3, #128	; 0x80
 8003c50:	d1c3      	bne.n	8003bda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c68:	e034      	b.n	8003cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f89b 	bl	8003da6 <I2C_IsAcknowledgeFailed>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e034      	b.n	8003ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d028      	beq.n	8003cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c82:	f7fe fc6b 	bl	800255c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d302      	bcc.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d11d      	bne.n	8003cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d016      	beq.n	8003cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f043 0220 	orr.w	r2, r3, #32
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e007      	b.n	8003ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d1c3      	bne.n	8003c6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cf8:	e049      	b.n	8003d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d119      	bne.n	8003d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0210 	mvn.w	r2, #16
 8003d10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e030      	b.n	8003d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3c:	f7fe fc0e 	bl	800255c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11d      	bne.n	8003d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d016      	beq.n	8003d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e007      	b.n	8003d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d1ae      	bne.n	8003cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbc:	d11b      	bne.n	8003df6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f043 0204 	orr.w	r2, r3, #4
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e272      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8087 	beq.w	8003f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e24:	4b92      	ldr	r3, [pc, #584]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d00c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e30:	4b8f      	ldr	r3, [pc, #572]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d112      	bne.n	8003e62 <HAL_RCC_OscConfig+0x5e>
 8003e3c:	4b8c      	ldr	r3, [pc, #560]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e48:	d10b      	bne.n	8003e62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4a:	4b89      	ldr	r3, [pc, #548]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d06c      	beq.n	8003f30 <HAL_RCC_OscConfig+0x12c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d168      	bne.n	8003f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e24c      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x76>
 8003e6c:	4b80      	ldr	r3, [pc, #512]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7f      	ldr	r2, [pc, #508]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e02e      	b.n	8003ed8 <HAL_RCC_OscConfig+0xd4>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x98>
 8003e82:	4b7b      	ldr	r3, [pc, #492]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7a      	ldr	r2, [pc, #488]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b78      	ldr	r3, [pc, #480]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a77      	ldr	r2, [pc, #476]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e01d      	b.n	8003ed8 <HAL_RCC_OscConfig+0xd4>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xbc>
 8003ea6:	4b72      	ldr	r3, [pc, #456]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a71      	ldr	r2, [pc, #452]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b6f      	ldr	r3, [pc, #444]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a6e      	ldr	r2, [pc, #440]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0xd4>
 8003ec0:	4b6b      	ldr	r3, [pc, #428]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6a      	ldr	r2, [pc, #424]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b68      	ldr	r3, [pc, #416]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a67      	ldr	r2, [pc, #412]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d013      	beq.n	8003f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe fb3c 	bl	800255c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fe fb38 	bl	800255c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e200      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b5d      	ldr	r3, [pc, #372]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xe4>
 8003f06:	e014      	b.n	8003f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fe fb28 	bl	800255c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fe fb24 	bl	800255c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1ec      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f22:	4b53      	ldr	r3, [pc, #332]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x10c>
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d063      	beq.n	8004006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f3e:	4b4c      	ldr	r3, [pc, #304]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f4a:	4b49      	ldr	r3, [pc, #292]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d11c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x18c>
 8003f56:	4b46      	ldr	r3, [pc, #280]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d116      	bne.n	8003f90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f62:	4b43      	ldr	r3, [pc, #268]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_RCC_OscConfig+0x176>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e1c0      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4939      	ldr	r1, [pc, #228]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8e:	e03a      	b.n	8004006 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f98:	4b36      	ldr	r3, [pc, #216]	; (8004074 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe fadd 	bl	800255c <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa6:	f7fe fad9 	bl	800255c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e1a1      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb8:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4927      	ldr	r1, [pc, #156]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]
 8003fd8:	e015      	b.n	8004006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <HAL_RCC_OscConfig+0x270>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fabc 	bl	800255c <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe8:	f7fe fab8 	bl	800255c <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e180      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d03a      	beq.n	8004088 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d019      	beq.n	800404e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_RCC_OscConfig+0x274>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004020:	f7fe fa9c 	bl	800255c <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004028:	f7fe fa98 	bl	800255c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e160      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <HAL_RCC_OscConfig+0x26c>)
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004046:	2001      	movs	r0, #1
 8004048:	f000 faba 	bl	80045c0 <RCC_Delay>
 800404c:	e01c      	b.n	8004088 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <HAL_RCC_OscConfig+0x274>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004054:	f7fe fa82 	bl	800255c <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405a:	e00f      	b.n	800407c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405c:	f7fe fa7e 	bl	800255c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d908      	bls.n	800407c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e146      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
 8004074:	42420000 	.word	0x42420000
 8004078:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	4b92      	ldr	r3, [pc, #584]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e9      	bne.n	800405c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80a6 	beq.w	80041e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409a:	4b8b      	ldr	r3, [pc, #556]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10d      	bne.n	80040c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a6:	4b88      	ldr	r3, [pc, #544]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	4a87      	ldr	r2, [pc, #540]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b0:	61d3      	str	r3, [r2, #28]
 80040b2:	4b85      	ldr	r3, [pc, #532]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c2:	4b82      	ldr	r3, [pc, #520]	; (80042cc <HAL_RCC_OscConfig+0x4c8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d118      	bne.n	8004100 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ce:	4b7f      	ldr	r3, [pc, #508]	; (80042cc <HAL_RCC_OscConfig+0x4c8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7e      	ldr	r2, [pc, #504]	; (80042cc <HAL_RCC_OscConfig+0x4c8>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040da:	f7fe fa3f 	bl	800255c <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e2:	f7fe fa3b 	bl	800255c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b64      	cmp	r3, #100	; 0x64
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e103      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	4b75      	ldr	r3, [pc, #468]	; (80042cc <HAL_RCC_OscConfig+0x4c8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x312>
 8004108:	4b6f      	ldr	r3, [pc, #444]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	4a6e      	ldr	r2, [pc, #440]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6213      	str	r3, [r2, #32]
 8004114:	e02d      	b.n	8004172 <HAL_RCC_OscConfig+0x36e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x334>
 800411e:	4b6a      	ldr	r3, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	4a69      	ldr	r2, [pc, #420]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	6213      	str	r3, [r2, #32]
 800412a:	4b67      	ldr	r3, [pc, #412]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	4a66      	ldr	r2, [pc, #408]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	6213      	str	r3, [r2, #32]
 8004136:	e01c      	b.n	8004172 <HAL_RCC_OscConfig+0x36e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b05      	cmp	r3, #5
 800413e:	d10c      	bne.n	800415a <HAL_RCC_OscConfig+0x356>
 8004140:	4b61      	ldr	r3, [pc, #388]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4a60      	ldr	r2, [pc, #384]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	6213      	str	r3, [r2, #32]
 800414c:	4b5e      	ldr	r3, [pc, #376]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	4a5d      	ldr	r2, [pc, #372]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6213      	str	r3, [r2, #32]
 8004158:	e00b      	b.n	8004172 <HAL_RCC_OscConfig+0x36e>
 800415a:	4b5b      	ldr	r3, [pc, #364]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	4a5a      	ldr	r2, [pc, #360]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	6213      	str	r3, [r2, #32]
 8004166:	4b58      	ldr	r3, [pc, #352]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	4a57      	ldr	r2, [pc, #348]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d015      	beq.n	80041a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417a:	f7fe f9ef 	bl	800255c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fe f9eb 	bl	800255c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0b1      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004198:	4b4b      	ldr	r3, [pc, #300]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ee      	beq.n	8004182 <HAL_RCC_OscConfig+0x37e>
 80041a4:	e014      	b.n	80041d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a6:	f7fe f9d9 	bl	800255c <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fe f9d5 	bl	800255c <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e09b      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c4:	4b40      	ldr	r3, [pc, #256]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ee      	bne.n	80041ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d6:	4b3c      	ldr	r3, [pc, #240]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	4a3b      	ldr	r2, [pc, #236]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8087 	beq.w	80042fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041ec:	4b36      	ldr	r3, [pc, #216]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 030c 	and.w	r3, r3, #12
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d061      	beq.n	80042bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d146      	bne.n	800428e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004200:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <HAL_RCC_OscConfig+0x4cc>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004206:	f7fe f9a9 	bl	800255c <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420e:	f7fe f9a5 	bl	800255c <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e06d      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f0      	bne.n	800420e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004234:	d108      	bne.n	8004248 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004236:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4921      	ldr	r1, [pc, #132]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004248:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a19      	ldr	r1, [r3, #32]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	430b      	orrs	r3, r1
 800425a:	491b      	ldr	r1, [pc, #108]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004260:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_RCC_OscConfig+0x4cc>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004266:	f7fe f979 	bl	800255c <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fe f975 	bl	800255c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e03d      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x46a>
 800428c:	e035      	b.n	80042fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <HAL_RCC_OscConfig+0x4cc>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fe f962 	bl	800255c <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429c:	f7fe f95e 	bl	800255c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e026      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x498>
 80042ba:	e01e      	b.n	80042fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d107      	bne.n	80042d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e019      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40007000 	.word	0x40007000
 80042d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_RCC_OscConfig+0x500>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d106      	bne.n	80042f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000

08004308 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0d0      	b.n	80044be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800431c:	4b6a      	ldr	r3, [pc, #424]	; (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d910      	bls.n	800434c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b67      	ldr	r3, [pc, #412]	; (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 0207 	bic.w	r2, r3, #7
 8004332:	4965      	ldr	r1, [pc, #404]	; (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433a:	4b63      	ldr	r3, [pc, #396]	; (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0b8      	b.n	80044be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d020      	beq.n	800439a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004364:	4b59      	ldr	r3, [pc, #356]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4a58      	ldr	r2, [pc, #352]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 800436a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800436e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800437c:	4b53      	ldr	r3, [pc, #332]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a52      	ldr	r2, [pc, #328]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004386:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004388:	4b50      	ldr	r3, [pc, #320]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	494d      	ldr	r1, [pc, #308]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d040      	beq.n	8004428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	4b47      	ldr	r3, [pc, #284]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d115      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e07f      	b.n	80044be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c6:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e073      	b.n	80044be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d6:	4b3d      	ldr	r3, [pc, #244]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e06b      	b.n	80044be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043e6:	4b39      	ldr	r3, [pc, #228]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f023 0203 	bic.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4936      	ldr	r1, [pc, #216]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f8:	f7fe f8b0 	bl	800255c <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fe f8ac 	bl	800255c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e053      	b.n	80044be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	4b2d      	ldr	r3, [pc, #180]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 020c 	and.w	r2, r3, #12
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	429a      	cmp	r2, r3
 8004426:	d1eb      	bne.n	8004400 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004428:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d210      	bcs.n	8004458 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 0207 	bic.w	r2, r3, #7
 800443e:	4922      	ldr	r1, [pc, #136]	; (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e032      	b.n	80044be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004464:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4916      	ldr	r1, [pc, #88]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	490e      	ldr	r1, [pc, #56]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004496:	f000 f821 	bl	80044dc <HAL_RCC_GetSysClockFreq>
 800449a:	4602      	mov	r2, r0
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	490a      	ldr	r1, [pc, #40]	; (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044a8:	5ccb      	ldrb	r3, [r1, r3]
 80044aa:	fa22 f303 	lsr.w	r3, r2, r3
 80044ae:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <HAL_RCC_ClockConfig+0x1cc>)
 80044b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <HAL_RCC_ClockConfig+0x1d0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe f80e 	bl	80024d8 <HAL_InitTick>

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40022000 	.word	0x40022000
 80044cc:	40021000 	.word	0x40021000
 80044d0:	08005b54 	.word	0x08005b54
 80044d4:	20000000 	.word	0x20000000
 80044d8:	20000004 	.word	0x20000004

080044dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCC_GetSysClockFreq+0x94>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b04      	cmp	r3, #4
 8004504:	d002      	beq.n	800450c <HAL_RCC_GetSysClockFreq+0x30>
 8004506:	2b08      	cmp	r3, #8
 8004508:	d003      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x36>
 800450a:	e027      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_GetSysClockFreq+0x98>)
 800450e:	613b      	str	r3, [r7, #16]
      break;
 8004510:	e027      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	0c9b      	lsrs	r3, r3, #18
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	4a17      	ldr	r2, [pc, #92]	; (8004578 <HAL_RCC_GetSysClockFreq+0x9c>)
 800451c:	5cd3      	ldrb	r3, [r2, r3]
 800451e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d010      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800452a:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_RCC_GetSysClockFreq+0x94>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	0c5b      	lsrs	r3, r3, #17
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	4a11      	ldr	r2, [pc, #68]	; (800457c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <HAL_RCC_GetSysClockFreq+0x98>)
 800453e:	fb03 f202 	mul.w	r2, r3, r2
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e004      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004550:	fb02 f303 	mul.w	r3, r2, r3
 8004554:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	613b      	str	r3, [r7, #16]
      break;
 800455a:	e002      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetSysClockFreq+0x98>)
 800455e:	613b      	str	r3, [r7, #16]
      break;
 8004560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004562:	693b      	ldr	r3, [r7, #16]
}
 8004564:	4618      	mov	r0, r3
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	007a1200 	.word	0x007a1200
 8004578:	08005b6c 	.word	0x08005b6c
 800457c:	08005b7c 	.word	0x08005b7c
 8004580:	003d0900 	.word	0x003d0900

08004584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004588:	4b02      	ldr	r3, [pc, #8]	; (8004594 <HAL_RCC_GetHCLKFreq+0x10>)
 800458a:	681b      	ldr	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	20000000 	.word	0x20000000

08004598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800459c:	f7ff fff2 	bl	8004584 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4903      	ldr	r1, [pc, #12]	; (80045bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	08005b64 	.word	0x08005b64

080045c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <RCC_Delay+0x34>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <RCC_Delay+0x38>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	0a5b      	lsrs	r3, r3, #9
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045dc:	bf00      	nop
  }
  while (Delay --);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	60fa      	str	r2, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f9      	bne.n	80045dc <RCC_Delay+0x1c>
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	20000000 	.word	0x20000000
 80045f8:	10624dd3 	.word	0x10624dd3

080045fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e041      	b.n	8004692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd fe10 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f000 fdde 	bl	80051fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e041      	b.n	8004730 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f839 	bl	8004738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 fd8f 	bl	80051fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr
	...

0800474c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_TIM_PWM_Start+0x24>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e022      	b.n	80047b6 <HAL_TIM_PWM_Start+0x6a>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d109      	bne.n	800478a <HAL_TIM_PWM_Start+0x3e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e015      	b.n	80047b6 <HAL_TIM_PWM_Start+0x6a>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d109      	bne.n	80047a4 <HAL_TIM_PWM_Start+0x58>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e008      	b.n	80047b6 <HAL_TIM_PWM_Start+0x6a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e05e      	b.n	800487c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_PWM_Start+0x82>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	e013      	b.n	80047f6 <HAL_TIM_PWM_Start+0xaa>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Start+0x92>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047dc:	e00b      	b.n	80047f6 <HAL_TIM_PWM_Start+0xaa>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0xa2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ec:	e003      	b.n	80047f6 <HAL_TIM_PWM_Start+0xaa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2201      	movs	r2, #1
 80047fc:	6839      	ldr	r1, [r7, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 f889 	bl	8005916 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <HAL_TIM_PWM_Start+0x138>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d107      	bne.n	800481e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a18      	ldr	r2, [pc, #96]	; (8004884 <HAL_TIM_PWM_Start+0x138>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_TIM_PWM_Start+0xfa>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d009      	beq.n	8004846 <HAL_TIM_PWM_Start+0xfa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a14      	ldr	r2, [pc, #80]	; (8004888 <HAL_TIM_PWM_Start+0x13c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_TIM_PWM_Start+0xfa>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a12      	ldr	r2, [pc, #72]	; (800488c <HAL_TIM_PWM_Start+0x140>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d111      	bne.n	800486a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b06      	cmp	r3, #6
 8004856:	d010      	beq.n	800487a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	e007      	b.n	800487a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800

08004890 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e041      	b.n	8004926 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f839 	bl	800492e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 fc94 	bl	80051fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <HAL_TIM_IC_Start_IT+0x1e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e013      	b.n	8004986 <HAL_TIM_IC_Start_IT+0x46>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d104      	bne.n	800496e <HAL_TIM_IC_Start_IT+0x2e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800496a:	b2db      	uxtb	r3, r3
 800496c:	e00b      	b.n	8004986 <HAL_TIM_IC_Start_IT+0x46>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d104      	bne.n	800497e <HAL_TIM_IC_Start_IT+0x3e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e003      	b.n	8004986 <HAL_TIM_IC_Start_IT+0x46>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004984:	b2db      	uxtb	r3, r3
 8004986:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <HAL_TIM_IC_Start_IT+0x58>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e013      	b.n	80049c0 <HAL_TIM_IC_Start_IT+0x80>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b04      	cmp	r3, #4
 800499c:	d104      	bne.n	80049a8 <HAL_TIM_IC_Start_IT+0x68>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e00b      	b.n	80049c0 <HAL_TIM_IC_Start_IT+0x80>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_IC_Start_IT+0x78>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e003      	b.n	80049c0 <HAL_TIM_IC_Start_IT+0x80>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049c2:	7bbb      	ldrb	r3, [r7, #14]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d102      	bne.n	80049ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049c8:	7b7b      	ldrb	r3, [r7, #13]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e0b8      	b.n	8004b44 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_IC_Start_IT+0xa2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e0:	e013      	b.n	8004a0a <HAL_TIM_IC_Start_IT+0xca>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d104      	bne.n	80049f2 <HAL_TIM_IC_Start_IT+0xb2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f0:	e00b      	b.n	8004a0a <HAL_TIM_IC_Start_IT+0xca>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d104      	bne.n	8004a02 <HAL_TIM_IC_Start_IT+0xc2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a00:	e003      	b.n	8004a0a <HAL_TIM_IC_Start_IT+0xca>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_IC_Start_IT+0xda>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a18:	e013      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x102>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_IC_Start_IT+0xea>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a28:	e00b      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x102>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_IC_Start_IT+0xfa>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a38:	e003      	b.n	8004a42 <HAL_TIM_IC_Start_IT+0x102>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d841      	bhi.n	8004acc <HAL_TIM_IC_Start_IT+0x18c>
 8004a48:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <HAL_TIM_IC_Start_IT+0x110>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004acd 	.word	0x08004acd
 8004a58:	08004acd 	.word	0x08004acd
 8004a5c:	08004acd 	.word	0x08004acd
 8004a60:	08004a97 	.word	0x08004a97
 8004a64:	08004acd 	.word	0x08004acd
 8004a68:	08004acd 	.word	0x08004acd
 8004a6c:	08004acd 	.word	0x08004acd
 8004a70:	08004aa9 	.word	0x08004aa9
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	08004acd 	.word	0x08004acd
 8004a7c:	08004acd 	.word	0x08004acd
 8004a80:	08004abb 	.word	0x08004abb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0202 	orr.w	r2, r2, #2
 8004a92:	60da      	str	r2, [r3, #12]
      break;
 8004a94:	e01d      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0204 	orr.w	r2, r2, #4
 8004aa4:	60da      	str	r2, [r3, #12]
      break;
 8004aa6:	e014      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0208 	orr.w	r2, r2, #8
 8004ab6:	60da      	str	r2, [r3, #12]
      break;
 8004ab8:	e00b      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0210 	orr.w	r2, r2, #16
 8004ac8:	60da      	str	r2, [r3, #12]
      break;
 8004aca:	e002      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d134      	bne.n	8004b42 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2201      	movs	r2, #1
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 ff18 	bl	8005916 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_TIM_IC_Start_IT+0x20c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00e      	beq.n	8004b0e <HAL_TIM_IC_Start_IT+0x1ce>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af8:	d009      	beq.n	8004b0e <HAL_TIM_IC_Start_IT+0x1ce>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <HAL_TIM_IC_Start_IT+0x210>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_TIM_IC_Start_IT+0x1ce>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <HAL_TIM_IC_Start_IT+0x214>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d111      	bne.n	8004b32 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b06      	cmp	r3, #6
 8004b1e:	d010      	beq.n	8004b42 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	e007      	b.n	8004b42 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800

08004b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d122      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d11b      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0202 	mvn.w	r2, #2
 8004b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fc fbb0 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8004ba0:	e005      	b.n	8004bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fb0e 	bl	80051c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fb14 	bl	80051d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d122      	bne.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0204 	mvn.w	r2, #4
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fb86 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fae4 	bl	80051c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 faea 	bl	80051d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0208 	mvn.w	r2, #8
 8004c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2204      	movs	r2, #4
 8004c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc fb5c 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 faba 	bl	80051c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fac0 	bl	80051d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0210 	mvn.w	r2, #16
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2208      	movs	r2, #8
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fb32 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa90 	bl	80051c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fa96 	bl	80051d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d107      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0201 	mvn.w	r2, #1
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa6b 	bl	80051b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fee4 	bl	8005ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d10e      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d107      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa5a 	bl	80051e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d10e      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d107      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0220 	mvn.w	r2, #32
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 feaf 	bl	8005abe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e088      	b.n	8004e98 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d11b      	bne.n	8004dcc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	6819      	ldr	r1, [r3, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f000 fc14 	bl	80055d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 020c 	bic.w	r2, r2, #12
 8004db6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	619a      	str	r2, [r3, #24]
 8004dca:	e060      	b.n	8004e8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d11c      	bne.n	8004e0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f000 fc7d 	bl	80056e0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699a      	ldr	r2, [r3, #24]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004df4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6999      	ldr	r1, [r3, #24]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	021a      	lsls	r2, r3, #8
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	619a      	str	r2, [r3, #24]
 8004e0a:	e040      	b.n	8004e8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d11b      	bne.n	8004e4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f000 fcc8 	bl	80057b6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 020c 	bic.w	r2, r2, #12
 8004e34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69d9      	ldr	r1, [r3, #28]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	61da      	str	r2, [r3, #28]
 8004e48:	e021      	b.n	8004e8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b0c      	cmp	r3, #12
 8004e4e:	d11c      	bne.n	8004e8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	6819      	ldr	r1, [r3, #0]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f000 fce4 	bl	800582c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69da      	ldr	r2, [r3, #28]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69d9      	ldr	r1, [r3, #28]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	021a      	lsls	r2, r3, #8
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	61da      	str	r2, [r3, #28]
 8004e88:	e001      	b.n	8004e8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e0ae      	b.n	800501c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b0c      	cmp	r3, #12
 8004eca:	f200 809f 	bhi.w	800500c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ece:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	0800500d 	.word	0x0800500d
 8004edc:	0800500d 	.word	0x0800500d
 8004ee0:	0800500d 	.word	0x0800500d
 8004ee4:	08004f49 	.word	0x08004f49
 8004ee8:	0800500d 	.word	0x0800500d
 8004eec:	0800500d 	.word	0x0800500d
 8004ef0:	0800500d 	.word	0x0800500d
 8004ef4:	08004f8b 	.word	0x08004f8b
 8004ef8:	0800500d 	.word	0x0800500d
 8004efc:	0800500d 	.word	0x0800500d
 8004f00:	0800500d 	.word	0x0800500d
 8004f04:	08004fcb 	.word	0x08004fcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f9d6 	bl	80052c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0208 	orr.w	r2, r2, #8
 8004f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0204 	bic.w	r2, r2, #4
 8004f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6999      	ldr	r1, [r3, #24]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	619a      	str	r2, [r3, #24]
      break;
 8004f46:	e064      	b.n	8005012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fa1c 	bl	800538c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6999      	ldr	r1, [r3, #24]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	021a      	lsls	r2, r3, #8
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	619a      	str	r2, [r3, #24]
      break;
 8004f88:	e043      	b.n	8005012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fa65 	bl	8005460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0208 	orr.w	r2, r2, #8
 8004fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0204 	bic.w	r2, r2, #4
 8004fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69d9      	ldr	r1, [r3, #28]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	61da      	str	r2, [r3, #28]
      break;
 8004fc8:	e023      	b.n	8005012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 faaf 	bl	8005534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69d9      	ldr	r1, [r3, #28]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	021a      	lsls	r2, r3, #8
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	61da      	str	r2, [r3, #28]
      break;
 800500a:	e002      	b.n	8005012 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	75fb      	strb	r3, [r7, #23]
      break;
 8005010:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800501a:	7dfb      	ldrb	r3, [r7, #23]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_TIM_ConfigClockSource+0x1c>
 800503c:	2302      	movs	r3, #2
 800503e:	e0b4      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x186>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800505e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005078:	d03e      	beq.n	80050f8 <HAL_TIM_ConfigClockSource+0xd4>
 800507a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507e:	f200 8087 	bhi.w	8005190 <HAL_TIM_ConfigClockSource+0x16c>
 8005082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005086:	f000 8086 	beq.w	8005196 <HAL_TIM_ConfigClockSource+0x172>
 800508a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508e:	d87f      	bhi.n	8005190 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b70      	cmp	r3, #112	; 0x70
 8005092:	d01a      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0xa6>
 8005094:	2b70      	cmp	r3, #112	; 0x70
 8005096:	d87b      	bhi.n	8005190 <HAL_TIM_ConfigClockSource+0x16c>
 8005098:	2b60      	cmp	r3, #96	; 0x60
 800509a:	d050      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x11a>
 800509c:	2b60      	cmp	r3, #96	; 0x60
 800509e:	d877      	bhi.n	8005190 <HAL_TIM_ConfigClockSource+0x16c>
 80050a0:	2b50      	cmp	r3, #80	; 0x50
 80050a2:	d03c      	beq.n	800511e <HAL_TIM_ConfigClockSource+0xfa>
 80050a4:	2b50      	cmp	r3, #80	; 0x50
 80050a6:	d873      	bhi.n	8005190 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d058      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x13a>
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d86f      	bhi.n	8005190 <HAL_TIM_ConfigClockSource+0x16c>
 80050b0:	2b30      	cmp	r3, #48	; 0x30
 80050b2:	d064      	beq.n	800517e <HAL_TIM_ConfigClockSource+0x15a>
 80050b4:	2b30      	cmp	r3, #48	; 0x30
 80050b6:	d86b      	bhi.n	8005190 <HAL_TIM_ConfigClockSource+0x16c>
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d060      	beq.n	800517e <HAL_TIM_ConfigClockSource+0x15a>
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d867      	bhi.n	8005190 <HAL_TIM_ConfigClockSource+0x16c>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d05c      	beq.n	800517e <HAL_TIM_ConfigClockSource+0x15a>
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d05a      	beq.n	800517e <HAL_TIM_ConfigClockSource+0x15a>
 80050c8:	e062      	b.n	8005190 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6899      	ldr	r1, [r3, #8]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f000 fbfd 	bl	80058d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	609a      	str	r2, [r3, #8]
      break;
 80050f6:	e04f      	b.n	8005198 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6899      	ldr	r1, [r3, #8]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f000 fbe6 	bl	80058d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800511a:	609a      	str	r2, [r3, #8]
      break;
 800511c:	e03c      	b.n	8005198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6859      	ldr	r1, [r3, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	461a      	mov	r2, r3
 800512c:	f000 faaa 	bl	8005684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2150      	movs	r1, #80	; 0x50
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fbb4 	bl	80058a4 <TIM_ITRx_SetConfig>
      break;
 800513c:	e02c      	b.n	8005198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6859      	ldr	r1, [r3, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	461a      	mov	r2, r3
 800514c:	f000 fb04 	bl	8005758 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2160      	movs	r1, #96	; 0x60
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fba4 	bl	80058a4 <TIM_ITRx_SetConfig>
      break;
 800515c:	e01c      	b.n	8005198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6859      	ldr	r1, [r3, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	461a      	mov	r2, r3
 800516c:	f000 fa8a 	bl	8005684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2140      	movs	r1, #64	; 0x40
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fb94 	bl	80058a4 <TIM_ITRx_SetConfig>
      break;
 800517c:	e00c      	b.n	8005198 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f000 fb8b 	bl	80058a4 <TIM_ITRx_SetConfig>
      break;
 800518e:	e003      	b.n	8005198 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
      break;
 8005194:	e000      	b.n	8005198 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
	...

080051fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <TIM_Base_SetConfig+0xb8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_Base_SetConfig+0x30>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d007      	beq.n	800522c <TIM_Base_SetConfig+0x30>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <TIM_Base_SetConfig+0xbc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0x30>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a25      	ldr	r2, [pc, #148]	; (80052bc <TIM_Base_SetConfig+0xc0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d108      	bne.n	800523e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <TIM_Base_SetConfig+0xb8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_Base_SetConfig+0x62>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524c:	d007      	beq.n	800525e <TIM_Base_SetConfig+0x62>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <TIM_Base_SetConfig+0xbc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_Base_SetConfig+0x62>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a18      	ldr	r2, [pc, #96]	; (80052bc <TIM_Base_SetConfig+0xc0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d108      	bne.n	8005270 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a07      	ldr	r2, [pc, #28]	; (80052b4 <TIM_Base_SetConfig+0xb8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d103      	bne.n	80052a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	615a      	str	r2, [r3, #20]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800

080052c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f023 0201 	bic.w	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 0302 	bic.w	r3, r3, #2
 8005308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <TIM_OC1_SetConfig+0xc8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10c      	bne.n	8005336 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0308 	bic.w	r3, r3, #8
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 0304 	bic.w	r3, r3, #4
 8005334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <TIM_OC1_SetConfig+0xc8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d111      	bne.n	8005362 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	621a      	str	r2, [r3, #32]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40012c00 	.word	0x40012c00

0800538c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f023 0210 	bic.w	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0320 	bic.w	r3, r3, #32
 80053d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1d      	ldr	r2, [pc, #116]	; (800545c <TIM_OC2_SetConfig+0xd0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10d      	bne.n	8005408 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005406:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a14      	ldr	r2, [pc, #80]	; (800545c <TIM_OC2_SetConfig+0xd0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d113      	bne.n	8005438 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	40012c00 	.word	0x40012c00

08005460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0303 	bic.w	r3, r3, #3
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1d      	ldr	r2, [pc, #116]	; (8005530 <TIM_OC3_SetConfig+0xd0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d10d      	bne.n	80054da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a14      	ldr	r2, [pc, #80]	; (8005530 <TIM_OC3_SetConfig+0xd0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d113      	bne.n	800550a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40012c00 	.word	0x40012c00

08005534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800557e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	031b      	lsls	r3, r3, #12
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0f      	ldr	r2, [pc, #60]	; (80055cc <TIM_OC4_SetConfig+0x98>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d109      	bne.n	80055a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800559a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	019b      	lsls	r3, r3, #6
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	40012c00 	.word	0x40012c00

080055d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f023 0201 	bic.w	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4a1f      	ldr	r2, [pc, #124]	; (8005678 <TIM_TI1_SetConfig+0xa8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_TI1_SetConfig+0x46>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005604:	d007      	beq.n	8005616 <TIM_TI1_SetConfig+0x46>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a1c      	ldr	r2, [pc, #112]	; (800567c <TIM_TI1_SetConfig+0xac>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_TI1_SetConfig+0x46>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <TIM_TI1_SetConfig+0xb0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <TIM_TI1_SetConfig+0x4a>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <TIM_TI1_SetConfig+0x4c>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e003      	b.n	800563a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	b2db      	uxtb	r3, r3
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f023 030a 	bic.w	r3, r3, #10
 8005654:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f003 030a 	and.w	r3, r3, #10
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr
 8005678:	40012c00 	.word	0x40012c00
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800

08005684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0201 	bic.w	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f023 030a 	bic.w	r3, r3, #10
 80056c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f023 0210 	bic.w	r2, r3, #16
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800571e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	031b      	lsls	r3, r3, #12
 8005724:	b29b      	uxth	r3, r3
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005732:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0210 	bic.w	r2, r3, #16
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	031b      	lsls	r3, r3, #12
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005794:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr

080057b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b087      	sub	sp, #28
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005806:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005858:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800586a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	031b      	lsls	r3, r3, #12
 8005870:	b29b      	uxth	r3, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800587e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	031b      	lsls	r3, r3, #12
 8005884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr

080058a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f043 0307 	orr.w	r3, r3, #7
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	609a      	str	r2, [r3, #8]
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	021a      	lsls	r2, r3, #8
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4313      	orrs	r3, r2
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	609a      	str	r2, [r3, #8]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr

08005916 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005916:	b480      	push	{r7}
 8005918:	b087      	sub	sp, #28
 800591a:	af00      	add	r7, sp, #0
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	2201      	movs	r2, #1
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	43db      	mvns	r3, r3
 8005938:	401a      	ands	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a1a      	ldr	r2, [r3, #32]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	431a      	orrs	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr
	...

08005960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e046      	b.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00e      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c4:	d009      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a10      	ldr	r2, [pc, #64]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d10c      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800

08005a1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e03d      	b.n	8005ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc80      	pop	{r7}
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr
	...

08005ae4 <__libc_init_array>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	2600      	movs	r6, #0
 8005ae8:	4d0c      	ldr	r5, [pc, #48]	; (8005b1c <__libc_init_array+0x38>)
 8005aea:	4c0d      	ldr	r4, [pc, #52]	; (8005b20 <__libc_init_array+0x3c>)
 8005aec:	1b64      	subs	r4, r4, r5
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	42a6      	cmp	r6, r4
 8005af2:	d109      	bne.n	8005b08 <__libc_init_array+0x24>
 8005af4:	f000 f822 	bl	8005b3c <_init>
 8005af8:	2600      	movs	r6, #0
 8005afa:	4d0a      	ldr	r5, [pc, #40]	; (8005b24 <__libc_init_array+0x40>)
 8005afc:	4c0a      	ldr	r4, [pc, #40]	; (8005b28 <__libc_init_array+0x44>)
 8005afe:	1b64      	subs	r4, r4, r5
 8005b00:	10a4      	asrs	r4, r4, #2
 8005b02:	42a6      	cmp	r6, r4
 8005b04:	d105      	bne.n	8005b12 <__libc_init_array+0x2e>
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0c:	4798      	blx	r3
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7ee      	b.n	8005af0 <__libc_init_array+0xc>
 8005b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b16:	4798      	blx	r3
 8005b18:	3601      	adds	r6, #1
 8005b1a:	e7f2      	b.n	8005b02 <__libc_init_array+0x1e>
 8005b1c:	08005b80 	.word	0x08005b80
 8005b20:	08005b80 	.word	0x08005b80
 8005b24:	08005b80 	.word	0x08005b80
 8005b28:	08005b84 	.word	0x08005b84

08005b2c <memset>:
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	4402      	add	r2, r0
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d100      	bne.n	8005b36 <memset+0xa>
 8005b34:	4770      	bx	lr
 8005b36:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3a:	e7f9      	b.n	8005b30 <memset+0x4>

08005b3c <_init>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr

08005b48 <_fini>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr
