
Joyce_Rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e14  08003e14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e14  08003e14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e14  08003e14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000010  08003e28  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003e28  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000889a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015bd  00000000  00000000  000288cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00029e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165d8  00000000  00000000  0002b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009776  00000000  00000000  00041690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841fc  00000000  00000000  0004ae06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000285c  00000000  00000000  000cf054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dd8 	.word	0x08003dd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003dd8 	.word	0x08003dd8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_f2iz>:
 8000ba4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ba8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bac:	d30f      	bcc.n	8000bce <__aeabi_f2iz+0x2a>
 8000bae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bb6:	d90d      	bls.n	8000bd4 <__aeabi_f2iz+0x30>
 8000bb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc8:	bf18      	it	ne
 8000bca:	4240      	negne	r0, r0
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr
 8000bd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bd8:	d101      	bne.n	8000bde <__aeabi_f2iz+0x3a>
 8000bda:	0242      	lsls	r2, r0, #9
 8000bdc:	d105      	bne.n	8000bea <__aeabi_f2iz+0x46>
 8000bde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000be2:	bf08      	it	eq
 8000be4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	69b9      	ldr	r1, [r7, #24]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	1a8a      	subs	r2, r1, r2
 8000c0a:	fb03 f202 	mul.w	r2, r3, r2
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	fb92 f2f3 	sdiv	r2, r2, r3
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	4413      	add	r3, r2
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
	...

08000c28 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000c28:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000c2c:	b095      	sub	sp, #84	; 0x54
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (htim->Instance == TIM2) {
 8000c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c3a:	f040 8192 	bne.w	8000f62 <HAL_TIM_IC_CaptureCallback+0x33a>
		switch (htim->Channel) {
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	7f1b      	ldrb	r3, [r3, #28]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	f200 818e 	bhi.w	8000f66 <HAL_TIM_IC_CaptureCallback+0x33e>
 8000c4a:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c71 	.word	0x08000c71
 8000c54:	08000d25 	.word	0x08000d25
 8000c58:	08000f67 	.word	0x08000f67
 8000c5c:	08000dd3 	.word	0x08000dd3
 8000c60:	08000f67 	.word	0x08000f67
 8000c64:	08000f67 	.word	0x08000f67
 8000c68:	08000f67 	.word	0x08000f67
 8000c6c:	08000e81 	.word	0x08000e81
		case HAL_TIM_ACTIVE_CHANNEL_1:
			// Kanal 1 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC1P) == 0) {
 8000c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d113      	bne.n	8000ca6 <HAL_TIM_IC_CaptureCallback+0x7e>
				ch1_rising = TIM2->CCR1; // yukselen kenar degerini kaydet
 8000c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c84:	2200      	movs	r2, #0
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
 8000c88:	647a      	str	r2, [r7, #68]	; 0x44
 8000c8a:	4b8b      	ldr	r3, [pc, #556]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000c8c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8000c90:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC1P; // polariteyi düsen kenar olarak degistir
 8000c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c98:	6a1b      	ldr	r3, [r3, #32]
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	6213      	str	r3, [r2, #32]
				if (pre_ch1 < 2010 && pre_ch1 > 990) {
					ch1 = pre_ch1;
				}
				TIM2->CCER &= ~TIM_CCER_CC1P; // polariteyi yukselen kenar olarak ayarla
			}
			break;
 8000ca4:	e160      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
				ch1_falling = TIM2->CCR1;
 8000ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	2200      	movs	r2, #0
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000cb2:	4b82      	ldr	r3, [pc, #520]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x294>)
 8000cb4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000cb8:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch1 = ch1_falling - ch1_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8000cbc:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x294>)
 8000cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc2:	4b7d      	ldr	r3, [pc, #500]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	633c      	str	r4, [r7, #48]	; 0x30
 8000ccc:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8000cd2:	4b7b      	ldr	r3, [pc, #492]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000cd4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000cd8:	e9c3 1200 	strd	r1, r2, [r3]
				if (pre_ch1 < 0) {
 8000cdc:	4b78      	ldr	r3, [pc, #480]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch1 < 2010 && pre_ch1 > 990) {
 8000ce2:	4b77      	ldr	r3, [pc, #476]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f240 71da 	movw	r1, #2010	; 0x7da
 8000cec:	428a      	cmp	r2, r1
 8000cee:	f173 0300 	sbcs.w	r3, r3, #0
 8000cf2:	d20e      	bcs.n	8000d12 <HAL_TIM_IC_CaptureCallback+0xea>
 8000cf4:	4b72      	ldr	r3, [pc, #456]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f240 31df 	movw	r1, #991	; 0x3df
 8000cfe:	428a      	cmp	r2, r1
 8000d00:	f173 0300 	sbcs.w	r3, r3, #0
 8000d04:	d305      	bcc.n	8000d12 <HAL_TIM_IC_CaptureCallback+0xea>
					ch1 = pre_ch1;
 8000d06:	4b6e      	ldr	r3, [pc, #440]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	496d      	ldr	r1, [pc, #436]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8000d0e:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC1P; // polariteyi yukselen kenar olarak ayarla
 8000d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1c:	f023 0302 	bic.w	r3, r3, #2
 8000d20:	6213      	str	r3, [r2, #32]
			break;
 8000d22:	e121      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
		case HAL_TIM_ACTIVE_CHANNEL_2:
			// Kanal 2 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC2P) == 0) {
 8000d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	f003 0320 	and.w	r3, r3, #32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d113      	bne.n	8000d5a <HAL_TIM_IC_CaptureCallback+0x132>
				ch2_rising = TIM2->CCR2; // yukselen kenar degerini kaydet
 8000d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d38:	2200      	movs	r2, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d3e:	4b62      	ldr	r3, [pc, #392]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8000d40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000d44:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC2P; // polariteyi düsen kenar olarak degistir
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6213      	str	r3, [r2, #32]
					ch2 = pre_ch2;
				}
				TIM2->CCER &= ~TIM_CCER_CC2P; // polariteyi yukselen kenar olarak ayarla
			}

			break;
 8000d58:	e106      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
				ch2_falling = TIM2->CCR2;
 8000d5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d60:	2200      	movs	r2, #0
 8000d62:	623b      	str	r3, [r7, #32]
 8000d64:	627a      	str	r2, [r7, #36]	; 0x24
 8000d66:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000d68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000d6c:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch2 = ch2_falling - ch2_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8000d70:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8000d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d76:	4b54      	ldr	r3, [pc, #336]	; (8000ec8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	ebb0 0a02 	subs.w	sl, r0, r2
 8000d80:	eb61 0b03 	sbc.w	fp, r1, r3
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000d86:	e9c3 ab00 	strd	sl, fp, [r3]
				if (pre_ch2 < 0) {
 8000d8a:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch2 < 2010 && pre_ch2 > 990) {
 8000d90:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	f240 71da 	movw	r1, #2010	; 0x7da
 8000d9a:	428a      	cmp	r2, r1
 8000d9c:	f173 0300 	sbcs.w	r3, r3, #0
 8000da0:	d20e      	bcs.n	8000dc0 <HAL_TIM_IC_CaptureCallback+0x198>
 8000da2:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da8:	f240 31df 	movw	r1, #991	; 0x3df
 8000dac:	428a      	cmp	r2, r1
 8000dae:	f173 0300 	sbcs.w	r3, r3, #0
 8000db2:	d305      	bcc.n	8000dc0 <HAL_TIM_IC_CaptureCallback+0x198>
					ch2 = pre_ch2;
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8000db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dba:	4946      	ldr	r1, [pc, #280]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8000dbc:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC2P; // polariteyi yukselen kenar olarak ayarla
 8000dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dca:	f023 0320 	bic.w	r3, r3, #32
 8000dce:	6213      	str	r3, [r2, #32]
			break;
 8000dd0:	e0ca      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
		case HAL_TIM_ACTIVE_CHANNEL_3:
			// Kanal 3 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC3P) == 0) {
 8000dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d113      	bne.n	8000e08 <HAL_TIM_IC_CaptureCallback+0x1e0>
				ch3_rising = TIM2->CCR3; // yukselen kenar degerini kaydet
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de6:	2200      	movs	r2, #0
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	61fa      	str	r2, [r7, #28]
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8000dee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000df2:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC3P; // polariteyi düsen kenar olarak degistir
 8000df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e04:	6213      	str	r3, [r2, #32]
					ch3 = pre_ch3;
				}
				TIM2->CCER &= ~TIM_CCER_CC3P; // polariteyi yukselen kenar olarak ayarla
			}

			break;
 8000e06:	e0af      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
				ch3_falling = TIM2->CCR3;
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0e:	2200      	movs	r2, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	617a      	str	r2, [r7, #20]
 8000e14:	4b31      	ldr	r3, [pc, #196]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8000e16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e1a:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch3 = ch3_falling - ch3_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8000e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	ebb0 0802 	subs.w	r8, r0, r2
 8000e2e:	eb61 0903 	sbc.w	r9, r1, r3
 8000e32:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e34:	e9c3 8900 	strd	r8, r9, [r3]
				if (pre_ch3 < 0) {
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch3 < 2010 && pre_ch3 > 990) {
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e44:	f240 71da 	movw	r1, #2010	; 0x7da
 8000e48:	428a      	cmp	r2, r1
 8000e4a:	f173 0300 	sbcs.w	r3, r3, #0
 8000e4e:	d20e      	bcs.n	8000e6e <HAL_TIM_IC_CaptureCallback+0x246>
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f240 31df 	movw	r1, #991	; 0x3df
 8000e5a:	428a      	cmp	r2, r1
 8000e5c:	f173 0300 	sbcs.w	r3, r3, #0
 8000e60:	d305      	bcc.n	8000e6e <HAL_TIM_IC_CaptureCallback+0x246>
					ch3 = pre_ch3;
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	491e      	ldr	r1, [pc, #120]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8000e6a:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC3P; // polariteyi yukselen kenar olarak ayarla
 8000e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e7c:	6213      	str	r3, [r2, #32]
			break;
 8000e7e:	e073      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
		case HAL_TIM_ACTIVE_CHANNEL_4:
			// Kanal 4 için işlemler
			if ((TIM2->CCER & TIM_CCER_CC4P) == 0) {
 8000e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d12e      	bne.n	8000eec <HAL_TIM_IC_CaptureCallback+0x2c4>
				ch4_rising = TIM2->CCR4; // yukselen kenar degerini kaydet
 8000e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	2200      	movs	r2, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	60fa      	str	r2, [r7, #12]
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8000e9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000ea0:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC4P; // polariteyi düsen kenar olarak degistir
 8000ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eb2:	6213      	str	r3, [r2, #32]
					ch4 = pre_ch4;
				}
				TIM2->CCER &= ~TIM_CCER_CC4P; // polariteyi yukselen kenar olarak ayarla
			}

			break;
 8000eb4:	e058      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
 8000eb6:	bf00      	nop
 8000eb8:	200000c0 	.word	0x200000c0
 8000ebc:	200000c8 	.word	0x200000c8
 8000ec0:	200000d8 	.word	0x200000d8
 8000ec4:	200000d0 	.word	0x200000d0
 8000ec8:	200000e0 	.word	0x200000e0
 8000ecc:	200000e8 	.word	0x200000e8
 8000ed0:	200000f8 	.word	0x200000f8
 8000ed4:	200000f0 	.word	0x200000f0
 8000ed8:	20000100 	.word	0x20000100
 8000edc:	20000108 	.word	0x20000108
 8000ee0:	20000118 	.word	0x20000118
 8000ee4:	20000110 	.word	0x20000110
 8000ee8:	20000120 	.word	0x20000120
				ch4_falling = TIM2->CCR4;
 8000eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8000efa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000efe:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch4 = ch4_falling - ch4_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8000f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0x350>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	1a84      	subs	r4, r0, r2
 8000f10:	eb61 0503 	sbc.w	r5, r1, r3
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f16:	e9c3 4500 	strd	r4, r5, [r3]
				if (pre_ch4 < 0) {
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch4 < 2010 && pre_ch4 > 990) {
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f240 71da 	movw	r1, #2010	; 0x7da
 8000f2a:	428a      	cmp	r2, r1
 8000f2c:	f173 0300 	sbcs.w	r3, r3, #0
 8000f30:	d20e      	bcs.n	8000f50 <HAL_TIM_IC_CaptureCallback+0x328>
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f240 31df 	movw	r1, #991	; 0x3df
 8000f3c:	428a      	cmp	r2, r1
 8000f3e:	f173 0300 	sbcs.w	r3, r3, #0
 8000f42:	d305      	bcc.n	8000f50 <HAL_TIM_IC_CaptureCallback+0x328>
					ch4 = pre_ch4;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x354>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0x358>)
 8000f4c:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC4P; // polariteyi yukselen kenar olarak ayarla
 8000f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f5e:	6213      	str	r3, [r2, #32]
			break;
 8000f60:	e002      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
		default:
			break;
		}
	}
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x340>
			break;
 8000f66:	bf00      	nop
}
 8000f68:	bf00      	nop
 8000f6a:	3754      	adds	r7, #84	; 0x54
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000f72:	4770      	bx	lr
 8000f74:	20000128 	.word	0x20000128
 8000f78:	20000120 	.word	0x20000120
 8000f7c:	20000138 	.word	0x20000138
 8000f80:	20000130 	.word	0x20000130

08000f84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f8a:	f000 fd77 	bl	8001a7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f8e:	f000 fa49 	bl	8001424 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f92:	f000 fbcb 	bl	800172c <MX_GPIO_Init>
	MX_TIM1_Init();
 8000f96:	f000 fa8b 	bl	80014b0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000f9a:	f000 fb37 	bl	800160c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	48a8      	ldr	r0, [pc, #672]	; (8001244 <main+0x2c0>)
 8000fa2:	f001 fe1b 	bl	8002bdc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	48a6      	ldr	r0, [pc, #664]	; (8001244 <main+0x2c0>)
 8000faa:	f001 fe17 	bl	8002bdc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000fae:	2108      	movs	r1, #8
 8000fb0:	48a4      	ldr	r0, [pc, #656]	; (8001244 <main+0x2c0>)
 8000fb2:	f001 fe13 	bl	8002bdc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000fb6:	210c      	movs	r1, #12
 8000fb8:	48a2      	ldr	r0, [pc, #648]	; (8001244 <main+0x2c0>)
 8000fba:	f001 fe0f 	bl	8002bdc <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	48a1      	ldr	r0, [pc, #644]	; (8001248 <main+0x2c4>)
 8000fc2:	f001 fd11 	bl	80029e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	489f      	ldr	r0, [pc, #636]	; (8001248 <main+0x2c4>)
 8000fca:	f001 fd0d 	bl	80029e8 <HAL_TIM_PWM_Start>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */ //

		if (ch3<=1500) {
 8000fce:	4b9f      	ldr	r3, [pc, #636]	; (800124c <main+0x2c8>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f240 51dd 	movw	r1, #1501	; 0x5dd
 8000fd8:	428a      	cmp	r2, r1
 8000fda:	f173 0300 	sbcs.w	r3, r3, #0
 8000fde:	d212      	bcs.n	8001006 <main+0x82>
			maxpoint = 1900;
 8000fe0:	4b9b      	ldr	r3, [pc, #620]	; (8001250 <main+0x2cc>)
 8000fe2:	f240 726c 	movw	r2, #1900	; 0x76c
 8000fe6:	601a      	str	r2, [r3, #0]
			midpoint = 1500;
 8000fe8:	4b9a      	ldr	r3, [pc, #616]	; (8001254 <main+0x2d0>)
 8000fea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fee:	601a      	str	r2, [r3, #0]
			minpoint = 1100;
 8000ff0:	4b99      	ldr	r3, [pc, #612]	; (8001258 <main+0x2d4>)
 8000ff2:	f240 424c 	movw	r2, #1100	; 0x44c
 8000ff6:	601a      	str	r2, [r3, #0]
			deadband_scale=16;
 8000ff8:	4b98      	ldr	r3, [pc, #608]	; (800125c <main+0x2d8>)
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	601a      	str	r2, [r3, #0]
			motor_startup_deadband = 100;
 8000ffe:	4b98      	ldr	r3, [pc, #608]	; (8001260 <main+0x2dc>)
 8001000:	2264      	movs	r2, #100	; 0x64
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	e011      	b.n	800102a <main+0xa6>
		} else {
			maxpoint = 1900;
 8001006:	4b92      	ldr	r3, [pc, #584]	; (8001250 <main+0x2cc>)
 8001008:	f240 726c 	movw	r2, #1900	; 0x76c
 800100c:	601a      	str	r2, [r3, #0]
			midpoint = 1700;
 800100e:	4b91      	ldr	r3, [pc, #580]	; (8001254 <main+0x2d0>)
 8001010:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001014:	601a      	str	r2, [r3, #0]
			minpoint = 1500;
 8001016:	4b90      	ldr	r3, [pc, #576]	; (8001258 <main+0x2d4>)
 8001018:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800101c:	601a      	str	r2, [r3, #0]
			deadband_scale=32;
 800101e:	4b8f      	ldr	r3, [pc, #572]	; (800125c <main+0x2d8>)
 8001020:	2220      	movs	r2, #32
 8001022:	601a      	str	r2, [r3, #0]
			motor_startup_deadband = 100;
 8001024:	4b8e      	ldr	r3, [pc, #568]	; (8001260 <main+0x2dc>)
 8001026:	2264      	movs	r2, #100	; 0x64
 8001028:	601a      	str	r2, [r3, #0]
		}

		ch1_smooth -= ch1_smooth / 20.0;
 800102a:	4b8e      	ldr	r3, [pc, #568]	; (8001264 <main+0x2e0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f9f0 	bl	8000414 <__aeabi_f2d>
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b8b      	ldr	r3, [pc, #556]	; (8001268 <main+0x2e4>)
 800103a:	f7ff fb6d 	bl	8000718 <__aeabi_ddiv>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4614      	mov	r4, r2
 8001044:	461d      	mov	r5, r3
 8001046:	4b87      	ldr	r3, [pc, #540]	; (8001264 <main+0x2e0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f9e2 	bl	8000414 <__aeabi_f2d>
 8001050:	4622      	mov	r2, r4
 8001052:	462b      	mov	r3, r5
 8001054:	f7ff f87e 	bl	8000154 <__aeabi_dsub>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fc42 	bl	80008e8 <__aeabi_d2f>
 8001064:	4603      	mov	r3, r0
 8001066:	4a7f      	ldr	r2, [pc, #508]	; (8001264 <main+0x2e0>)
 8001068:	6013      	str	r3, [r2, #0]
		ch1_smooth += ch1 / 20.0;
 800106a:	4b80      	ldr	r3, [pc, #512]	; (800126c <main+0x2e8>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff f9f0 	bl	8000458 <__aeabi_ul2d>
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b7a      	ldr	r3, [pc, #488]	; (8001268 <main+0x2e4>)
 800107e:	f7ff fb4b 	bl	8000718 <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4614      	mov	r4, r2
 8001088:	461d      	mov	r5, r3
 800108a:	4b76      	ldr	r3, [pc, #472]	; (8001264 <main+0x2e0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f9c0 	bl	8000414 <__aeabi_f2d>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4620      	mov	r0, r4
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff f85c 	bl	8000158 <__adddf3>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fc1e 	bl	80008e8 <__aeabi_d2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a6d      	ldr	r2, [pc, #436]	; (8001264 <main+0x2e0>)
 80010b0:	6013      	str	r3, [r2, #0]

		ch2_smooth -= ch2_smooth / 20.0;
 80010b2:	4b6f      	ldr	r3, [pc, #444]	; (8001270 <main+0x2ec>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f9ac 	bl	8000414 <__aeabi_f2d>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b69      	ldr	r3, [pc, #420]	; (8001268 <main+0x2e4>)
 80010c2:	f7ff fb29 	bl	8000718 <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4614      	mov	r4, r2
 80010cc:	461d      	mov	r5, r3
 80010ce:	4b68      	ldr	r3, [pc, #416]	; (8001270 <main+0x2ec>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f99e 	bl	8000414 <__aeabi_f2d>
 80010d8:	4622      	mov	r2, r4
 80010da:	462b      	mov	r3, r5
 80010dc:	f7ff f83a 	bl	8000154 <__aeabi_dsub>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fbfe 	bl	80008e8 <__aeabi_d2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a60      	ldr	r2, [pc, #384]	; (8001270 <main+0x2ec>)
 80010f0:	6013      	str	r3, [r2, #0]
		ch2_smooth += ch2 / 20.0;
 80010f2:	4b60      	ldr	r3, [pc, #384]	; (8001274 <main+0x2f0>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff f9ac 	bl	8000458 <__aeabi_ul2d>
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b58      	ldr	r3, [pc, #352]	; (8001268 <main+0x2e4>)
 8001106:	f7ff fb07 	bl	8000718 <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4614      	mov	r4, r2
 8001110:	461d      	mov	r5, r3
 8001112:	4b57      	ldr	r3, [pc, #348]	; (8001270 <main+0x2ec>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f97c 	bl	8000414 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff f818 	bl	8000158 <__adddf3>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fbda 	bl	80008e8 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <main+0x2ec>)
 8001138:	6013      	str	r3, [r2, #0]

		left_output = (ch2_smooth + (ch1_smooth - 1500));
 800113a:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <main+0x2e0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	494e      	ldr	r1, [pc, #312]	; (8001278 <main+0x2f4>)
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fc25 	bl	8000990 <__aeabi_fsub>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b49      	ldr	r3, [pc, #292]	; (8001270 <main+0x2ec>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	4610      	mov	r0, r2
 8001152:	f7ff fc1f 	bl	8000994 <__addsf3>
 8001156:	4603      	mov	r3, r0
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd23 	bl	8000ba4 <__aeabi_f2iz>
 800115e:	4603      	mov	r3, r0
 8001160:	4a46      	ldr	r2, [pc, #280]	; (800127c <main+0x2f8>)
 8001162:	6013      	str	r3, [r2, #0]
		if (left_output < midpoint - (deadband_scale / 4))
 8001164:	4b3d      	ldr	r3, [pc, #244]	; (800125c <main+0x2d8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	da00      	bge.n	800116e <main+0x1ea>
 800116c:	3303      	adds	r3, #3
 800116e:	109b      	asrs	r3, r3, #2
 8001170:	425b      	negs	r3, r3
 8001172:	461a      	mov	r2, r3
 8001174:	4b37      	ldr	r3, [pc, #220]	; (8001254 <main+0x2d0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	441a      	add	r2, r3
 800117a:	4b40      	ldr	r3, [pc, #256]	; (800127c <main+0x2f8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	dd05      	ble.n	800118e <main+0x20a>
			HAL_GPIO_WritePin(GPIOA, left_motor_direction_Pin, SET);
 8001182:	2201      	movs	r2, #1
 8001184:	2120      	movs	r1, #32
 8001186:	483e      	ldr	r0, [pc, #248]	; (8001280 <main+0x2fc>)
 8001188:	f000 ff90 	bl	80020ac <HAL_GPIO_WritePin>
 800118c:	e004      	b.n	8001198 <main+0x214>
		else
			HAL_GPIO_WritePin(GPIOA, left_motor_direction_Pin, RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	483b      	ldr	r0, [pc, #236]	; (8001280 <main+0x2fc>)
 8001194:	f000 ff8a 	bl	80020ac <HAL_GPIO_WritePin>

		if (abs(left_output - midpoint) < deadband_scale)
 8001198:	4b38      	ldr	r3, [pc, #224]	; (800127c <main+0x2f8>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <main+0x2d0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <main+0x2d8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	da03      	bge.n	80011ba <main+0x236>
			left_output = midpoint;  //orta ölübant  (abs() -> mutlak değer)
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <main+0x2d0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a31      	ldr	r2, [pc, #196]	; (800127c <main+0x2f8>)
 80011b8:	6013      	str	r3, [r2, #0]
		if (left_output > maxpoint - deadband_scale)
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <main+0x2cc>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <main+0x2d8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad2      	subs	r2, r2, r3
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <main+0x2f8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	da04      	bge.n	80011d6 <main+0x252>
			left_output = maxpoint;       //max 500
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <main+0x2cc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a2a      	ldr	r2, [pc, #168]	; (800127c <main+0x2f8>)
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e00c      	b.n	80011f0 <main+0x26c>
		else if (left_output < minpoint + deadband_scale)
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <main+0x2d4>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <main+0x2d8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	441a      	add	r2, r3
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <main+0x2f8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dd03      	ble.n	80011f0 <main+0x26c>
			left_output = minpoint;  //min -500
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <main+0x2d4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <main+0x2f8>)
 80011ee:	6013      	str	r3, [r2, #0]

		right_output = (ch2_smooth - (ch1_smooth - 1500));
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <main+0x2ec>)
 80011f2:	681c      	ldr	r4, [r3, #0]
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <main+0x2e0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	491f      	ldr	r1, [pc, #124]	; (8001278 <main+0x2f4>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fbc8 	bl	8000990 <__aeabi_fsub>
 8001200:	4603      	mov	r3, r0
 8001202:	4619      	mov	r1, r3
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff fbc3 	bl	8000990 <__aeabi_fsub>
 800120a:	4603      	mov	r3, r0
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fcc9 	bl	8000ba4 <__aeabi_f2iz>
 8001212:	4603      	mov	r3, r0
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <main+0x300>)
 8001216:	6013      	str	r3, [r2, #0]
		if (right_output < midpoint - (deadband_scale / 4))
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <main+0x2d8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	da00      	bge.n	8001222 <main+0x29e>
 8001220:	3303      	adds	r3, #3
 8001222:	109b      	asrs	r3, r3, #2
 8001224:	425b      	negs	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <main+0x2d0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	441a      	add	r2, r3
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <main+0x300>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	dd28      	ble.n	8001288 <main+0x304>
			HAL_GPIO_WritePin(GPIOA, right_motor_direction_Pin, SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2110      	movs	r1, #16
 800123a:	4811      	ldr	r0, [pc, #68]	; (8001280 <main+0x2fc>)
 800123c:	f000 ff36 	bl	80020ac <HAL_GPIO_WritePin>
 8001240:	e027      	b.n	8001292 <main+0x30e>
 8001242:	bf00      	nop
 8001244:	20000074 	.word	0x20000074
 8001248:	2000002c 	.word	0x2000002c
 800124c:	20000110 	.word	0x20000110
 8001250:	20000144 	.word	0x20000144
 8001254:	20000148 	.word	0x20000148
 8001258:	2000014c 	.word	0x2000014c
 800125c:	20000140 	.word	0x20000140
 8001260:	20000150 	.word	0x20000150
 8001264:	2000015c 	.word	0x2000015c
 8001268:	40340000 	.word	0x40340000
 800126c:	200000d0 	.word	0x200000d0
 8001270:	20000160 	.word	0x20000160
 8001274:	200000f0 	.word	0x200000f0
 8001278:	44bb8000 	.word	0x44bb8000
 800127c:	20000154 	.word	0x20000154
 8001280:	40010800 	.word	0x40010800
 8001284:	20000158 	.word	0x20000158
		else
			HAL_GPIO_WritePin(GPIOA, right_motor_direction_Pin, RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2110      	movs	r1, #16
 800128c:	485a      	ldr	r0, [pc, #360]	; (80013f8 <main+0x474>)
 800128e:	f000 ff0d 	bl	80020ac <HAL_GPIO_WritePin>

		if (abs(right_output - midpoint) < deadband_scale)
 8001292:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <main+0x478>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b5a      	ldr	r3, [pc, #360]	; (8001400 <main+0x47c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <main+0x480>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	da03      	bge.n	80012b4 <main+0x330>
			right_output = midpoint;  //orta ölübant  (abs() -> mutlak değer)
 80012ac:	4b54      	ldr	r3, [pc, #336]	; (8001400 <main+0x47c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a52      	ldr	r2, [pc, #328]	; (80013fc <main+0x478>)
 80012b2:	6013      	str	r3, [r2, #0]
		if (right_output > maxpoint - deadband_scale)
 80012b4:	4b54      	ldr	r3, [pc, #336]	; (8001408 <main+0x484>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b52      	ldr	r3, [pc, #328]	; (8001404 <main+0x480>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	1ad2      	subs	r2, r2, r3
 80012be:	4b4f      	ldr	r3, [pc, #316]	; (80013fc <main+0x478>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	da04      	bge.n	80012d0 <main+0x34c>
			right_output = maxpoint;       //max 500
 80012c6:	4b50      	ldr	r3, [pc, #320]	; (8001408 <main+0x484>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <main+0x478>)
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00c      	b.n	80012ea <main+0x366>
		else if (right_output < minpoint + deadband_scale)
 80012d0:	4b4e      	ldr	r3, [pc, #312]	; (800140c <main+0x488>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <main+0x480>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	441a      	add	r2, r3
 80012da:	4b48      	ldr	r3, [pc, #288]	; (80013fc <main+0x478>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dd03      	ble.n	80012ea <main+0x366>
			right_output = minpoint;  //min -500
 80012e2:	4b4a      	ldr	r3, [pc, #296]	; (800140c <main+0x488>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a45      	ldr	r2, [pc, #276]	; (80013fc <main+0x478>)
 80012e8:	6013      	str	r3, [r2, #0]

		if (left_output == midpoint && right_output == midpoint)
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <main+0x48c>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <main+0x47c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d10b      	bne.n	800130e <main+0x38a>
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <main+0x478>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b41      	ldr	r3, [pc, #260]	; (8001400 <main+0x47c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d105      	bne.n	800130e <main+0x38a>
			HAL_GPIO_WritePin(GPIOA, handbrake_Pin, SET);
 8001302:	2201      	movs	r2, #1
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	483c      	ldr	r0, [pc, #240]	; (80013f8 <main+0x474>)
 8001308:	f000 fed0 	bl	80020ac <HAL_GPIO_WritePin>
 800130c:	e004      	b.n	8001318 <main+0x394>
		else
			HAL_GPIO_WritePin(GPIOA, handbrake_Pin, RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4839      	ldr	r0, [pc, #228]	; (80013f8 <main+0x474>)
 8001314:	f000 feca 	bl	80020ac <HAL_GPIO_WritePin>
		if(ch4>=1500)
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <main+0x490>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001322:	428a      	cmp	r2, r1
 8001324:	f173 0300 	sbcs.w	r3, r3, #0
 8001328:	d304      	bcc.n	8001334 <main+0x3b0>
		{
			HAL_GPIO_WritePin(GPIOA, handbrake_Pin, SET);
 800132a:	2201      	movs	r2, #1
 800132c:	2140      	movs	r1, #64	; 0x40
 800132e:	4832      	ldr	r0, [pc, #200]	; (80013f8 <main+0x474>)
 8001330:	f000 febc 	bl	80020ac <HAL_GPIO_WritePin>
		}

		if (left_output >= midpoint)
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <main+0x48c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b31      	ldr	r3, [pc, #196]	; (8001400 <main+0x47c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	db0f      	blt.n	8001360 <main+0x3dc>
			left_motor_pwm = map(left_output, midpoint, maxpoint, 0, 1000);
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <main+0x48c>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <main+0x47c>)
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <main+0x484>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	f7ff fc4c 	bl	8000bf0 <map>
 8001358:	4603      	mov	r3, r0
 800135a:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <main+0x494>)
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e013      	b.n	8001388 <main+0x404>
		else
			left_motor_pwm = abs(
					map(left_output, minpoint, midpoint, 0, 1000) - 1000);
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <main+0x48c>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <main+0x488>)
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <main+0x47c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2300      	movs	r3, #0
 8001374:	f7ff fc3c 	bl	8000bf0 <map>
 8001378:	4603      	mov	r3, r0
 800137a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
			left_motor_pwm = abs(
 800137e:	2b00      	cmp	r3, #0
 8001380:	bfb8      	it	lt
 8001382:	425b      	neglt	r3, r3
 8001384:	4a24      	ldr	r2, [pc, #144]	; (8001418 <main+0x494>)
 8001386:	6013      	str	r3, [r2, #0]

		if (right_output >= midpoint)
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <main+0x478>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <main+0x47c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	db0f      	blt.n	80013b4 <main+0x430>
			right_motor_pwm = map(right_output, midpoint, maxpoint,0, 1000);
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <main+0x478>)
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <main+0x47c>)
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <main+0x484>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	f7ff fc22 	bl	8000bf0 <map>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a1b      	ldr	r2, [pc, #108]	; (800141c <main+0x498>)
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e013      	b.n	80013dc <main+0x458>
		else
			right_motor_pwm = abs(
					map(right_output, minpoint, midpoint, 0, 1000) - 1000);
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <main+0x478>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <main+0x488>)
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <main+0x47c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	f7ff fc12 	bl	8000bf0 <map>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
			right_motor_pwm = abs(
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bfb8      	it	lt
 80013d6:	425b      	neglt	r3, r3
 80013d8:	4a10      	ldr	r2, [pc, #64]	; (800141c <main+0x498>)
 80013da:	6013      	str	r3, [r2, #0]


		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_motor_pwm);
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <main+0x494>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <main+0x49c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, right_motor_pwm);
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <main+0x498>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <main+0x49c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	639a      	str	r2, [r3, #56]	; 0x38

		HAL_Delay(20);
 80013f0:	2014      	movs	r0, #20
 80013f2:	f000 fba5 	bl	8001b40 <HAL_Delay>
		if (ch3<=1500) {
 80013f6:	e5ea      	b.n	8000fce <main+0x4a>
 80013f8:	40010800 	.word	0x40010800
 80013fc:	20000158 	.word	0x20000158
 8001400:	20000148 	.word	0x20000148
 8001404:	20000140 	.word	0x20000140
 8001408:	20000144 	.word	0x20000144
 800140c:	2000014c 	.word	0x2000014c
 8001410:	20000154 	.word	0x20000154
 8001414:	20000130 	.word	0x20000130
 8001418:	20000164 	.word	0x20000164
 800141c:	20000168 	.word	0x20000168
 8001420:	2000002c 	.word	0x2000002c

08001424 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b090      	sub	sp, #64	; 0x40
 8001428:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800142a:	f107 0318 	add.w	r3, r7, #24
 800142e:	2228      	movs	r2, #40	; 0x28
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f002 fcc8 	bl	8003dc8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001454:	2301      	movs	r3, #1
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001458:	2302      	movs	r3, #2
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001462:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fe35 	bl	80020dc <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x58>
		Error_Handler();
 8001478:	f000 f996 	bl	80017a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001480:	2302      	movs	r3, #2
 8001482:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2102      	movs	r1, #2
 8001496:	4618      	mov	r0, r3
 8001498:	f001 f8a2 	bl	80025e0 <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x82>
		Error_Handler();
 80014a2:	f000 f981 	bl	80017a8 <Error_Handler>
	}
}
 80014a6:	bf00      	nop
 80014a8:	3740      	adds	r7, #64	; 0x40
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b096      	sub	sp, #88	; 0x58
 80014b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2220      	movs	r2, #32
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fc6d 	bl	8003dc8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80014ee:	4b45      	ldr	r3, [pc, #276]	; (8001604 <MX_TIM1_Init+0x154>)
 80014f0:	4a45      	ldr	r2, [pc, #276]	; (8001608 <MX_TIM1_Init+0x158>)
 80014f2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 576 - 1;
 80014f4:	4b43      	ldr	r3, [pc, #268]	; (8001604 <MX_TIM1_Init+0x154>)
 80014f6:	f240 223f 	movw	r2, #575	; 0x23f
 80014fa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b41      	ldr	r3, [pc, #260]	; (8001604 <MX_TIM1_Init+0x154>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8001502:	4b40      	ldr	r3, [pc, #256]	; (8001604 <MX_TIM1_Init+0x154>)
 8001504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001508:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <MX_TIM1_Init+0x154>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <MX_TIM1_Init+0x154>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <MX_TIM1_Init+0x154>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800151c:	4839      	ldr	r0, [pc, #228]	; (8001604 <MX_TIM1_Init+0x154>)
 800151e:	f001 f9bb 	bl	8002898 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001528:	f000 f93e 	bl	80017a8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001532:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001536:	4619      	mov	r1, r3
 8001538:	4832      	ldr	r0, [pc, #200]	; (8001604 <MX_TIM1_Init+0x154>)
 800153a:	f001 fec1 	bl	80032c0 <HAL_TIM_ConfigClockSource>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x98>
		Error_Handler();
 8001544:	f000 f930 	bl	80017a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001548:	482e      	ldr	r0, [pc, #184]	; (8001604 <MX_TIM1_Init+0x154>)
 800154a:	f001 f9f4 	bl	8002936 <HAL_TIM_PWM_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8001554:	f000 f928 	bl	80017a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001560:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001564:	4619      	mov	r1, r3
 8001566:	4827      	ldr	r0, [pc, #156]	; (8001604 <MX_TIM1_Init+0x154>)
 8001568:	f002 fb48 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8001572:	f000 f919 	bl	80017a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001576:	2360      	movs	r3, #96	; 0x60
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	481a      	ldr	r0, [pc, #104]	; (8001604 <MX_TIM1_Init+0x154>)
 800159c:	f001 fdce 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80015a6:	f000 f8ff 	bl	80017a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	2204      	movs	r2, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4814      	ldr	r0, [pc, #80]	; (8001604 <MX_TIM1_Init+0x154>)
 80015b4:	f001 fdc2 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 80015be:	f000 f8f3 	bl	80017a8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015da:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <MX_TIM1_Init+0x154>)
 80015e6:	f002 fb67 	bl	8003cb8 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x144>
			!= HAL_OK) {
		Error_Handler();
 80015f0:	f000 f8da 	bl	80017a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <MX_TIM1_Init+0x154>)
 80015f6:	f000 f987 	bl	8001908 <HAL_TIM_MspPostInit>

}
 80015fa:	bf00      	nop
 80015fc:	3758      	adds	r7, #88	; 0x58
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000002c 	.word	0x2000002c
 8001608:	40012c00 	.word	0x40012c00

0800160c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800162a:	463b      	mov	r3, r7
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001636:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <MX_TIM2_Init+0x11c>)
 8001638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800163c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <MX_TIM2_Init+0x11c>)
 8001640:	2247      	movs	r2, #71	; 0x47
 8001642:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <MX_TIM2_Init+0x11c>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF;
 800164a:	4b37      	ldr	r3, [pc, #220]	; (8001728 <MX_TIM2_Init+0x11c>)
 800164c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001650:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <MX_TIM2_Init+0x11c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <MX_TIM2_Init+0x11c>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800165e:	4832      	ldr	r0, [pc, #200]	; (8001728 <MX_TIM2_Init+0x11c>)
 8001660:	f001 f91a 	bl	8002898 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x62>
		Error_Handler();
 800166a:	f000 f89d 	bl	80017a8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	4619      	mov	r1, r3
 800167a:	482b      	ldr	r0, [pc, #172]	; (8001728 <MX_TIM2_Init+0x11c>)
 800167c:	f001 fe20 	bl	80032c0 <HAL_TIM_ConfigClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001686:	f000 f88f 	bl	80017a8 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800168a:	4827      	ldr	r0, [pc, #156]	; (8001728 <MX_TIM2_Init+0x11c>)
 800168c:	f001 fa4e 	bl	8002b2c <HAL_TIM_IC_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x8e>
		Error_Handler();
 8001696:	f000 f887 	bl	80017a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	481f      	ldr	r0, [pc, #124]	; (8001728 <MX_TIM2_Init+0x11c>)
 80016aa:	f002 faa7 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 80016b4:	f000 f878 	bl	80017a8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016bc:	2301      	movs	r3, #1
 80016be:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80016c8:	463b      	mov	r3, r7
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	4816      	ldr	r0, [pc, #88]	; (8001728 <MX_TIM2_Init+0x11c>)
 80016d0:	f001 fc98 	bl	8003004 <HAL_TIM_IC_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0xd2>
		Error_Handler();
 80016da:	f000 f865 	bl	80017a8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80016de:	463b      	mov	r3, r7
 80016e0:	2204      	movs	r2, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4810      	ldr	r0, [pc, #64]	; (8001728 <MX_TIM2_Init+0x11c>)
 80016e6:	f001 fc8d 	bl	8003004 <HAL_TIM_IC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0xe8>
		Error_Handler();
 80016f0:	f000 f85a 	bl	80017a8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 80016f4:	463b      	mov	r3, r7
 80016f6:	2208      	movs	r2, #8
 80016f8:	4619      	mov	r1, r3
 80016fa:	480b      	ldr	r0, [pc, #44]	; (8001728 <MX_TIM2_Init+0x11c>)
 80016fc:	f001 fc82 	bl	8003004 <HAL_TIM_IC_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0xfe>
		Error_Handler();
 8001706:	f000 f84f 	bl	80017a8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 800170a:	463b      	mov	r3, r7
 800170c:	220c      	movs	r2, #12
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_TIM2_Init+0x11c>)
 8001712:	f001 fc77 	bl	8003004 <HAL_TIM_IC_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x114>
		Error_Handler();
 800171c:	f000 f844 	bl	80017a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000074 	.word	0x20000074

0800172c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_GPIO_Init+0x74>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <MX_GPIO_Init+0x74>)
 8001746:	f043 0320 	orr.w	r3, r3, #32
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_GPIO_Init+0x74>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_GPIO_Init+0x74>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <MX_GPIO_Init+0x74>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_GPIO_Init+0x74>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001770:	2200      	movs	r2, #0
 8001772:	21f0      	movs	r1, #240	; 0xf0
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <MX_GPIO_Init+0x78>)
 8001776:	f000 fc99 	bl	80020ac <HAL_GPIO_WritePin>
			right_motor_direction_Pin | left_motor_direction_Pin | handbrake_Pin
					| shifter_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : right_motor_direction_Pin left_motor_direction_Pin handbrake_Pin shifter_Pin */
	GPIO_InitStruct.Pin = right_motor_direction_Pin | left_motor_direction_Pin
 800177a:	23f0      	movs	r3, #240	; 0xf0
 800177c:	60bb      	str	r3, [r7, #8]
			| handbrake_Pin | shifter_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2302      	movs	r3, #2
 8001788:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	4619      	mov	r1, r3
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_GPIO_Init+0x78>)
 8001792:	f000 fb07 	bl	8001da4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010800 	.word	0x40010800

080017a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017b0:	e7fe      	b.n	80017b0 <Error_Handler+0x8>
	...

080017b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_MspInit+0x5c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_MspInit+0x5c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_MspInit+0x5c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_MspInit+0x5c>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_MspInit+0x5c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_MspInit+0x5c>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_MspInit+0x60>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_MspInit+0x60>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000

08001818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a32      	ldr	r2, [pc, #200]	; (80018fc <HAL_TIM_Base_MspInit+0xe4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d12c      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001838:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_TIM_Base_MspInit+0xe8>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a30      	ldr	r2, [pc, #192]	; (8001900 <HAL_TIM_Base_MspInit+0xe8>)
 800183e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_TIM_Base_MspInit+0xe8>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2018      	movs	r0, #24
 8001856:	f000 fa6e 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800185a:	2018      	movs	r0, #24
 800185c:	f000 fa87 	bl	8001d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2019      	movs	r0, #25
 8001866:	f000 fa66 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800186a:	2019      	movs	r0, #25
 800186c:	f000 fa7f 	bl	8001d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	201a      	movs	r0, #26
 8001876:	f000 fa5e 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800187a:	201a      	movs	r0, #26
 800187c:	f000 fa77 	bl	8001d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	201b      	movs	r0, #27
 8001886:	f000 fa56 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800188a:	201b      	movs	r0, #27
 800188c:	f000 fa6f 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001890:	e030      	b.n	80018f4 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189a:	d12b      	bne.n	80018f4 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_TIM_Base_MspInit+0xe8>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_TIM_Base_MspInit+0xe8>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_TIM_Base_MspInit+0xe8>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_TIM_Base_MspInit+0xe8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a11      	ldr	r2, [pc, #68]	; (8001900 <HAL_TIM_Base_MspInit+0xe8>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_TIM_Base_MspInit+0xe8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80018cc:	230f      	movs	r3, #15
 80018ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	4619      	mov	r1, r3
 80018de:	4809      	ldr	r0, [pc, #36]	; (8001904 <HAL_TIM_Base_MspInit+0xec>)
 80018e0:	f000 fa60 	bl	8001da4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	201c      	movs	r0, #28
 80018ea:	f000 fa24 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ee:	201c      	movs	r0, #28
 80018f0:	f000 fa3d 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40012c00 	.word	0x40012c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40010800 	.word	0x40010800

08001908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_TIM_MspPostInit+0x5c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d118      	bne.n	800195a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_TIM_MspPostInit+0x60>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_TIM_MspPostInit+0x60>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_TIM_MspPostInit+0x60>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001940:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2302      	movs	r3, #2
 800194c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_TIM_MspPostInit+0x64>)
 8001956:	f000 fa25 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40012c00 	.word	0x40012c00
 8001968:	40021000 	.word	0x40021000
 800196c:	40010800 	.word	0x40010800

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <MemManage_Handler+0x4>

08001982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler+0x4>

0800198e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b6:	f000 f8a7 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <TIM1_BRK_IRQHandler+0x10>)
 80019c6:	f001 fa15 	bl	8002df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000002c 	.word	0x2000002c

080019d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <TIM1_UP_IRQHandler+0x10>)
 80019da:	f001 fa0b 	bl	8002df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000002c 	.word	0x2000002c

080019e8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80019ee:	f001 fa01 	bl	8002df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000002c 	.word	0x2000002c

080019fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM1_CC_IRQHandler+0x10>)
 8001a02:	f001 f9f7 	bl	8002df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000002c 	.word	0x2000002c

08001a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <TIM2_IRQHandler+0x10>)
 8001a16:	f001 f9ed 	bl	8002df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000074 	.word	0x20000074

08001a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a30:	f7ff fff8 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a34:	480b      	ldr	r0, [pc, #44]	; (8001a64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a36:	490c      	ldr	r1, [pc, #48]	; (8001a68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a38:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a4c:	4c09      	ldr	r4, [pc, #36]	; (8001a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f002 f991 	bl	8003d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5e:	f7ff fa91 	bl	8000f84 <main>
  bx lr
 8001a62:	4770      	bx	lr
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a6c:	08003e1c 	.word	0x08003e1c
  ldr r2, =_sbss
 8001a70:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a74:	20000170 	.word	0x20000170

08001a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC1_2_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x28>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x28>)
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f947 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fe8c 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f95f 	bl	8001d8a <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 f927 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_IncTick+0x1c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_IncTick+0x20>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <HAL_IncTick+0x20>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000008 	.word	0x20000008
 8001b28:	2000016c 	.word	0x2000016c

08001b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <HAL_GetTick+0x10>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	2000016c 	.word	0x2000016c

08001b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b48:	f7ff fff0 	bl	8001b2c <HAL_GetTick>
 8001b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d005      	beq.n	8001b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_Delay+0x44>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b66:	bf00      	nop
 8001b68:	f7ff ffe0 	bl	8001b2c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d8f7      	bhi.n	8001b68 <HAL_Delay+0x28>
  {
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4906      	ldr	r1, [pc, #24]	; (8001c20 <__NVIC_EnableIRQ+0x34>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff90 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff2d 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff42 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff90 	bl	8001c78 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5f 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff35 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffa2 	bl	8001cdc <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b08b      	sub	sp, #44	; 0x2c
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	e169      	b.n	800208c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db8:	2201      	movs	r2, #1
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 8158 	bne.w	8002086 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4a9a      	ldr	r2, [pc, #616]	; (8002044 <HAL_GPIO_Init+0x2a0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d05e      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001de0:	4a98      	ldr	r2, [pc, #608]	; (8002044 <HAL_GPIO_Init+0x2a0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d875      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001de6:	4a98      	ldr	r2, [pc, #608]	; (8002048 <HAL_GPIO_Init+0x2a4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d058      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001dec:	4a96      	ldr	r2, [pc, #600]	; (8002048 <HAL_GPIO_Init+0x2a4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d86f      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001df2:	4a96      	ldr	r2, [pc, #600]	; (800204c <HAL_GPIO_Init+0x2a8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d052      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001df8:	4a94      	ldr	r2, [pc, #592]	; (800204c <HAL_GPIO_Init+0x2a8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d869      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001dfe:	4a94      	ldr	r2, [pc, #592]	; (8002050 <HAL_GPIO_Init+0x2ac>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d04c      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001e04:	4a92      	ldr	r2, [pc, #584]	; (8002050 <HAL_GPIO_Init+0x2ac>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d863      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001e0a:	4a92      	ldr	r2, [pc, #584]	; (8002054 <HAL_GPIO_Init+0x2b0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d046      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001e10:	4a90      	ldr	r2, [pc, #576]	; (8002054 <HAL_GPIO_Init+0x2b0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d85d      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001e16:	2b12      	cmp	r3, #18
 8001e18:	d82a      	bhi.n	8001e70 <HAL_GPIO_Init+0xcc>
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d859      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <HAL_GPIO_Init+0x80>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e9f 	.word	0x08001e9f
 8001e28:	08001e79 	.word	0x08001e79
 8001e2c:	08001e8b 	.word	0x08001e8b
 8001e30:	08001ecd 	.word	0x08001ecd
 8001e34:	08001ed3 	.word	0x08001ed3
 8001e38:	08001ed3 	.word	0x08001ed3
 8001e3c:	08001ed3 	.word	0x08001ed3
 8001e40:	08001ed3 	.word	0x08001ed3
 8001e44:	08001ed3 	.word	0x08001ed3
 8001e48:	08001ed3 	.word	0x08001ed3
 8001e4c:	08001ed3 	.word	0x08001ed3
 8001e50:	08001ed3 	.word	0x08001ed3
 8001e54:	08001ed3 	.word	0x08001ed3
 8001e58:	08001ed3 	.word	0x08001ed3
 8001e5c:	08001ed3 	.word	0x08001ed3
 8001e60:	08001ed3 	.word	0x08001ed3
 8001e64:	08001ed3 	.word	0x08001ed3
 8001e68:	08001e81 	.word	0x08001e81
 8001e6c:	08001e95 	.word	0x08001e95
 8001e70:	4a79      	ldr	r2, [pc, #484]	; (8002058 <HAL_GPIO_Init+0x2b4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e76:	e02c      	b.n	8001ed2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e029      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	3304      	adds	r3, #4
 8001e86:	623b      	str	r3, [r7, #32]
          break;
 8001e88:	e024      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	3308      	adds	r3, #8
 8001e90:	623b      	str	r3, [r7, #32]
          break;
 8001e92:	e01f      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	330c      	adds	r3, #12
 8001e9a:	623b      	str	r3, [r7, #32]
          break;
 8001e9c:	e01a      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e013      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	611a      	str	r2, [r3, #16]
          break;
 8001ebe:	e009      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	615a      	str	r2, [r3, #20]
          break;
 8001eca:	e003      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          break;
 8001ed2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d801      	bhi.n	8001ede <HAL_GPIO_Init+0x13a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_Init+0x13e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	d802      	bhi.n	8001ef0 <HAL_GPIO_Init+0x14c>
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x152>
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	3b08      	subs	r3, #8
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	210f      	movs	r1, #15
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	6a39      	ldr	r1, [r7, #32]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80b1 	beq.w	8002086 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f24:	4b4d      	ldr	r3, [pc, #308]	; (800205c <HAL_GPIO_Init+0x2b8>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x2b8>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_GPIO_Init+0x2b8>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f3c:	4a48      	ldr	r2, [pc, #288]	; (8002060 <HAL_GPIO_Init+0x2bc>)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a40      	ldr	r2, [pc, #256]	; (8002064 <HAL_GPIO_Init+0x2c0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d013      	beq.n	8001f90 <HAL_GPIO_Init+0x1ec>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <HAL_GPIO_Init+0x2c4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00d      	beq.n	8001f8c <HAL_GPIO_Init+0x1e8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3e      	ldr	r2, [pc, #248]	; (800206c <HAL_GPIO_Init+0x2c8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <HAL_GPIO_Init+0x1e4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3d      	ldr	r2, [pc, #244]	; (8002070 <HAL_GPIO_Init+0x2cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d101      	bne.n	8001f84 <HAL_GPIO_Init+0x1e0>
 8001f80:	2303      	movs	r3, #3
 8001f82:	e006      	b.n	8001f92 <HAL_GPIO_Init+0x1ee>
 8001f84:	2304      	movs	r3, #4
 8001f86:	e004      	b.n	8001f92 <HAL_GPIO_Init+0x1ee>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_Init+0x1ee>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_GPIO_Init+0x1ee>
 8001f90:	2300      	movs	r3, #0
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	f002 0203 	and.w	r2, r2, #3
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	4093      	lsls	r3, r2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fa2:	492f      	ldr	r1, [pc, #188]	; (8002060 <HAL_GPIO_Init+0x2bc>)
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	492c      	ldr	r1, [pc, #176]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4928      	ldr	r1, [pc, #160]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	4922      	ldr	r1, [pc, #136]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60cb      	str	r3, [r1, #12]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	491e      	ldr	r1, [pc, #120]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4918      	ldr	r1, [pc, #96]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	4914      	ldr	r1, [pc, #80]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8002024:	4013      	ands	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d021      	beq.n	8002078 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
 8002040:	e021      	b.n	8002086 <HAL_GPIO_Init+0x2e2>
 8002042:	bf00      	nop
 8002044:	10320000 	.word	0x10320000
 8002048:	10310000 	.word	0x10310000
 800204c:	10220000 	.word	0x10220000
 8002050:	10210000 	.word	0x10210000
 8002054:	10120000 	.word	0x10120000
 8002058:	10110000 	.word	0x10110000
 800205c:	40021000 	.word	0x40021000
 8002060:	40010000 	.word	0x40010000
 8002064:	40010800 	.word	0x40010800
 8002068:	40010c00 	.word	0x40010c00
 800206c:	40011000 	.word	0x40011000
 8002070:	40011400 	.word	0x40011400
 8002074:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_GPIO_Init+0x304>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	43db      	mvns	r3, r3
 8002080:	4909      	ldr	r1, [pc, #36]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8002082:	4013      	ands	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	3301      	adds	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	f47f ae8e 	bne.w	8001db8 <HAL_GPIO_Init+0x14>
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	372c      	adds	r7, #44	; 0x2c
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e272      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8087 	beq.w	800220a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020fc:	4b92      	ldr	r3, [pc, #584]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b04      	cmp	r3, #4
 8002106:	d00c      	beq.n	8002122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002108:	4b8f      	ldr	r3, [pc, #572]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d112      	bne.n	800213a <HAL_RCC_OscConfig+0x5e>
 8002114:	4b8c      	ldr	r3, [pc, #560]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d10b      	bne.n	800213a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002122:	4b89      	ldr	r3, [pc, #548]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d06c      	beq.n	8002208 <HAL_RCC_OscConfig+0x12c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d168      	bne.n	8002208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e24c      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x76>
 8002144:	4b80      	ldr	r3, [pc, #512]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a7f      	ldr	r2, [pc, #508]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e02e      	b.n	80021b0 <HAL_RCC_OscConfig+0xd4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x98>
 800215a:	4b7b      	ldr	r3, [pc, #492]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7a      	ldr	r2, [pc, #488]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b78      	ldr	r3, [pc, #480]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a77      	ldr	r2, [pc, #476]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xd4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0xbc>
 800217e:	4b72      	ldr	r3, [pc, #456]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a71      	ldr	r2, [pc, #452]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xd4>
 8002198:	4b6b      	ldr	r3, [pc, #428]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6a      	ldr	r2, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b68      	ldr	r3, [pc, #416]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a67      	ldr	r2, [pc, #412]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fcb8 	bl	8001b2c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff fcb4 	bl	8001b2c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e200      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe4>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fca4 	bl	8001b2c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff fca0 	bl	8001b2c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1ec      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x10c>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002216:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002222:	4b49      	ldr	r3, [pc, #292]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x18c>
 800222e:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x176>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c0      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4939      	ldr	r1, [pc, #228]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff fc59 	bl	8001b2c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227e:	f7ff fc55 	bl	8001b2c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1a1      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4927      	ldr	r1, [pc, #156]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fc38 	bl	8001b2c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7ff fc34 	bl	8001b2c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e180      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d03a      	beq.n	8002360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d019      	beq.n	8002326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7ff fc18 	bl	8001b2c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7ff fc14 	bl	8001b2c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e160      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800231e:	2001      	movs	r0, #1
 8002320:	f000 fa9c 	bl	800285c <RCC_Delay>
 8002324:	e01c      	b.n	8002360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7ff fbfe 	bl	8001b2c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002332:	e00f      	b.n	8002354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002334:	f7ff fbfa 	bl	8001b2c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d908      	bls.n	8002354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e146      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	42420000 	.word	0x42420000
 8002350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b92      	ldr	r3, [pc, #584]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e9      	bne.n	8002334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80a6 	beq.w	80024ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b8b      	ldr	r3, [pc, #556]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10d      	bne.n	800239a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a87      	ldr	r2, [pc, #540]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	61d3      	str	r3, [r2, #28]
 800238a:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_OscConfig+0x4c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <HAL_RCC_OscConfig+0x4c8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7e      	ldr	r2, [pc, #504]	; (80025a4 <HAL_RCC_OscConfig+0x4c8>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7ff fbbb 	bl	8001b2c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ba:	f7ff fbb7 	bl	8001b2c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e103      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	4b75      	ldr	r3, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x4c8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x312>
 80023e0:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a6e      	ldr	r2, [pc, #440]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	e02d      	b.n	800244a <HAL_RCC_OscConfig+0x36e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x334>
 80023f6:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a66      	ldr	r2, [pc, #408]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	e01c      	b.n	800244a <HAL_RCC_OscConfig+0x36e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d10c      	bne.n	8002432 <HAL_RCC_OscConfig+0x356>
 8002418:	4b61      	ldr	r3, [pc, #388]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a60      	ldr	r2, [pc, #384]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	4b5e      	ldr	r3, [pc, #376]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a5d      	ldr	r2, [pc, #372]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	e00b      	b.n	800244a <HAL_RCC_OscConfig+0x36e>
 8002432:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a5a      	ldr	r2, [pc, #360]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6213      	str	r3, [r2, #32]
 800243e:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a57      	ldr	r2, [pc, #348]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d015      	beq.n	800247e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7ff fb6b 	bl	8001b2c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7ff fb67 	bl	8001b2c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0b1      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002470:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0ee      	beq.n	800245a <HAL_RCC_OscConfig+0x37e>
 800247c:	e014      	b.n	80024a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7ff fb55 	bl	8001b2c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002484:	e00a      	b.n	800249c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7ff fb51 	bl	8001b2c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	; 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e09b      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249c:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1ee      	bne.n	8002486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d105      	bne.n	80024ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ae:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a3b      	ldr	r2, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8087 	beq.w	80025d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c4:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d061      	beq.n	8002594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d146      	bne.n	8002566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d8:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7ff fb25 	bl	8001b2c <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7ff fb21 	bl	8001b2c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e06d      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d108      	bne.n	8002520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4921      	ldr	r1, [pc, #132]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a19      	ldr	r1, [r3, #32]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	430b      	orrs	r3, r1
 8002532:	491b      	ldr	r1, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4cc>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7ff faf5 	bl	8001b2c <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002546:	f7ff faf1 	bl	8001b2c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e03d      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x46a>
 8002564:	e035      	b.n	80025d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_OscConfig+0x4cc>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7ff fade 	bl	8001b2c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002574:	f7ff fada 	bl	8001b2c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e026      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x498>
 8002592:	e01e      	b.n	80025d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e019      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
 80025a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x500>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000

080025e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d0      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f4:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d910      	bls.n	8002624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	4965      	ldr	r1, [pc, #404]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b8      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a58      	ldr	r2, [pc, #352]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800265e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494d      	ldr	r1, [pc, #308]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d040      	beq.n	8002700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e073      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06b      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4936      	ldr	r1, [pc, #216]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d0:	f7ff fa2c 	bl	8001b2c <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7ff fa28 	bl	8001b2c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e053      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d210      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0207 	bic.w	r2, r3, #7
 8002716:	4922      	ldr	r1, [pc, #136]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e032      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4916      	ldr	r1, [pc, #88]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490e      	ldr	r1, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800276e:	f000 f821 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490a      	ldr	r1, [pc, #40]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x1cc>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1d0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f98a 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08003df0 	.word	0x08003df0
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000004 	.word	0x20000004

080027b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <HAL_RCC_GetSysClockFreq+0x94>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d002      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x30>
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x36>
 80027e2:	e027      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_GetSysClockFreq+0x98>)
 80027e6:	613b      	str	r3, [r7, #16]
      break;
 80027e8:	e027      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0c9b      	lsrs	r3, r3, #18
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d010      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_RCC_GetSysClockFreq+0x94>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0c5b      	lsrs	r3, r3, #17
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_RCC_GetSysClockFreq+0xa0>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <HAL_RCC_GetSysClockFreq+0x98>)
 8002816:	fb03 f202 	mul.w	r2, r3, r2
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e004      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	613b      	str	r3, [r7, #16]
      break;
 8002832:	e002      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	613b      	str	r3, [r7, #16]
      break;
 8002838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283a:	693b      	ldr	r3, [r7, #16]
}
 800283c:	4618      	mov	r0, r3
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	007a1200 	.word	0x007a1200
 8002850:	08003e00 	.word	0x08003e00
 8002854:	08003e10 	.word	0x08003e10
 8002858:	003d0900 	.word	0x003d0900

0800285c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCC_Delay+0x34>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <RCC_Delay+0x38>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002878:	bf00      	nop
  }
  while (Delay --);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	60fa      	str	r2, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f9      	bne.n	8002878 <RCC_Delay+0x1c>
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	20000000 	.word	0x20000000
 8002894:	10624dd3 	.word	0x10624dd3

08002898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e041      	b.n	800292e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe ffaa 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 fdde 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e041      	b.n	80029cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f839 	bl	80029d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f000 fd8f 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d109      	bne.n	8002a0c <HAL_TIM_PWM_Start+0x24>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e022      	b.n	8002a52 <HAL_TIM_PWM_Start+0x6a>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d109      	bne.n	8002a26 <HAL_TIM_PWM_Start+0x3e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e015      	b.n	8002a52 <HAL_TIM_PWM_Start+0x6a>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d109      	bne.n	8002a40 <HAL_TIM_PWM_Start+0x58>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e008      	b.n	8002a52 <HAL_TIM_PWM_Start+0x6a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e05e      	b.n	8002b18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_PWM_Start+0x82>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a68:	e013      	b.n	8002a92 <HAL_TIM_PWM_Start+0xaa>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d104      	bne.n	8002a7a <HAL_TIM_PWM_Start+0x92>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a78:	e00b      	b.n	8002a92 <HAL_TIM_PWM_Start+0xaa>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d104      	bne.n	8002a8a <HAL_TIM_PWM_Start+0xa2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	e003      	b.n	8002a92 <HAL_TIM_PWM_Start+0xaa>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 f889 	bl	8003bb2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1e      	ldr	r2, [pc, #120]	; (8002b20 <HAL_TIM_PWM_Start+0x138>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d107      	bne.n	8002aba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_TIM_PWM_Start+0x138>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0xfa>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0xfa>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <HAL_TIM_PWM_Start+0x13c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0xfa>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_TIM_PWM_Start+0x140>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d111      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d010      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	e007      	b.n	8002b16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800

08002b2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e041      	b.n	8002bc2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f839 	bl	8002bca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 fc94 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d104      	bne.n	8002bfa <HAL_TIM_IC_Start_IT+0x1e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	e013      	b.n	8002c22 <HAL_TIM_IC_Start_IT+0x46>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d104      	bne.n	8002c0a <HAL_TIM_IC_Start_IT+0x2e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e00b      	b.n	8002c22 <HAL_TIM_IC_Start_IT+0x46>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d104      	bne.n	8002c1a <HAL_TIM_IC_Start_IT+0x3e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	e003      	b.n	8002c22 <HAL_TIM_IC_Start_IT+0x46>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d104      	bne.n	8002c34 <HAL_TIM_IC_Start_IT+0x58>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e013      	b.n	8002c5c <HAL_TIM_IC_Start_IT+0x80>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d104      	bne.n	8002c44 <HAL_TIM_IC_Start_IT+0x68>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e00b      	b.n	8002c5c <HAL_TIM_IC_Start_IT+0x80>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d104      	bne.n	8002c54 <HAL_TIM_IC_Start_IT+0x78>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e003      	b.n	8002c5c <HAL_TIM_IC_Start_IT+0x80>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c5e:	7bbb      	ldrb	r3, [r7, #14]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d102      	bne.n	8002c6a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c64:	7b7b      	ldrb	r3, [r7, #13]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d001      	beq.n	8002c6e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0b8      	b.n	8002de0 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_IC_Start_IT+0xa2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c7c:	e013      	b.n	8002ca6 <HAL_TIM_IC_Start_IT+0xca>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d104      	bne.n	8002c8e <HAL_TIM_IC_Start_IT+0xb2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c8c:	e00b      	b.n	8002ca6 <HAL_TIM_IC_Start_IT+0xca>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_IC_Start_IT+0xc2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c9c:	e003      	b.n	8002ca6 <HAL_TIM_IC_Start_IT+0xca>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <HAL_TIM_IC_Start_IT+0xda>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb4:	e013      	b.n	8002cde <HAL_TIM_IC_Start_IT+0x102>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d104      	bne.n	8002cc6 <HAL_TIM_IC_Start_IT+0xea>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cc4:	e00b      	b.n	8002cde <HAL_TIM_IC_Start_IT+0x102>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_IC_Start_IT+0xfa>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd4:	e003      	b.n	8002cde <HAL_TIM_IC_Start_IT+0x102>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	d841      	bhi.n	8002d68 <HAL_TIM_IC_Start_IT+0x18c>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_TIM_IC_Start_IT+0x110>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	08002d69 	.word	0x08002d69
 8002cf4:	08002d69 	.word	0x08002d69
 8002cf8:	08002d69 	.word	0x08002d69
 8002cfc:	08002d33 	.word	0x08002d33
 8002d00:	08002d69 	.word	0x08002d69
 8002d04:	08002d69 	.word	0x08002d69
 8002d08:	08002d69 	.word	0x08002d69
 8002d0c:	08002d45 	.word	0x08002d45
 8002d10:	08002d69 	.word	0x08002d69
 8002d14:	08002d69 	.word	0x08002d69
 8002d18:	08002d69 	.word	0x08002d69
 8002d1c:	08002d57 	.word	0x08002d57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0202 	orr.w	r2, r2, #2
 8002d2e:	60da      	str	r2, [r3, #12]
      break;
 8002d30:	e01d      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0204 	orr.w	r2, r2, #4
 8002d40:	60da      	str	r2, [r3, #12]
      break;
 8002d42:	e014      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0208 	orr.w	r2, r2, #8
 8002d52:	60da      	str	r2, [r3, #12]
      break;
 8002d54:	e00b      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0210 	orr.w	r2, r2, #16
 8002d64:	60da      	str	r2, [r3, #12]
      break;
 8002d66:	e002      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d134      	bne.n	8002dde <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	6839      	ldr	r1, [r7, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 ff18 	bl	8003bb2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_TIM_IC_Start_IT+0x20c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00e      	beq.n	8002daa <HAL_TIM_IC_Start_IT+0x1ce>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d94:	d009      	beq.n	8002daa <HAL_TIM_IC_Start_IT+0x1ce>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a14      	ldr	r2, [pc, #80]	; (8002dec <HAL_TIM_IC_Start_IT+0x210>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d004      	beq.n	8002daa <HAL_TIM_IC_Start_IT+0x1ce>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <HAL_TIM_IC_Start_IT+0x214>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d111      	bne.n	8002dce <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b06      	cmp	r3, #6
 8002dba:	d010      	beq.n	8002dde <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dcc:	e007      	b.n	8002dde <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800

08002df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d122      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d11b      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0202 	mvn.w	r2, #2
 8002e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fd fef6 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002e3c:	e005      	b.n	8002e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fb0e 	bl	8003460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fb14 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d122      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0204 	mvn.w	r2, #4
 8002e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fecc 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fae4 	bl	8003460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 faea 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d122      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0208 	mvn.w	r2, #8
 8002ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fea2 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002ee4:	e005      	b.n	8002ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 faba 	bl	8003460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fac0 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d122      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d11b      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0210 	mvn.w	r2, #16
 8002f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2208      	movs	r2, #8
 8002f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fd fe78 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8002f38:	e005      	b.n	8002f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa90 	bl	8003460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fa96 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d107      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0201 	mvn.w	r2, #1
 8002f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa6b 	bl	800344e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b80      	cmp	r3, #128	; 0x80
 8002f84:	d10e      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f90:	2b80      	cmp	r3, #128	; 0x80
 8002f92:	d107      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fee4 	bl	8003d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa5a 	bl	8003484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0220 	mvn.w	r2, #32
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 feaf 	bl	8003d5a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_TIM_IC_ConfigChannel+0x1e>
 800301e:	2302      	movs	r3, #2
 8003020:	e088      	b.n	8003134 <HAL_TIM_IC_ConfigChannel+0x130>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f000 fc14 	bl	800386c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 020c 	bic.w	r2, r2, #12
 8003052:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6999      	ldr	r1, [r3, #24]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	619a      	str	r2, [r3, #24]
 8003066:	e060      	b.n	800312a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b04      	cmp	r3, #4
 800306c:	d11c      	bne.n	80030a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f000 fc7d 	bl	800397c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003090:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6999      	ldr	r1, [r3, #24]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	619a      	str	r2, [r3, #24]
 80030a6:	e040      	b.n	800312a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d11b      	bne.n	80030e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f000 fcc8 	bl	8003a52 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69da      	ldr	r2, [r3, #28]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 020c 	bic.w	r2, r2, #12
 80030d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69d9      	ldr	r1, [r3, #28]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	61da      	str	r2, [r3, #28]
 80030e4:	e021      	b.n	800312a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b0c      	cmp	r3, #12
 80030ea:	d11c      	bne.n	8003126 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	6819      	ldr	r1, [r3, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f000 fce4 	bl	8003ac8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800310e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69d9      	ldr	r1, [r3, #28]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	021a      	lsls	r2, r3, #8
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	61da      	str	r2, [r3, #28]
 8003124:	e001      	b.n	800312a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003132:	7dfb      	ldrb	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003156:	2302      	movs	r3, #2
 8003158:	e0ae      	b.n	80032b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	f200 809f 	bhi.w	80032a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080032a9 	.word	0x080032a9
 8003178:	080032a9 	.word	0x080032a9
 800317c:	080032a9 	.word	0x080032a9
 8003180:	080031e5 	.word	0x080031e5
 8003184:	080032a9 	.word	0x080032a9
 8003188:	080032a9 	.word	0x080032a9
 800318c:	080032a9 	.word	0x080032a9
 8003190:	08003227 	.word	0x08003227
 8003194:	080032a9 	.word	0x080032a9
 8003198:	080032a9 	.word	0x080032a9
 800319c:	080032a9 	.word	0x080032a9
 80031a0:	08003267 	.word	0x08003267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f9d6 	bl	800355c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0208 	orr.w	r2, r2, #8
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0204 	bic.w	r2, r2, #4
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	619a      	str	r2, [r3, #24]
      break;
 80031e2:	e064      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fa1c 	bl	8003628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6999      	ldr	r1, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	021a      	lsls	r2, r3, #8
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	619a      	str	r2, [r3, #24]
      break;
 8003224:	e043      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa65 	bl	80036fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0208 	orr.w	r2, r2, #8
 8003240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0204 	bic.w	r2, r2, #4
 8003250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69d9      	ldr	r1, [r3, #28]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
      break;
 8003264:	e023      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 faaf 	bl	80037d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69d9      	ldr	r1, [r3, #28]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	61da      	str	r2, [r3, #28]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
      break;
 80032ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_TIM_ConfigClockSource+0x1c>
 80032d8:	2302      	movs	r3, #2
 80032da:	e0b4      	b.n	8003446 <HAL_TIM_ConfigClockSource+0x186>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003314:	d03e      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0xd4>
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	f200 8087 	bhi.w	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003322:	f000 8086 	beq.w	8003432 <HAL_TIM_ConfigClockSource+0x172>
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d87f      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b70      	cmp	r3, #112	; 0x70
 800332e:	d01a      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0xa6>
 8003330:	2b70      	cmp	r3, #112	; 0x70
 8003332:	d87b      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b60      	cmp	r3, #96	; 0x60
 8003336:	d050      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x11a>
 8003338:	2b60      	cmp	r3, #96	; 0x60
 800333a:	d877      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b50      	cmp	r3, #80	; 0x50
 800333e:	d03c      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0xfa>
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d873      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d058      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x13a>
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d86f      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d064      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003350:	2b30      	cmp	r3, #48	; 0x30
 8003352:	d86b      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d060      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d867      	bhi.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d05c      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003360:	2b10      	cmp	r3, #16
 8003362:	d05a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x15a>
 8003364:	e062      	b.n	800342c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f000 fbfd 	bl	8003b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]
      break;
 8003392:	e04f      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6899      	ldr	r1, [r3, #8]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f000 fbe6 	bl	8003b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b6:	609a      	str	r2, [r3, #8]
      break;
 80033b8:	e03c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 faaa 	bl	8003920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2150      	movs	r1, #80	; 0x50
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fbb4 	bl	8003b40 <TIM_ITRx_SetConfig>
      break;
 80033d8:	e02c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f000 fb04 	bl	80039f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2160      	movs	r1, #96	; 0x60
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fba4 	bl	8003b40 <TIM_ITRx_SetConfig>
      break;
 80033f8:	e01c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	461a      	mov	r2, r3
 8003408:	f000 fa8a 	bl	8003920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fb94 	bl	8003b40 <TIM_ITRx_SetConfig>
      break;
 8003418:	e00c      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f000 fb8b 	bl	8003b40 <TIM_ITRx_SetConfig>
      break;
 800342a:	e003      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e000      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
	...

08003498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a29      	ldr	r2, [pc, #164]	; (8003550 <TIM_Base_SetConfig+0xb8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00b      	beq.n	80034c8 <TIM_Base_SetConfig+0x30>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b6:	d007      	beq.n	80034c8 <TIM_Base_SetConfig+0x30>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a26      	ldr	r2, [pc, #152]	; (8003554 <TIM_Base_SetConfig+0xbc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_Base_SetConfig+0x30>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a25      	ldr	r2, [pc, #148]	; (8003558 <TIM_Base_SetConfig+0xc0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <TIM_Base_SetConfig+0xb8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <TIM_Base_SetConfig+0x62>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d007      	beq.n	80034fa <TIM_Base_SetConfig+0x62>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <TIM_Base_SetConfig+0xbc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_Base_SetConfig+0x62>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <TIM_Base_SetConfig+0xc0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a07      	ldr	r2, [pc, #28]	; (8003550 <TIM_Base_SetConfig+0xb8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d103      	bne.n	8003540 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	615a      	str	r2, [r3, #20]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800

0800355c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f023 0201 	bic.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0302 	bic.w	r3, r3, #2
 80035a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <TIM_OC1_SetConfig+0xc8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d10c      	bne.n	80035d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0308 	bic.w	r3, r3, #8
 80035be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a13      	ldr	r2, [pc, #76]	; (8003624 <TIM_OC1_SetConfig+0xc8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40012c00 	.word	0x40012c00

08003628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f023 0210 	bic.w	r2, r3, #16
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0320 	bic.w	r3, r3, #32
 8003672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <TIM_OC2_SetConfig+0xd0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d10d      	bne.n	80036a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <TIM_OC2_SetConfig+0xd0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d113      	bne.n	80036d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40012c00 	.word	0x40012c00

080036fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <TIM_OC3_SetConfig+0xd0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10d      	bne.n	8003776 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <TIM_OC3_SetConfig+0xd0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d113      	bne.n	80037a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800378c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40012c00 	.word	0x40012c00

080037d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800381a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <TIM_OC4_SetConfig+0x98>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d109      	bne.n	8003844 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40012c00 	.word	0x40012c00

0800386c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f023 0201 	bic.w	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <TIM_TI1_SetConfig+0xa8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00b      	beq.n	80038b2 <TIM_TI1_SetConfig+0x46>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a0:	d007      	beq.n	80038b2 <TIM_TI1_SetConfig+0x46>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <TIM_TI1_SetConfig+0xac>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_TI1_SetConfig+0x46>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a1b      	ldr	r2, [pc, #108]	; (800391c <TIM_TI1_SetConfig+0xb0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <TIM_TI1_SetConfig+0x4a>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <TIM_TI1_SetConfig+0x4c>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e003      	b.n	80038d6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f023 030a 	bic.w	r3, r3, #10
 80038f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f003 030a 	and.w	r3, r3, #10
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800

08003920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0201 	bic.w	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f023 030a 	bic.w	r3, r3, #10
 800395c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	621a      	str	r2, [r3, #32]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f023 0210 	bic.w	r2, r3, #16
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	031b      	lsls	r3, r3, #12
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0210 	bic.w	r2, r3, #16
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	031b      	lsls	r3, r3, #12
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	621a      	str	r2, [r3, #32]
}
 8003a48:	bf00      	nop
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b087      	sub	sp, #28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	031b      	lsls	r3, r3, #12
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	031b      	lsls	r3, r3, #12
 8003b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f043 0307 	orr.w	r3, r3, #7
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	609a      	str	r2, [r3, #8]
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	021a      	lsls	r2, r3, #8
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	609a      	str	r2, [r3, #8]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1a      	ldr	r2, [r3, #32]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	621a      	str	r2, [r3, #32]
}
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr
	...

08003bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e046      	b.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d009      	beq.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10c      	bne.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800

08003cb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e03d      	b.n	8003d50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
	...

08003d80 <__libc_init_array>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	2600      	movs	r6, #0
 8003d84:	4d0c      	ldr	r5, [pc, #48]	; (8003db8 <__libc_init_array+0x38>)
 8003d86:	4c0d      	ldr	r4, [pc, #52]	; (8003dbc <__libc_init_array+0x3c>)
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	42a6      	cmp	r6, r4
 8003d8e:	d109      	bne.n	8003da4 <__libc_init_array+0x24>
 8003d90:	f000 f822 	bl	8003dd8 <_init>
 8003d94:	2600      	movs	r6, #0
 8003d96:	4d0a      	ldr	r5, [pc, #40]	; (8003dc0 <__libc_init_array+0x40>)
 8003d98:	4c0a      	ldr	r4, [pc, #40]	; (8003dc4 <__libc_init_array+0x44>)
 8003d9a:	1b64      	subs	r4, r4, r5
 8003d9c:	10a4      	asrs	r4, r4, #2
 8003d9e:	42a6      	cmp	r6, r4
 8003da0:	d105      	bne.n	8003dae <__libc_init_array+0x2e>
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da8:	4798      	blx	r3
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7ee      	b.n	8003d8c <__libc_init_array+0xc>
 8003dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db2:	4798      	blx	r3
 8003db4:	3601      	adds	r6, #1
 8003db6:	e7f2      	b.n	8003d9e <__libc_init_array+0x1e>
 8003db8:	08003e14 	.word	0x08003e14
 8003dbc:	08003e14 	.word	0x08003e14
 8003dc0:	08003e14 	.word	0x08003e14
 8003dc4:	08003e18 	.word	0x08003e18

08003dc8 <memset>:
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4402      	add	r2, r0
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <memset+0xa>
 8003dd0:	4770      	bx	lr
 8003dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd6:	e7f9      	b.n	8003dcc <memset+0x4>

08003dd8 <_init>:
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	bf00      	nop
 8003ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dde:	bc08      	pop	{r3}
 8003de0:	469e      	mov	lr, r3
 8003de2:	4770      	bx	lr

08003de4 <_fini>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	bf00      	nop
 8003de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dea:	bc08      	pop	{r3}
 8003dec:	469e      	mov	lr, r3
 8003dee:	4770      	bx	lr
